/* Copyright (C) 2004   db4objects Inc.   http://www.db4o.com */

package com.yetac.doctor.writers;

import java.awt.Color;
import java.io.*;
import java.net.*;

import com.lowagie.text.pdf.*;
import com.lowagie.text.BadElementException;
import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.HeaderFooter;
import com.lowagie.text.Image;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.Table;

import com.yetac.doctor.applet.ExampleRunner;
import com.yetac.doctor.cmd.*;
import com.yetac.doctor.workers.*;

public class PDFWriter extends AbstractWriter {
    private ExampleRunner runner;

    private PdfWriter writer;
    private Document  document;

    private Font      invisibleFont;

    private BaseFont  baseFont;
    private Font      boldFont;
    private Font      defaultFont;
    private Font      italicFont;
    private Font      linkFont;
    private Font      h1Font;
    private Font      h2Font;
    private Font      sourceFont;
    private Font      smallFont;

    PdfOutline[]      outlineNodes;

    public void start(Files _files) throws Exception {
        super.start(_files);
        files.task.setVariable("pdf", new Boolean(true));

        document = new Document();
        writer = PdfWriter.getInstance(document, new FileOutputStream(path()));
        writer.setViewerPreferences(PdfWriter.PageModeUseOutlines);
        
        outlineNodes = new PdfOutline[10];

        File yapFile=File.createTempFile("formula1",".yap");
        
        try{
            runner=new ExampleRunner(getClass().getClassLoader(),yapFile);
        }catch(Exception e){
            System.err.println("*** Example runner could not be installed. Continuing without. Reason:");
            e.printStackTrace();
        }

        document.addAuthor(files.task.author());
        document.addCreationDate();
        document.addCreator(files.task.creator());
        document.addTitle(files.task.title());
        document.addProducer();
        document.open();

        PdfContentByte cb = writer.getDirectContent();
        outlineNodes[0] = cb.getRootOutline();
        
        String baseFontPath = files.task.getPdfBaseFont();

        invisibleFont = FontFactory.getFont(FontFactory.COURIER, 1,
            Font.NORMAL, Color.WHITE);
        try {
            baseFont = BaseFont.createFont(baseFontPath, BaseFont.WINANSI,
                BaseFont.EMBEDDED);
        } catch (Exception e) {
            files.task.log("Font for PDF generation not available: "
                + baseFontPath);
            files.task.log("Supply a valid PDF_BASE_FONT in Configuration.java");
        }
        defaultFont = new Font(baseFont, 10, Font.NORMAL, Color.BLACK);
        boldFont = new Font(baseFont, 10, Font.BOLD, Color.BLACK);
        italicFont = new Font(baseFont, 10, Font.ITALIC, Color.BLACK);
        linkFont = new Font(baseFont, 10, Font.NORMAL, Color.BLUE);
        h1Font = new Font(baseFont, 12, Font.BOLD, Color.BLACK);
        h2Font = new Font(baseFont, 10, Font.BOLD, Color.BLACK);
        smallFont = new Font(baseFont, 6, Font.BOLD, Color.BLACK);
        sourceFont = new Font(Font.COURIER, 10, Font.NORMAL, Color.BLACK);
        Paragraph para = new Paragraph(
            "PDF by iText, generated by Doctor, courtesy of db4objects", smallFont);
        HeaderFooter footer = new HeaderFooter(para, false);
        footer.setAlignment(2);
        footer.setBorder(Rectangle.NO_BORDER);
        document.setFooter(footer);
    }

    public void setSource(DocsFile source) throws Exception {
        if (source != null) {
            for (int i = 0; i < 3; i++) {
                document.add(new Paragraph(" ", defaultFont));
            }
        }
        super.setSource(source);
    }

    public void write(Anchor command) throws Exception {
        String str = new String(command.parameter);
        Chunk chunk = new Chunk(".", invisibleFont);
        com.lowagie.text.Anchor anchor = new com.lowagie.text.Anchor(chunk);
        anchor.setName(str);
        document.add(anchor);
    }

    public void write(Bold command) throws Exception {
        document.add(new Chunk(new String(command.text), boldFont));
    }
    
    public void write(Italic command) throws Exception{
        document.add(new Chunk(new String(command.text), italicFont));
    }

    public void write(Link command) throws Exception {
        com.lowagie.text.Anchor anchor = new com.lowagie.text.Anchor(new Chunk(
            new String(command.text), linkFont));
        if (command.external()) {
            anchor.setReference(new String(command.parameter));
        } else {
            anchor.setReference("#" + new String(command.parameter));
        }
        document.add(anchor);
    }

    public void write(Graphic command) throws Exception {
        Image image = Image
            .getInstance(new URL("file:" + command.sourcePath()));
        document.add(image);
    }

    public void write(NewPage command) throws Exception {
        document.newPage();
    }

    public void write(Outline command) throws Exception {
        if (!firstPage) {
            while (outlineLevel < command.level) {
                outlineLevel++;
            }
            while (outlineLevel > command.level) {
                outlineNodes[outlineLevel] = null;
                outlineNumbers[outlineLevel--] = 0;
            }
            outlineNumbers[outlineLevel]++;
        }

        String numbersAndText = outlineNumberString()
            + new String(command.parameter);
        PdfDestination dest = new PdfDestination(PdfDestination.FIT);

        for (int i = outlineLevel; i >= 0; i--) {
            if (outlineNodes[i] != null) {
                outlineNodes[outlineLevel + 1] = new PdfOutline(
                    outlineNodes[i], dest, numbersAndText);
                break;
            }
        }

        Font outLineFont = outlineLevel == 0 ? h1Font : h2Font;

        document.add(new Chunk(numbersAndText, outLineFont));
    }

    public void write(OutputConsole command) throws Exception {
        writeOutputBlock(command.text);
    }

    private void writeOutputBlock(byte[] text) throws BadElementException, DocumentException {
        Table table = new Table(1, 1);
        Phrase ph=new Phrase(new Chunk(new String("OUTPUT:\n"), boldFont));
        ph.add(new Chunk(new String(text), sourceFont));
        Color bc = new Color(0xA0, 0xA0, 0xA0);
        
        table.addCell(ph);
        table.setBorderColor(bc);
        table.setBorderWidth(10);
        table.setBackgroundColor(bc);
        document.add(table);
    }

    private void writeSourceCodeBlock(byte[] code,String methodName) throws Exception {
        Table table = new Table(1, 1);
        Chunk ch = new Chunk(new String(code), sourceFont);
        Color c = new Color(245, 245, 245);
        ch.setBackground(c);
        table.addCell(new Phrase(ch));
        table.setBorderColor(c);
        table.setBorderWidth(10);
        table.setBackgroundColor(c);
        document.add(table);
    }

    public void write(Source command) throws Exception {
        File file = command.getFile();
        if (file.exists()) {
            RandomAccessFile raf = new RandomAccessFile(file, "r");
            byte[] bytes = new byte[(int) raf.length()];
            raf.read(bytes);
            raf.close();
            if(command.getMethodName()!=null) {
                bytes=extractMethod(bytes,command.getMethodName(),command.getParamValue(Source.CMD_FULL));
            }
            writeSourceCodeBlock(bytes,command.getMethodName());
            String methodname=command.getMethodName();
            if(methodname!=null&&command.getParamValue(Source.CMD_RUN)) {
                try {
	                ByteArrayOutputStream out=new ByteArrayOutputStream();
	                runner.runExample(command.getClassName(),command.getMethodName(),out);
	                out.close();
	                if(command.getParamValue(Source.CMD_OUTPUT)) {
	                    writeOutputBlock(out.toByteArray());
	                }
                }
                catch(Exception exc) {
                    exc.printStackTrace();
                }
            }
        }
    }

    public void write(Code command) throws Exception {
        writeSourceCodeBlock(command.text,null);
    }

    public void write(byte[] bytes, int start, int end) {
        writeToFile(bytes, start, end);
    }

    protected void writeToFile(byte[] bytes, int start, int end) {
        int len = end - start + 1;
        if (len > 0) {
            try {
                document.add(new Chunk(new String(bytes, start, len),
                    defaultFont));
            } catch (DocumentException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public void end() {
        files.task.setVariable("PDF", new Boolean(false));
        document.close();
    }

    protected String extension() {
        return "pdf";
    }
}