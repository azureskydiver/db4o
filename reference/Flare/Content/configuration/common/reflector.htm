<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="1360" MadCap:lastWidth="560">
    <head>
    </head>
    <body>
        <h1>
            <MadCap:keyword term="Configuration::Classloader;Classloader" />Changing The Reflector</h1>
        <p>This setting allows you to change the reflector for db4o. The reflector is responsible to inspect the metadata of objects and report them to db4o. <MadCap:xref href="../../advanced_topics/db4o_reflection_api.htm" target="" title="" alt="">See "Db4o Reflection API"</MadCap:xref></p>
        <p MadCap:conditions="Primary.Java">This setting also allows you also to specify which class-loader is used to find classes. For that you pass the right class-loader to the JdkReflector constructor.<br /></p>
        <MadCap:snippetBlock src="../../Snippets/dotNetReflectorChoise.flsnp" />
        <MadCap:snippetBlock src="../../CodeExamples/configuration/common/CommonConfigurationExamples-Change-the-reflector.all.flsnp" />
        <p MadCap:conditions="Primary.Java"> It's also possible to use very special class resolving strategy by implementing the JdkLoader-interface. For example when you want to look up classes in multiple class loaders.</p>
        <MadCap:snippetBlock src="../../CodeExamples/configuration/common/CommonConfigurationExamples-Complex-class-loader-scenario.all.flsnp" />
        <MadCap:snippetBlock src="../../CodeExamples/configuration/common/ClassLoaderLookup-Complex-class-loader-scenario.all.flsnp" />
        <p>&#160;</p>
    </body>
</html>