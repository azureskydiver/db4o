<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Persistent Hashtables	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Persistent Hashtables</h1>Hashtable or Hashmap is a data structure that associates
keys to values. Hashtable uses a hash function to quickly navigate to a
specific value. Hash function returns an integer value - hash code - based on a
specific algorithm which can be based on the contents of the object. Different
hash algorithms can be used to produce hash codes for different objects. The
general requirements for hash code are the following:

<ul><li>hash function must return the same result for the same
object during the lifetime of the application</li><li>hash function must produce the same results for the
objects that are equal according to the equals(object) function</li><li>if 2 objects are unequal according to the equals(object)
function it is not required that the hash function produce distinct results</li></ul>





<p>As you can see from the last point there can be more than
one distinct key object in a hashtable that have the same hash code. Special
methods called collision resolution are used to find the correct value for the
specific key. Usually a separate storage - a bucket - is used for all keys with
the same hash code. In this case a bucket is located by the hash code and then
the right key is searched within the bucket, which allows to get a good enough
performance. This works good enough for an in-memory hashtable as the hash
values are not changed during application lifetime. However, it gets more
difficult with a persistent hashtable.</p>

<p>When a hashtable is stored to a database - the hash values
are not stored. As we know from the definition, the hash value of an object is
only required to stay the same during the application lifetime, which means
that if the hashtable will be loaded into memory from the database in another
application or in another session, the hash values of the keys can differ from
their initial value. We will still be able to retrieve values by their key
objects if equals and hashCode functions are based on the object contents.
However the consistency of the hashtable can potentially be broken. This can
happen if the key objects from different buckets will obtain the same hash
value as the result of re-instantiation from the database. </p>

<p>The simplest way to avoid the inconsistency of the persisted
hash table use object content-based hash code functions for your key objects.
Otherwise you may want to invent your own collision resolution algorithm.</p></div>
    </div>
    
  </body></html>
