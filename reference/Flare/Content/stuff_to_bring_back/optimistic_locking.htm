<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="428" MadCap:lastWidth="544" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;a1;b1;c1;b2;uncomment" MadCap:conditionTagExpression="">
    <head>
    </head>
    <body>
        <h1>Optimistic Locking</h1>
        <p>In optimistic locking system no locks are used to prevent
collision: Any user can read an object into the memory and work on it at any
time. However, before the client can save its modifications back to the database,
a check should take place verifying that the item did not change since the time
of initial read (no collision occurred). If a collision is detected it should
be resolved according to your application logic. Typical solutions are:</p>
        <ul>
            <li>Rollback.
</li>
            <li>Display the
problem and let the user decide. </li>
            <li>Merge the
changes. </li>
            <li>Log the
problem so someone can decide later .</li>
            <li>Ignore the
collision and overwrite.</li>
        </ul>
        <p>Optimistic locking assumes that the normally no conflict is occurs. It works best when you do short unit of works in the database.</p>
        <p>In this example we use a base-class for all objects which contains the version-number. The version-number is increased when updating an object. Register the event handler on the clients.</p>
        <p>Now before committing the transaction the we should check that no other transaction has changed the same object meanwhile. We can do that by peeking a the latest committed version and comparing it to the version we're about to commit.</p>
        <p>&#160;</p>
        <p>&#160;</p>
    </body>
</html>