<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Semaphores	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
        <h1>Semaphores</h1>


<p>db4o Semaphores are named flags that can only be owned by one client/transaction at one time. They are supplied to be used as locks for exclusive access to code blocks in applications and to signal states from one client to the server and to all other clients.</p>

<p>The naming of semaphores is up to the application. Any string can be used.</p>

<p>Semaphores are freed automatically when a client disconnects correctly or when a clients presence is no longer detected by the server, that constantly monitors all client connections.</p>

<p>Semaphores can be set and released with the following two methods:</p>

<p MadCap:conditions="Primary.Java">

<p>Java:</p>
 
<p><code>ExtObjectContainer#setSemaphore(String name, int waitMilliSeconds); ExtObjectContainer#releaseSemaphore(String name); </code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET: </p>
<p><code>IExtObjectContainer#SetSemaphore(string name, int waitMilliSeconds); IExtObjectContainer#ReleaseSemaphore(string name); </code></p>

</p><p MadCap:conditions="Primary:net" />
<a name="OO Languages Semaphores "></a><h2>OO Languages Semaphores </h2>
The concept of db4o semaphores is very similar to the concept of synchronization in OO programming languages: 
<p MadCap:conditions="Primary.Java">

<p>Java: </p>
<p><code>synchronized(monitorObject){   // exclusive code block here
  }</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET: </p>
<p><code>lock(monitorObject){   // exclusive code block here 
 }</code></p>

</p><p MadCap:conditions="Primary:net" />

<a name="db4o Semaphore"></a><h2>db4o Semaphore</h2>
<p MadCap:conditions="Primary.Java">

<p>Java:</p>
<p><code>if(objectContainer.ext().setSemaphore(semaphoreName, 1000){  // exclusive code block here objectContainer.ext().releaseSemaphore(semaphoreName); } </code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET: </p>
<p><code>if(objectContainer.Ext().SetSemaphore(semaphoreName, 1000){  // exclusive code block here objectContainer.Ext().ReleaseSemaphore(semaphoreName); } </code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Although the principle of semaphores is very simple they are powerful enough for a wide range of usecases.</p>
<p>More Reading:<ul>
<li><p><a href="semaphores/locking_objects.htm" class="wikiLink">Locking Objects</a></p></li>
<li><p><a href="semaphores/ensuring_singletons.htm" class="wikiLink">Ensuring Singletons</a></p></li>
<li><p><a href="semaphores/limiting_the_number_of_users.htm" class="wikiLink">Limiting the Number of Users</a></p></li>
<li><p><a href="semaphores/controlling_login_information.htm" class="wikiLink">Controlling Login Information</a></p></li>
</ul>
 </p>  </body></html>
