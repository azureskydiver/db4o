<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="4" MadCap:lastHeight="795" MadCap:lastWidth="612">
    <head><title>Transparent Persistence Implementation</title>
    </head>
    <body onload="prettyPrint()">
        <h1>Transparent Persistence Implementation</h1>
        <p>The basic logic of Transparent Persistence (TP) is the
following:</p>
        <ul>
            <li>Classes
     available for Transparent Persistence should implement the <MadCap:variable name="Primary.Activatable" />    -interface, which allows to bind an object in the reference cache to the
     current object container.</li>
            <li>Persistent
     objects should be initially explicitly stored to the database: 
     <p MadCap:conditions="Primary.Java,Primary.All languages"> Java: 
     <code>objectContainer.store(myObject)</code></p><p MadCap:conditions="Global.Primary:java" /><p MadCap:conditions="Primary..NET"> .NET: 
     <code>objectContainer.Store(myObject)</code></p><p MadCap:conditions="Global.Primary:net" /> 
     myObject can be an object of any complexity including a linked list or a
     collection (currently you must use db4o-specific implementation for transparent collections: ArrayList4). For complex objects all field objects will be registered with
     the database with this call as well.</li>
            <li>Stored
     objects are bound to the Transparent Persistent framework when they are
     instantiated in the reference cache. This happens after the initial
     store() or when an object is retrieved from the database through one of
     the querying mechanisms.</li>
            <li>Whenever
     a commit() call is issued by the user, Transparent Persistent framework scans for modified
     persistent objects and implicitly calls store() on them before committing
     the transaction. Implicit commit with the mentioned above changes also occurs when the database is closed. </li>
        </ul>
        <p>Note that Transparent Persistence is based on Transparent
Activation, so it is strongly recommended to study the <a href="../../activation_concept/transparent_activation_framework.htm">Transparent Activation</a> documentation first.</p>
        <p>In order to make use of Transparent Persistence you will
need:</p>
        <ol>
            <li>Enable
      Transparent Activation (required for binding object instances to the TP
      framework) on the database level: 
      <p MadCap:conditions="Primary.Java,Primary.All languages"> Java: 
      <code>configuration.common().add(new TransparentPersistenceSupport());</code></p><p MadCap:conditions="Global.Primary:java" /><p MadCap:conditions="Primary..NET"> .NET: 
      <code>configuration.Common.Add(new TransparentPersistenceSupport());</code></p><p MadCap:conditions="Global.Primary:net" /></li>
            <li>Implement
      <MadCap:variable name="Primary.Activatable" /> interface for the persistent classes, either
      manually or through using <a href="../../../implementation_strategies/enhancement_tools.htm">enhancement tools</a>.</li>
            <li>Call
      activate method at the beginning of all class methods that modify class
      fields: 
      <p MadCap:conditions="Primary.Java,Primary.All languages"> Java: 
      <code>activate(ActivationPurpose.WRITE)</code></p><p MadCap:conditions="Global.Primary:java" /><p MadCap:conditions="Primary..NET"> .NET 
      <code>Activate(ActivationPurpose.Write)</code></p><p MadCap:conditions="Global.Primary:net" /></li>
        </ol>
        <p>Note that TransparentPersistenceSupport configuration implicitly adds TransparentActivationSupport. The fact is, that before
modification each field object should be loaded into the reference cache and
that is the job of TA. So TA should be utilized in any case before TP. You can also note that the way TA and TP links into objects is absolutely identical: TP also uses
the same <code>activate</code> call, but in this case its purpose is WRITE.</p>
    </body>
</html>