<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="818" MadCap:lastWidth="626" MadCap:conditions="Primary.Java">
    <head><title>Security Requirements On Java Platform	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Security Requirements On Java Platform</h1>
        <p>Java Security Manager can be used to specify Java application security permissions. It is usually provided by web-browsers and web-servers for applet and servlet execution, however any Java application can make use of a security manager. For example, to use the default security manager you will only need to pass <code>-Djava.security.manager</code> option to JVM command line. Custom security managers can be created and utilized as well (please refer to Java documentation for more information).</p>
        <p>If you are going to use db4o in a Tomcat servlet container you will need to grant some additional permissions in {CATALINA_HOME}/conf/catalina.policy file:</p>
        <p>// The permissions granted to the context <br />WEB-INF/classes directory <br />grant codeBase "file:${catalina.home}/webapps/{your_db4o_application}/WEB-INF/classes/-" <br />{ <br />   permission java.util.PropertyPermission "user.home", "read"; <br />     permission java.util.PropertyPermission "java.fullversion", "read";    <br />permission java.io.FilePermission "path_to_db4o_database_folder", "read";    <br />permission java.io.FilePermission "path_to_db4o_database_file", "read, write"; <br />}; <br /> // The permissions granted to the context WEB-INF/lib directory, containing db4o jar <br />grant codeBase "file:${catalina.home}/webapps/{your_db4o_application}/WEB-INF/lib/-" <br />{    <br />permission java.io.FilePermission "path_to_db4o_database_file", "read, write"; <br />};</p>
        <p>An example  catalina.policy file can be downloaded <a href="security_requirements_on_java_platform/catalina.policy">here</a>. </p>
        <p>In order to avoid db4o DatabaseFileLocked exception you will also need to add some configuration before opening the object container:<br /></p>
        <p><code>Configuration config = Db4o.newConfiguration();<br /></code>
        </p>
        <p><code>config.lockDatabaseFile(false);<br /></code>
        </p>
        <p><code>ObjectContainer container = Db4o.openFile(config, dbfile.getPath());<br /></code>
        </p>
        <p>Having done that, you can package and deploy your application. To enable the security configuration start Tomcat with the following command:<br /></p>
        <p>{CATALINA_HOME}/bin/catalina start -security <br /></p>
    </body>
</html>