<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="570" MadCap:lastWidth="624" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;listResult;MessageRecipient;ObjectServer;openServer;ObjectNotStorableException;s;clientserverJava;ServerConfiguration;clientserverCS;cs;clientserverVB;vb;config;databaseFileName;int;NativeSocketFactory;socketFactory;OpenClient;hostName;IObjectServer;OpenServer;IConfiguration;INativeSocketFactory;IObjectContainer;genkey;SSLcert;storepass;SecureSocketFactory;IMessageSender;setMessageRecipient;SetMessageRecipient;IMessageRecipient;processMessage;ProcessMessage;ByVal;UpdateServer;waitMilliSeconds;releaseSemaphore;ReleaseSemaphore;monitorObject;semaphoreName;switchToFile;fileName;SwitchToFile;switchToMainFile;SwitchToMainFile;switchs;isAlive;IsAlive;replicateDeletions;ReplicateDeletions;GetType;g;ReplicationEvent;VersionNumbers;providerA;objectsChangedSinceLastReplication;ProviderA;ObjectsChangedSinceLastReplication;hbm;ProviderSignature;MySignature;PeerSignature;ReplicationProvider;HibernateReplicationProvider;ReplicationProviders;m;typed_id;pi2763;longPart;ObjectReference;className;typedId;Uuid;uuid;drs_providers;is_my_sig;t';f';drs_history;provider_id;PK;drs_objects;class_name;varchar;one_to_one;ReplicationConfigurator;SessionFactory;sessionFactory;buildSessionFactory;openSession;beginTransaction;createCriteria;a1;b1;c1;b2;uncomment;antlr;asm;attrs;cglib;ehcache;jta;log4j">
    <head><title>Running DRS	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Running DRS</h1>
        <p>This section describes how to configure and run dRS.It is crucial to follow
the sequence of actions so that dRS can detect new/changed objects and
replicate them during replication sessions. </p><code>// Read or create the Configuration as usual<br /></code><code>Configuration cfg = new Configuration().<br />configure("your-hibernate.cfg.xml");</code><code><br />// Let the ReplicationConfigurator adjust <br />// the configuration</code><code><br />ReplicationConfigurator.configure(cfg);</code><code><br />// Create the SessionFactory as usual<br /></code><code>SessionFactory sessionFactory = cfg.buildSessionFactory();</code><code><br />// Create the Session as usual<br /></code><code>Session session = sessionFactory.openSession();</code><code><br />// Let the ReplicationConfigurator install the <br />// listeners to the Session</code><code><br />ReplicationConfigurator.install(session, cfg);</code><code><br />//Update objects as usual<br /></code><code>Transaction tx = session.beginTransaction();<br /></code><code>Pilot john = (Pilot) session.createCriteria(Pilot.class)</code>
        <br />  Some precautions to take into consideration: <ol><li>Do not open more than one dRS replication session against the same RDBMS concurrently. Otherwise data corruption will occur.</li><li>When dRS is in progress, do not modify the data in the RDBMS by
using SQL or Hibernate. Otherwise data corruption will occur.</li></ol></body>
</html>