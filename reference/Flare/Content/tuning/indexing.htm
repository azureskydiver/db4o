<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Indexing	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
     
       
        <h1>Indexing</h1>


<p>db4o allows to index fields to provide maximum querying performance. To request an index to be created, you would issue the following API method call in your global <a href="configuration.htm"  >db4o configuration method</a> before you open an ObjectContainer/ObjectServer:</p>

<p>// assuming</p>

<p><code>class Foo{      String bar; }</code></p>

<p MadCap:conditions="Primary.Java">

<p>Java: </p>
<p><code>configuration.objectClass(Foo.class).objectField("bar").indexed(true); </code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET">

<p>.NET: </p>
<p><code>configuration.ObjectClass(typeof(Foo)).ObjectField("bar").Indexed(true); </code></p>

</p><p MadCap:conditions="Primary:net" />

<p>If the configuration is set in this way, an index on the Foo#bar field will be created (if not present already) the next time you open an ObjectContainer/ObjectServer and you use the Foo class the first time in your applcation. </p>

<p>Contrary to all other <a href="configuration.htm"  >configuration calls</a> indexes - once created - will remain in a database even if the index configuration call is not issued before opening an ObjectContainer/ObjectServer. </p>

<p>To drop an index you would also issue a configuration call in your db4o configuration method:</p>

<p MadCap:conditions="Primary.Java">

<p>Java: </p>
<p><code>configuration.objectClass(Foo.class).objectField("bar").indexed(false);</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET">

<p>.NET: </p>
<p><code>configuration.ObjectClass(typeof(Foo)).ObjectField("bar").Indexed(false);</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Actually dropping the index will take place the next time the respective class is used.db4o will tell you when it creates and drops indexes, if you choose a message level of 1 or higher:</p>

<p MadCap:conditions="Primary.Java">

<p>Java: </p>
<p><code>configuration.messageLevel(1);</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET">

<p>.NET: </p>
<p><code>configuration.MessageLevel(1);</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>For creating and dropping indexes on large amounts of objects there are two possible strategies:</p>

<ol>
<li>Import all objects with indexing off, configure the index and reopen the ObjectContainer/ObjectServer.</li>

<li>Import all objects with indexing turned on and commit regularly for a fixed amount of objects (~10,000).</li>
</ol>

<ol>
<li>will be faster.</li>

<li>will keep memory consumption lower.</li>
</ol>

<p>For more information see <a href="performance_hints/enable_field_indexes.htm"  >Enable Field Indexes</a> chapter.</p> 
     
    
  </body></html>
