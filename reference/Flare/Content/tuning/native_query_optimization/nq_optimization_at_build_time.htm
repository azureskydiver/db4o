<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="7" MadCap:lastHeight="2094" MadCap:lastWidth="1017" MadCap:conditions="Primary.Java">
    <head><title>NQ Optimization At Build Time	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
         
             
                <h1>NQ Optimization At Build Time</h1>
                <p>Note: Instrumented optimized classes will work with JDK1.1, but the
optimization process itself requires at least JDK 1.3.</p>
                <p>In the <a href="nq_optimization_at_load_time.htm"  >previous topic</a> we discussed
how NQ optimization can be enabled on classes while they are loaded. In this
topic we will look at even more convenient and performant way of enhancing
classes to optimize NQ: during application build time. </p>
                <p>For our example we will take the same classes as in the <a href="nq_optimization_at_load_time.htm"  >previous
example</a>, with the exception of NQEnhancedStarter class, which won't be needed
for build-time enhancement. Its functionality will be fulfilled be the build
script. For this example we will create an ant script, which should be run
after the classes (or jar) is built.  </p>
                <p>For simplistic example our build script should:</p>
                <ul>
                    <li>Use classes, created by
     normal build script</li>
                    <li>Create a new enhanced-bin
     folder for the enhanced classes</li>
                    <li>Use NQAntClassEditFactory
     to create TranslateNQToSODAEdit (can be based on class filter)</li>
                    <li>Call
     Db4oFileEnhancerAntTask#execute, which will call
     Db4oClassInstrumenter#enhance passing the previously created TranslateNQToSODAEdit
     to optimize NQ in the supplied classes.</li>
                </ul>
                <p>This
can be done with the following script:</p>
                <MadCap:snippetBlock src="../../Resources/Snippets/NQ Optimization At Build Time/Build.Xml/Build.Xml.flsnp" />
                <p>In
order to test this script:</p>
                <ul>
                    <li>Create a new project, consisting
     of NQExample and Pilot classes from the <a href="nq_optimization_at_load_time.htm"  >previous
     example</a></li>
                    <li>Add lib folder to the
     project root and copy the following jars from db4o distribution:</li>
                    <ul>
                        <li>bloat-1.0.jar</li>
                        <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-classedit.jar</li>
                        <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-java5.jar</li>
                        <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-nqopt.jar</li>
                        <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-tools.jar 
      (Note, that the described functionality is only valid for db4o releases
      after 7.0)</li>
                    </ul>
                    <li>Build the project with your
     IDE or any other build tools (it is assumed that the built class files go
     to the project's bin directory)</li>
                    <li>Copy build.xml into the
     root project folder and execute it</li>
                </ul>
                <p>Successfully
executed build script will produce an instrumented copy of the project classes
in enhanced-bin folder. You can check the results by running the following
batch file from bin and enhanced-bin folders:</p>
                <p><code>set
CLASSPATH=.;{$PROJECT_ROOT}\lib\db4o-<MadCap:variable name="Primary.CurrentVersion" />-java5.jar</code>
                </p>
                <p><code>java
com.db4odoc.nqoptimize.NQExample</code>
                </p>
                <p>Of
course, the presented example is very simple and limited in functionality. In
fact you can do a lot more things using the build script:</p>
                <p>o      
Add TA instrumentation in the same enhancer task</p>
                <p>o      
Use ClassFilter to select classes for
enhancement</p>
                <p>o      
Use regex to select classes for enhancement</p>
                <p>o      
Use several source folders</p>
                <p>o      
Use jar as the source for enhancement</p>
                <p>An example of the above features can be found in our <a href="http://developer.db4o.com/ProjectSpaces/view.aspx/Educational_Projects/TA_And_NQ_Enhancement_Example">Project
Spaces</a>.</p>
             
         
    </body>
</html>