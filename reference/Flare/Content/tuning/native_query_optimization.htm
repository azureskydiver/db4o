<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="9" MadCap:lastHeight="2272" MadCap:lastWidth="1017">
    <head><title>Native Query Optimization	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
                <h1>Native Query Optimization</h1>
                <p>Native Queries will run out of the box in any environment. If optimization is turned on (default) Native Queries will be converted to <a href="../object_lifecycle/querying/soda_query.htm"  >SODA</a> where this is possible, allowing db4o to use indexes and optimized internal comparison algorithms.Otherwise Native Query may be executed by instantiating all objects, using <a href="../object_lifecycle/querying/soda_evaluations.htm"  >SODA Evaluations</a>. Naturally performance will not be as good in this case.</p><a name="Optimization Theory"></a>
                <H2>Optimization Theory </H2>
                <p>For Native Query Java bytecode and .NET IL code are analyzed to create an AST-like expression tree. Then the flow graph of the expression tree is analyzed and converted to a SODA query graph.</p>
                <p>For example:</p>
                <p MadCap:conditions="Primary.Java">
                    <p>Java: </p>
                    <p><code>List&lt;Pilot&gt; pilots = container.query(new Predicate&lt;Pilot&gt;() {</code>
                    </p>
                    <p><code>                                                public boolean match(Pilot pilot) {</code>
                    </p>
                    <p><code>                                                            return pilot.getName().equals("Michael Schumacher")</code>
                    </p>
                    <p><code>&amp;&amp; pilot.getPoints() == 100;</code>
                    </p>
                    <p><code>                                                }</code>
                    </p>
                    <p><code>                                    });</code>
                    </p>
                </p>
                <p MadCap:conditions="Primary:java,Primary.All languages" />
                <p MadCap:conditions="Primary..NET">
                    <p>.NET: </p>
                    <p><code>IList&lt;Pilot&gt; pilots = container.Query&lt;Pilot&gt;(delegate(Pilot pilot) {</code>
                    </p>
                    <p><code>                                                            return pilot.Name.equals("Michael Schumacher")</code>
                    </p>
                    <p><code>&amp;&amp; pilot.Points == 100;</code>
                    </p>
                    <p><code>                                    });</code>
                    </p>
                </p>
                <p MadCap:conditions="Primary:net" />
                <p>First of all the following code will be extracted:</p>
                <p>query#constrain(Pilot)</p>
                <p>Then a more complex analysis will be run to convert the contents of the #match method into a SODA-understandable syntax. On a simple example it is easy to see what will happen:</p>
                <p MadCap:conditions="Primary.Java">
                    <p>Java: </p>
                    <p><code>return pilot.getName().equals("Michael Schumacher") &amp;&amp; pilot.getPoints() == 100;</code>
                    </p>
                </p>
                <p MadCap:conditions="Primary:java,Primary.All languages" />
                <p MadCap:conditions="Primary..NET">
                    <p>.NET:</p>
                    <p><code>return pilot.Name.equals("Michael Schumacher") &amp;&amp; pilot.Points == 100;</code>
                    </p>
                </p>
                <p MadCap:conditions="Primary:net" />
                <p>easily converts into:</p>
                <p><code>CANDIDATE.name == "Michael Schumacher"</code>
                </p>
                <p><code>CANDIDATE.points == 100</code>
                </p>
                <p MadCap:conditions="Primary.Java"><a name="NQ Optimization For Java"></a>
                    <H2>NQ Optimization For Java</H2>
                    <p>NQ optimisation on Java requires db4onqopt.jar and bloat.jar to be present in the CLASSPATH.The Native Query optimizer is still under development to eventually "understand" all Java constructs. Current optimization supports the following constructs well:</p>
                    <UL>
                        <LI>compile-time constants</LI>
                        <LI>simple member access</LI>
                        <LI>primitive comparisons</LI>
                        <LI>#equals() on primitive wrappers and Strings</LI>
                        <LI>#contains()/#startsWith()/#endsWith() for Strings</LI>
                        <LI>arithmetic expressions</LI>
                        <LI>boolean expressions</LI>
                        <LI>static field access</LI>
                        <LI>array access for static/predicate fields</LI>
                        <LI>arbitrary method calls on static/predicate fields (without candidate based params)</LI>
                        <LI>candidate methods composed of the above</LI>
                        <LI>chained combinations of the above</LI>
                    </UL>
                    <p>This list will constantly grow with the latest versions of db4o.</p>
                    <p>Note that the current implementation doesn't support polymorphism and multiline methods yet.</p>
                    <p>db4o for Java supplies three different possibilities to run optimized native queries, optimization at</p>
                    <OL>
                        <LI><a href="native_query_optimization/optimization_at_query_execution_time.htm"  >query execution time</a>
                        </LI>
                        <LI><a href="../object_lifecycle/activation/transparent_activation_framework/ta_enhanced_example/ta_enhancement_at_build_time.htm"  >deployment time</a>
                        </LI>
                        <LI><a href="../object_lifecycle/activation/transparent_activation_framework/ta_enhanced_example/ta_enhancement_at_load_time.htm"  >class loading time</a>
                        </LI>
                    </OL>
                </p>
                <p MadCap:conditions="Primary:java,Primary.All languages" />
                <p MadCap:conditions="Primary..NET"><a name="NQ Optimization for .NET"></a>
                    <H2>NQ Optimization for .NET</H2>
                    <p>Native Query optimizer for .NET requires the following libraries to work:</p>
                    <UL><LI>Db4objects.Db4o.Instrumentation.dll</LI>
                        <LI>
                            Db4objects.Db4o.NativeQueries.dll                        </LI>
                        <LI>
                            Mono.Cecil.dll                        </LI>
                        <LI>
                            Cecil.FlowAnalysis.dll                        </LI>
                    </UL>
                    These assemblies must be available in your project for successful NQ optimization.                    <p>The Native Query optimizer is still under development to eventually "understand" all valid C# constructs. Current optimization supports the following constructs well:</p>
                    <UL>
                        <LI>compile-time constants</LI>
                        <LI>simple member access</LI>
                        <LI>primitive comparisons</LI>
                        <LI>equality operator</LI>
                        <LI>#Contains()/#StartsWith()/#EndsWith() for Strings</LI>
                        <LI>boolean expressions</LI>
                        <LI>arbitrary method calls (including property accessors) on predicate fields (without any arguments)</LI>
                        <LI>candidate methods composed of the above</LI>
                        <LI>chained combinations of the above</LI>
                    </UL>
                    <p>This list will constantly grow with the latest versions of db4o.</p>
                    <p>Note that the current implementation doesn't support polymorphism yet.</p>
                    <p>The specifics of Compact Framework platform are explained in <a href="native_query_optimization/nq_optimization_on_cf2.0.htm"  >NQ Optimization On CF2.0</a>. </p>
                    <p>An alternative optimization practice can be found in <a href="native_query_optimization/build-time_optimization_for_.net.htm"  >Build-time Optimization For .NET</a> article.</p>
                </p>
                <p MadCap:conditions="Primary:net" />
                <p>For more information on NQ optimization see <a href="native_query_optimization/monitoring_optimization.htm"  >Monitoring Optimization</a>.</p>
    </body>
</html>