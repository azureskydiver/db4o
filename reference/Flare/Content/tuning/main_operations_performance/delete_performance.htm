<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Delete Performance	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
     
       
        <h1>Delete Performance</h1><p>Delete operation only consists of marking an object as
deleted in the database file and usually is very fast. For the clarity in this
case we do not include time necessary to locate the object in the database. The
considerations for the best delete performance would be the same as the
considerations to make db4o database generally faster and would include:</p>

<ul><li>fast storage location (hard drive or RAM)</li><li>enough operational memory</li></ul>



<p>Let's consider some of the application setups and their
influence on delete performance. In order to distinguish delete time from query
time, all the deletions will be done by object id.</p>



<p> More Reading:<ul>
<li><p><a href="delete_performance/commit_frequency.htm"  >Commit Frequency</a></p></li>
<li><p><a href="delete_performance/complexity_of_objects.htm"  >Complexity Of Objects</a></p></li>
<li><p><a href="delete_performance/storage_characteristics.htm"  >Storage Characteristics</a></p></li>
<li><p><a href="delete_performance/client-server.htm"  >Client-Server</a></p></li>
<li><p><a href="delete_performance/cascade_on_delete.htm"  >Cascade On Delete</a></p></li>
</ul> 
 </p> 
     
    
  </body></html>
