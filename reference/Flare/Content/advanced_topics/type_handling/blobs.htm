<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="605" MadCap:lastWidth="522">
    <head>
    </head>
    <body>
        <h1>Blobs</h1>
        <P>In some cases user has to deal with large binary objects (BLOBs) such as images, video, music, which should be stored in a structured way, and retrieved/queried easily. There are several challenges associated with this task:</P>
        <UL>
            <LI>Storage location.</LI>
            <LI>Loading into Memory.</LI>
            <LI>Querying interface.</LI>
            <LI>Objects' modification.</LI>
            <LI>Information backup.</LI>
            <LI>Client/Server processing.</LI>
        </UL>
        <P>db4o provides you with a flexibility of using 2 different solutions for this case:</P>
        <OL>
            <LI>The db4o blob-type.</LI>
            <LI>Byte[] arrays stored inside the database file</LI>
        </OL>
        <P>These two solutions' main features in comparison are represented below:</P>
        <H2>Blob</H2>
        <OL>
            <LI>Every Blob gets it's own file.</LI>
            <LI>Special code is necessary to store and load .</LI>
            <LI>No concerns about activation depth. </LI>
        </OL>
        <H2>byte[] array</H2>
        <OL>
            <LI>Data in the same file </LI>
            <LI>Transparent handling without special concerns. </LI>
            <LI>Control over activation depth may be necessary</LI>
        </OL>
        <P>Storing data in a byte[] array works just as storing usual objects, but this method is not always applicable/desirable. First of all, the size of the db4o file can grow over the limit (256 GB) due to the BLOB data added. Secondly, object activation and client/server transferring logic can be an additional load for your application. </P>
    </body>
</html>