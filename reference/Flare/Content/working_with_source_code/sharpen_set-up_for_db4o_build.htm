<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Sharpen Set-Up For Db4o Build	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Sharpen Set-Up For Db4o Build</h1><div id="TOC"><div id="TOCinner"><span class="TOCtitle">Contents</span><div class="TOCcontents"><ul><li><a href ="#Conversion Scope">Conversion Scope</a></li><li><a href ="#Naming">Naming</a></li></ul></li></ul></div></div></div>


<p>Sharpen is used to translate Java version of db4o to c#. The
basic process is defined in <b>sharpen-all</b>
target of <b>db4obuild\build-dotnet.xml</b>.
In the primitive case defining sharpen task and applying it to java source
should be enough:</p>

<MadCap:snippetBlock src="../Resources/Snippets/Sharpen Set-Up For Db4o Build/Sharpen.Xml/Sharpen.Xml.flsnp" />
<p>However, the complexity of the translation requires some
fine tuning. Let's look at the options and annotations used to make db4o
conversion working and produce a reasonable result.</p><a name="Conversion Scope"></a><h2>Conversion Scope</h2>

<p>Though Sharpen provides rather sophisticated framework, some
of the java language structures cannot be translated to c# without losing some
of the readability and nativeness of the c# code. One of the examples is IO
API. In these cases a full c# class is re-written manually. These classes are
excluded from the conversion by using @sharpen.ignore annotation. However this
solves only half of the problem, because the manually-translated classes still
should be placed correctly in the corresponding namespaces. This is achieved by
creating a c# project structure containing only manually translated classes.
The result of the sharpening is then copied into this structure, resulting in a
full and valid c# project.</p><a name="Naming"></a><h2>Naming</h2>

<p>Naming conventions differ for java and c#, but db4o code
should look native in both environments. There are several options that help to
achieve this:</p>

<p><code>-pascalCase+</code> - enforces Pascal case for identifies and
namespaces</p>

<p><code>-nativeTypeSystem</code> - use .NET typesystem</p>

<p><code>-nativeInterfaces</code> - add "I" in front of the interface name</p>

<p>Sharpen options also include different re-namings to make c#
names look more natural:</p>

<p><code>-typeMapping com.db4o.Db4o Db4objects.Db4o.Db4oFactory</code></p>

<p><code>-namespaceMapping com.db4o Db4objects.Db4o</code></p>

<p>and others.</p>

<p>c# supports a concept of type properties whereas Java getter
and setter methods are used. To convert those properly propertyMapping option
is defined:</p>

<p><code>-propertyMapping com.db4o.foundation.Iterator4.current
Current</code></p><p>For more information on these and other options see <a href="../sharpen/sharpen_command-line_arguments.html" class="wikiLink">Sharpen Command-Line Arguments</a>.</p></div>
    </div>
    
  <p>Download example code:</p>        <p></p></body></html>