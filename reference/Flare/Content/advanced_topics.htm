<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="422" MadCap:lastWidth="635">
    <head>
    </head>
    <body>
        <h1>Advanced Topics</h1>
        <p>This topic is about advanced features of db4o. </p>
        <p>If you want to have multiple unit of work or multiple transaction in embedded mode you can take a look at session containers. <MadCap:xref href="advanced_topics/session_containers.htm" target="" title="" alt="">See "Session Containers"</MadCap:xref></p>
        <p>db4o support unique constrains on fields. <MadCap:xref href="advanced_topics/unique_constraints.htm" target="" title="" alt="">See "Unique Constraints"</MadCap:xref></p>
        <p>You can also do backups of your database at runtime. <MadCap:xref href="advanced_topics/backup.htm" target="" title="" alt="">See "Backup"</MadCap:xref></p>
        <p>Implementing the interfaces for transparent activation/persistence is tedious. The enhancement tools can do that job for you. And can also optimize native queries at build time. <MadCap:xref href="advanced_topics/enhancement_tools.htm" target="" title="" alt="">See "Enhancement Tools"</MadCap:xref> <![CDATA[ ]]></p>
        <p>The database file can fragment over time. In order to reclaim defragmentet space in the database you need to run the defragmentation. <MadCap:xref href="advanced_topics/defragment.htm" target="" title="" alt="">See "Defragment"</MadCap:xref></p>
        <p>Callback allow you to perform additional logic for different database operations. <MadCap:xref href="advanced_topics/callbacks.htm" target="" title="" alt="">See "Callbacks"</MadCap:xref></p>
        <p>As some point in time you will change your data model. Then you probably need to also refactor you're stored data in the database. <MadCap:xref href="advanced_topics/refactoring_and_schema_evolution.htm" target="" title="" alt="">See "Refactoring and Schema Evolution"</MadCap:xref></p>
        <p>You can access the internal ids or generate UUIDs for objects. <MadCap:xref href="advanced_topics/ids_and_uuids.htm" target="" title="" alt="">See "IDs and UUIDs"</MadCap:xref></p>
        <p>It's also possible to access the meta information of all stored types in the database. <MadCap:xref href="advanced_topics/db4o_meta-information.htm" target="" title="" alt="">See "db4o Meta-Information"</MadCap:xref>. And you can access system information about the database.</p>
        <p>db4o tried hard to make persisting objects as easy as possible. However storing a object efficient and correctly is quite tricky. Read about db4o's type handling for more information. <MadCap:xref href="advanced_topics/type_handling.htm" target="" title="" alt="">See "Type Handling"</MadCap:xref>&#160;Furthermore db4o uses an abstraction layer to encapsulate <MadCap:variable name="Primary.Plattform" />-reflection. This allows you do change how reflection behaves on your objects. <MadCap:xref href="advanced_topics/db4o_reflection_api.htm" target="" title="" alt="">See "db4o Reflection API"</MadCap:xref></p>
        <p>Unfortunately failure happen. db4o communicates failures with exceptions. <MadCap:xref href="advanced_topics/exceptions.htm" target="" title="" alt="">See "Exception-Handling"</MadCap:xref></p>
    </body>
</html>