<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="286" MadCap:lastWidth="463" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType">
    <head><title>Native Query Optimization	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Native Query Optimization</h1>
        <p>Though Native Query API discussed in the
<a href="native_query_implementation.htm">previous paragraph</a> is simple and
straightforward, the real challenge is to provide a performant solution.</p>
        <p>If the NQ code is run as is, it requires instantiation of
all the members of a class. This is very slow in most cases. In order to
improve the performance a special optimizer is used by db4o. The idea of the
optimization is to analyze the code in a Native Query and provide an
alternative in a database query language. This can be done in runtime or build
time.</p>
        <p>Obviously, optimization is not possible in cases, when a
native query does not have a database query alternative. To reveal those cases
<a href="../../tuning/diagnostics/nativequerynotoptimized.htm">db4o Diagnostic</a> system
should be used.</p>
        <p>For more information see
<a href="../../tuning/native_query_optimization.htm">Native Query Optimization</a>.</p>
    </body>
</html>