<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="807" MadCap:lastWidth="624" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID">
    <head><title>Optimistic Locking	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Optimistic Locking</h1>
        <p>In the real world there are many systems where collisions
are not very frequent. For example if 2 users are processing bank transfers
they may work with account objects but the accounts are different, so that they
do not collide.</p>For the situation described above, optimistic locking
will be a reasonable solution. When optimistic locking is used, it is accepted
that collisions may occur, but instead of trying to prevent them, the system
tries to detect and resolve them. Optimistic locking process flow is shown on
the figure below. <img src="Optimistic_Locking/flow.jpg" /><ol><li>Data
     is retrieved with a read lock. The lock is released immediately after the
     retrieval. </li><li>Data
     modifications are done on unlocked data.</li><li>Before
     committing the modifications, the system tries to detect a collision. If a
     collision is detected, it should be handled according to the system rules
     (for example: the collision information can be logged or displayed to the
     user, transaction modifications can be merged, rejected or accepted).</li><li>The
     data is committed to the database or rolled back. The lock is released.</li></ol><p> There are different ways to detect a collision.
For example, you can mark the retrieved objects with a unique identifier,
timestamp or username. Alternatively, you can store a copy of the originally
retrieved object and compare it to the object from the database before trying
to update.</p></body>
</html>