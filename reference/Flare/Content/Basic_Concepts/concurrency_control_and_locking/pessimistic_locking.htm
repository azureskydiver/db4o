<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="262" MadCap:lastWidth="463" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID">
    <head><title>Pessimistic Locking	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Pessimistic Locking</h1>
        <p>In pessimistic locking
approach an entity is locked for the entire time the entity is in application
memory (often in the form of an object). A read lock indicates that the object
can be read but not modified or deleted by the other transactions. A write lock
indicates that the object is locked exclusively and only the current
transaction can read, modify or delete the object. </p>
        <p><b>Advantage</b>: pessimistic
locking is easy to implement and guarantees that your changes to the database
are made consistently and safely. </p>
        <p><b>Disadvantage</b>: pessimistic
locking is not scalable; in systems with many users or long-running
transactions, the waiting time for a lock to be released can be too long.</p>
    </body>
</html>