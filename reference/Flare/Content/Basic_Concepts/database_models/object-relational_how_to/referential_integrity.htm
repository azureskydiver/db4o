<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="267" MadCap:lastWidth="624" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;objectContainer;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment">
    <head><title>Referential Integrity	<link href="../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Referential Integrity</h1>
        <p>Referential integrity (RI) is an important feature of RDBMS.
It helps to protect data from misuse and corruption.  However, in the modern world of multi-tier and distributed technologies
it becomes questionable if referential integrity should be realized on a
database level or is it a responsibility of a business layer. The answer to
this question depends on the system design. 
Usually database RI makes lots of sense in a data-centric application
with one main database. More complex, distributed in space and time referential
constraints can be better implemented within a business object framework.</p>db4o database does not provide full referential
integrity support, rather it gives a user possibilities to implement RI on the
application level. For an example of a referential integrity solution, see
<a href="../../../implementation_strategies/callbacks/possible_usecases/referential_integrity.htm">Referential Integrity</a>.


 
     
    
  </body>
</html>