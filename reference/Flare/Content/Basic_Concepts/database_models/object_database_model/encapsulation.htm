<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="343" MadCap:lastWidth="624" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;objectContainer;getID;GetID;getPilot">
    <head><title>Encapsulation	<link href="../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Encapsulation</h1>
        <p>Encapsulation is an object model concept, which allows to
hide specific behavior or processing abilities within object instances defined
by a class. Method definitions within a class are an integral part of
encapsulation, which allows to store data and code together. </p>
        <p>For example:</p>
        <p>
            <img src="Encaps.jpg" />
        </p>
        <p>getPilot method can be "attached to" a Car object or
encapsulated. Alternatively, getPilot method can be stored in the application
or a separate library and distributed with the object database. However,
encapsulation approach has an important advantage: method code cannot be lost
or outdated as in the case of an application/library storage. Object system
recognizes which methods belong to which data. The process of the correct
method linking to the object is called <i><b>dispatching</b></i>.</p>
    </body>
</html>