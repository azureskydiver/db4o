<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="810" MadCap:lastWidth="624" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment">
    <head><title>Native Query Concepts	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Native Query Concepts</h1>
        <p>Database query is a language used to communicate with the
database. For a long time databases stood the central and commanding place in
software products: the applications were literally written to support the needs
of a main central database. However, in the modern high-speed world of
distribute computing the transfer and modification of the information plays
increasingly important role and the databases more and more often take a place
of a temporary storage or a point of exchange. </p>
        <p>This evolutionary change results in some practical
modifications: more attention is paid to the business logic and tools that are
used for its development, language structures are automatically produced and
checked by development environments and string-based logic is getting outdated
and not enough efficient. Database query language is expected to follow the
features of an object-oriented language: type-safe, easy to refactor and test.
String-based languages like SQL, OQL, JDOQL do not meet these requirements. To
fill this gap and provide developers with sufficient database query tools a new
concept was developed by W.Cook and C. Rosenberger which was given a name <a href="http://www.odbms.org/download/010.01 Cook Native Queries for Persistent Objects August 2005.pdf">Native
Queries</a>. </p>
        <p>In the following paragraphs, we will review the concepts of
Native Queries (NQ). We will use Pilot class for all examples suggested
further:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <MadCap:snippetBlock src="../Resources/Snippets/Native Query Concepts/Pilot.java/Pilot.java.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p>
            <p MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages">
                <MadCap:snippetBlock src="../Resources/Snippets/Native Query Concepts/Pilot.cs/Pilot.cs.flsnp" />
            </p>
            <p MadCap:conditions="Primary:cs" />
        </p>
        <p> More Reading:<ul><li><p><a href="native_query_concepts/problems_of_string_based_query_languages.htm">Problems Of String Based Query Languages</a></p></li><li><p><a href="native_query_concepts/native_query_characteristics.htm">Native Query Characteristics</a></p></li><li><p><a href="native_query_concepts/native_query_implementation.htm">Native Query Implementation</a></p></li><li><p><a href="native_query_concepts/native_query_optimization.htm">Native Query Optimization</a></p></li><li><p><a href="native_query_concepts/code_inside.htm">Code Inside</a></p></li><li><p><a href="native_query_concepts/sorting_results.htm">Sorting Results</a></p></li></ul></p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary..NET"><a href="native_query_concepts/nqconceptscs.zip">.NET </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="native_query_concepts/nqconceptsjava.zip">Java</a>
            </MadCap:conditionalText>
        </p>
        <p>
        </p>
    </body>
</html>