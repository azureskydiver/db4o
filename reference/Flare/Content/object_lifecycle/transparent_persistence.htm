<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Transparent Persistence	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Transparent Persistence</h1>

<p>One of db4o goals is to make database transparent to the
application logic. Would not it be nice after an initial registering of an
object with a database with a single store() method to leave the database to
manage all the future object modification? This idea went a long way from
initial vague thoughts to a final implementation in db4o version 7.1 and was
named Transparent Persistence. Let's look at the implementation in a more
detail.</p><p><div class="childTopicList">More Reading:<ul>
<li><p><a href="transparent_persistence/transparent_persistence_implementation.html" class="wikiLink">Transparent Persistence Implementation</a></p></li>
<li><p><a href="transparent_persistence/tp_enhanced_example.html" class="wikiLink">TP Enhanced Example</a></p></li>
<li><p><a href="transparent_persistence/detailed_example.html" class="wikiLink">Detailed Example</a></p></li>
<li><p><a href="transparent_persistence/collection_example.html" class="wikiLink">Collection Example</a></p></li>
</ul></div>
 </p><ul><li><a href="activation/transparent_activation_framework/transparent_persistence_for_java_collections.html" class="wikiLink">Transparent Persistence For Java Collections</a>  </li></ul></div>
    </div>
    
  </body></html>
