<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Update Depth	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
     
       
        <h1>Update Depth</h1> 

<p>Update depth term is used to determine a number of levels of member objects down the hierarchy, which will be updated automatically, when the top-level object is updated. Understanding of update depth and its performance impact is especially important for working with deep object graphs and collections. </p>
<p>The default update depth value is 0, which means that objectContainer#set(object) method will only update the object passed as a parameter and any changes to its member objects will be lost.</p>
<p>Update depth can be changed globally or for a specific class.</p>
<p>Global update depth settings:</p>
<p MadCap:conditions="Primary.Java">
<p>Java: </p>
<p><code>configuration.updateDepth(depth)</code></p>
</p><p MadCap:conditions="Primary:java" />
<p MadCap:conditions="Primary..NET,Primary.c#">
<p>c#: </p>
<p><code>configuration.UpdateDepth(depth)</code></p>
</p><p MadCap:conditions="Primary:cs" />
<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<p>VB: </p>
<p><code>configuration.UpdateDepth(depth)</code></p>
</p><p MadCap:conditions="Primary:vb" />
<p>Class-specific update settings:</p>
<p MadCap:conditions="Primary.Java">
<p>Java: </p>
<p><code>configuration.objectClass(ListObject.class).cascadeOnUpdate(flag);</code></p>
<p><code>configuration.objectClass(ListObject.class).updateDepth(depth);</code></p>
</p><p MadCap:conditions="Primary:java" />
<p MadCap:conditions="Primary..NET,Primary.c#">
<p>?#: </p>
<p><code>configuration.ObjectClass(typeof(ListObject)).CascadeOnUpdate(flag);</code></p>
<p><code>configuration.ObjectClass(typeof(ListObject)).UpdateDepth(depth);</code></p>
</p><p MadCap:conditions="Primary:cs" />
<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<p>VB: </p>
<p><code>configuration.ObjectClass(GetType(ListObject)).CascadeOnUpdate(flag);</code></p>
<p><code>configuration.ObjectClass(GetType(ListObject)).UpdateDepth(depth);</code></p>
</p><p MadCap:conditions="Primary:vb" />
<p>Here depth parameter specifies the number of member object levels down the hierarchy, which will be updated when the top-level object is saved.</p>
<p>Flag parameter determines whether update operation should be cascaded to all the member objects.</p>
<p>Note, that the recommended setting for the update depth is 0, i.e. the default one. Setting update depth to a higher value inevitably leads to performance downgrade. Storing the required amount of levels can instead be achieved by using a special <code>store</code> method: </p><p MadCap:conditions="Primary.Java">
<p>Java: </p>
<p><code>objectContainer.ext().store(object, updateDepth);</code></p></p><p MadCap:conditions="Primary:java" />
<p MadCap:conditions="Primary..NET,Primary.c#">
<p>ï¿½?#: </p>
<p><code>objectContainer.Ext().Store(object, updateDepth);</code></p></p><p MadCap:conditions="Primary:cs" />
<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<p>VB: </p>
<p><code>objectContainer.Ext().Store(object, updateDepth)</code></p></p><p MadCap:conditions="Primary:vb" />
<p>Further reading:</p>
<p><a href="working_with_structured_objects/updating_structured_objects.htm"  >Update Depth for Structured Objects</a></p>
<p><a href="update_depth/collections_update_depth.htm"  >Collections Update Depth</a></p>
<p>  </p> 
     
    
  </body></html>
