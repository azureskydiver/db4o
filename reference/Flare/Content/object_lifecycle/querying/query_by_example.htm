<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="7" MadCap:lastHeight="839" MadCap:lastWidth="1104">
    <head><title>Query By Example	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <div class="CommonContent">
            <div class="CommonContentArea">
                <h1>Query By Example</h1>
                <p>When using <i>Query By Example</i>(QBE) you provide db4o with a template 
object. db4o will return all of the objects which match all non-default field 
values. This is done via reflecting all of the fields and building a query 
expression where all non-default-value fields are combined with AND expressions. 
Here's a simple example:</p>
                <p MadCap:conditions="Primary.Java">
                    <MadCap:snippetBlock src="../../Resources/Snippets/Query By Example/PersistentExample.java/retrievePilotByName.flsnp" />
                </p>
                <p MadCap:conditions="Primary:java" />
                <p MadCap:conditions="Primary..NET,Primary.c#">
                    <MadCap:snippetBlock src="../../Resources/Snippets/Query By Example/PersistentExample.cs/RetrievePilotByName.flsnp" />
                </p>
                <p MadCap:conditions="Primary:cs" />
                <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                    <MadCap:snippetBlock src="../../Resources/Snippets/Query By Example/PersistentExample.vb/RetrievePilotByName.flsnp" />
                </p>
                <p MadCap:conditions="Primary:vb" />
                <p>Querying 
this way has some obvious limitations:</p>
                <ul>
                    <li>db4o must reflect all members of 
your example object.</li>
                    <li>You cannot perform advanced query expressions. (AND, 
OR, NOT, etc.)</li>
                    <li>You cannot constrain on values like 0 (integers), "" (empty 
strings), or nulls (reference types) because they would be interpreted as 
unconstrained.</li>
                    <li>You need to be able to create <a href="query_by_example/qbe_limitations.htm" class="wikiLink">objects without initialized 
fields</a>. That means you can not initialize fields where they are declared.  </li>
                    <li>You need a <a href="query_by_example/qbe_limitations.htm" class="wikiLink">constructor</a> to create objects 
without initialized fields.</li>
                </ul>
                <p>For more information see <a href="query_by_example/qbe_limitations.htm" class="wikiLink">QBE Limitations</a>. To get around all of these constraints, db4o 
provides the <a href="native_queries.htm" class="wikiLink">Native Query</a> (NQ) system.</p>
            </div>
        </div>
        <p>
        </p>
    </body>
</html>