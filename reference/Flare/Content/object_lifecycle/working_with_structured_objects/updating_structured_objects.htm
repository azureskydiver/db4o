<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Updating Structured Objects	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Updating Structured Objects</h1><div id="TOC"><div id="TOCinner"><span class="TOCtitle">Contents</span><div class="TOCcontents"><ul><li><a href ="#Update Depth">Update Depth</a></li></ul></div></div></div>

<p>To update structured objects in db4o, you simply call set() on them again.</p>

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.java/updateCar.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.cs/UpdateCar.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.vb/UpdateCar.flsnp" />

<p>Let's modify the pilot, too.</p>


<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.java/updatePilotSingleSession.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.cs/UpdatePilotSingleSession.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.vb/UpdatePilotSingleSession.flsnp" />

<p>Nice and easy, isn't it? But there is something that is not obvious in this example. Let's see what happens if we split this task in two separate db4o sessions: In the first we modify our pilot and update his car:</p>


<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.java/updatePilotSeparateSessionsPart1.flsnp" />


<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.cs/UpdatePilotSeparateSessionsPart1.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.vb/UpdatePilotSeparateSessionsPart1.flsnp" />

<p>And in the second, we'll double-check our modification:</p>

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.java/updatePilotSeparateSessionsPart2.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.cs/UpdatePilotSeparateSessionsPart2.flsnp" />


<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.vb/UpdatePilotSeparateSessionsPart2.flsnp" />

<p>If you will execute this code you will see that Pilot's points are not changed What's happening here and what can we do to fix it?</p>
<a name="Update Depth"></a><h2>Update Depth</h2>
<p>Imagine a complex object with many members that have many members themselves. When updating this object, db4o would have to update all its children, grandchildren, etc. This poses a severe performance penalty and will not be necessary in most cases - sometimes, however, it will.  So, in our previous update example, we were modifying the Pilot child of a Car object. When we saved the change, we told db4o to save our Car object and assumed that the modified Pilot would be updated. But we were modifying and saving in the same manner as we were in the first update sample, so why did it work before? The first time we made the modification, db4o never actually had to retreive the modified Pilot it returned the same one that was still in memory that we modified, but it never actually updated the database. Restarting the application would show that the value was unchanged.  To be able to handle this dilemma as flexible as possible, db4o introduces the concept of update depth to control how deep an object's member tree will be traversed on update. The default update depth for all objects is 0, meaning that only primitive and String members will be updated, but changes in object members will not be reflected.  db4o provides means to control update depth with very fine granularity. For our current problem we'll advise db4o to update the full graph for Car objects by setting cascadeOnUpdate() for this class accordingly.  [filter=java]</p>

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.java/updatePilotSeparateSessionsImprovedPart1.flsnp" />
<p></p><p MadCap:conditions="Primary:cs" /> </p>

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.cs/UpdatePilotSeparateSessionsImprovedPart1.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.vb/UpdatePilotSeparateSessionsImprovedPart1.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.java/updatePilotSeparateSessionsImprovedPart2.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.cs/UpdatePilotSeparateSessionsImprovedPart2.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.vb/UpdatePilotSeparateSessionsImprovedPart2.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.java/updatePilotSeparateSessionsImprovedPart3.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.cs/UpdatePilotSeparateSessionsImprovedPart3.flsnp" />

<MadCap:snippetBlock src="../../Resources/Snippets/Updating Structured Objects/StructuredExample.vb/UpdatePilotSeparateSessionsImprovedPart3.flsnp" />

<p>You can also achieve expected results using:</p>

<ol>
<li>ExtObjectContainer#set(object, depth) to update exact amount of referenced fields</li>

<li>Use configuration.objectClass(clazz).updateDepth(depth) setting to define sufficient update depth for a specific object</li>

<li>Use global setting for all the persisted objects:</li>
</ol>


<p>Java: </p><p><code>configuration.updateDepth(depth);</code></p>


<p>c#: <code>configuration.UpdateDepth(depth);</code></p>


<p>VB: <code>configuration.UpdateDepth(depth);</code></p>

</p><p MadCap:conditions="Primary:cs" />

<p>However global updateDepth is not flexible enough for real-world objects having different depth of reference structures. </p><p>ATTENTION: Setting global update depth to the maximum value will result in serious performance penalty. Please, use this setting ONLY for debug purposes. </p>

<p>Note that container configuration must be set before the container is opened and/or passed to the <code>openFile/openClient/openServer</code> method.</p></div>
    </div>
    
</body></html>