<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="5831" MadCap:lastWidth="630">
    <head>
    </head>
    <body>
        <h1>Transparent Persistence Example</h1>
        <p>In order to support TA, the objects which are stored in the database need to implement the <MadCap:variable name="Primary.Activatable" />-interface.</p>
        <p>An class which implements the <MadCap:variable name="Primary.Activatable" />-interface is itself responsible for its activation. Therefore the class needs a field to keep the activator of that instance. This field is only used by the <a href="../activation/transparent_activation_framework.htm">transparent activation framework</a>. Therefore it is marked as transient, so that it isn't stored in the database.&#160;</p>
        <MadCap:snippetBlock src="../../CodeExamples/ta/example/Person-Implement-the-required-activatable-interface-and-add-activator.all.flsnp" />
        <p>After that implement the two method of the <MadCap:variable name="Primary.Activatable" />-interface. The bind-method binds an activator to the object. It's called by the transparent activation framework. The activate-method needs to be called before any read or write operation on the object. Since these two methods are always the same code, you can move the implementation to a common super class or to a static utility class.</p>
        <MadCap:snippetBlock src="../../CodeExamples/ta/example/Person-Implement-the-activatable-interface-methods.all.flsnp" />
        <p>Now the important part. Every time a field of the class is accessed you need to call the activate-method with the purpose. For example in every <MadCap:variable name="Primary.getter/setter" /> or other method. Probably the best way is to use only     <![CDATA[ ]]><MadCap:variable name="Primary.getter/setter" /> <![CDATA[ ]]>even within the class to access fields. And the <MadCap:variable name="Primary.getter/setter" /> ensure that the activate-method is called.</p>
        <p> Implementing the <MadCap:variable name="Primary.Activatable" />-interface manually for every class is repetitive and error prone. That's why this process can be automated. <MadCap:xref href="tp_enhanced_example.htm" target="" title="" alt="">See "TP Enhancement"</MadCap:xref></p>
        <MadCap:snippetBlock src="../../CodeExamples/ta/example/Person-Call-the-activate-method-on-every-field-access.all.flsnp" />
        <p>The last step is to enable transparent activation via configuration.</p>
        <MadCap:snippetBlock src="../../CodeExamples/ta/example/TransparentActivationExamples-Activate-transparent-activation.all.flsnp" />
        <p>Now transparent activation is enabled. You have to store the object only once initially. After that, changes are automatically stored on the commit call.</p>
        <MadCap:snippetBlock src="../../CodeExamples/ta/example/TransparentActivationExamples-Transparent-persistence-in-action.all.flsnp" />
    </body>
</html>