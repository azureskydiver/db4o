<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Object Container	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Object Container</h1><div id="TOC"><div id="TOCinner"><span class="TOCtitle">Contents</span><div class="TOCcontents"><ul><li><a href ="#Accessing A Database ">Accessing A Database </a></li><li><a href ="#Working With Objects ">Working With Objects </a></li><li><a href ="#Extended Object Container Interface ">Extended Object Container Interface </a></li></ul></li></ul></div></div></div> 

<P>Db4o gives you a simple and straightforward interface to object persistence - ObjectContainer. In .NET versions a conventional name IObjectContainer is used.</P>

<a name="Accessing A Database "></a><H2>Accessing A Database </H2>
<P>ObjectContainer is your db4o database.</P>
<p MadCap:conditions="Primary.Java">
<P>Java: </P>
<P><code>ObjectContainer container = Db4o.openFile(filename)</code></P>
</p><p MadCap:conditions="Primary:java" />
<p MadCap:conditions="Primary..NET,Primary.c#">
<P>c#: </P>
<P><code>IObjectContainer container = Db4oFactory.OpenFile(filename)</code></P>
</p><p MadCap:conditions="Primary:cs" />
<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<P>VB: </P>
<P><code>Dim container As IObjectContainer = Db4oFactory.OpenFile(filename)</code></P>
</p><p MadCap:conditions="Primary:vb" />
<P>filename is the path to the file, in which you want to store your objects. Normally you should open an ObjectContainer when the application starts and close it, when the session is finished to persist the changes to a physical storage location:<BR></P>
<p MadCap:conditions="Primary.Java">
<P>Java: </P>
<P><code>container.close()</code></P>
</p><p MadCap:conditions="Primary:java" />
<p MadCap:conditions="Primary..NET,Primary.c#">
<P>c#: </P>
<P><code>container.Close()</code></P>
</p><p MadCap:conditions="Primary:cs" />
<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<P>VB: </P>
<P><code>container.Close()</code></P>
</p><p MadCap:conditions="Primary:vb" />
<H1></H1>
<P>Applications using db4o versions lower than 6.1can issue multiple calls to open the same file (without closing it). These calls will get the already existing open ObjectContainer instance and no error will be produced. However as many close calls will have to be issued to close the ObjectContainer.</P>
<P>This behavior was changed since db4o version 6.1: only the first call against a file can be successful. Subsequent calls that request to open a database file that is already open will get a DatabaseFileLockedException. This behavior is much more intuitive and allows to simplify the internal db4o design as well.</P>

<a name="Working With Objects "></a><H2>Working With Objects </H2>
<P>ObjectContainer interface gives you all the basic functionality to work with persistent objects. Normally you can save a new or updated object of any class using <code>objectContainer.set(object)</code></P>
<P>Deletion is done with the following method:</P>
<p MadCap:conditions="Primary.Java">
<P>Java: </P>
<P><code>container.delete(object)</code> </P>
</p><p MadCap:conditions="Primary:java" />
<p MadCap:conditions="Primary..NET,Primary.c#">
<P>c#: </P>
<P><code>container.Delete(object)</code> </P>
</p><p MadCap:conditions="Primary:cs" />
<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<P>VB: </P>
<P><code>container.Delete(object)</code> </P>
</p><p MadCap:conditions="Primary:vb" />
<P>Through ObjectContainer#get and ObjectContainer#query you get access to objects retrieval functionality. </P>
<P>Object Container Features </P>
<P>The characteristic features of an ObjectContainer are: </P>
<UL>
<LI>An ObjectContainer can either be a database in a single-user mode or a client connection to a db4o server.</LI>
<LI>Every ObjectContainer owns one transaction. All work is transactional. When you open an ObjectContainer, you are in a transaction, when you commit() or rollback(), the next transaction is started immediately.</LI>
<LI>Every ObjectContainer maintains it's own references to stored and instantiated objects. In doing so, it manages object identities, and is able to achieve a high level of performance.</LI>
<LI>ObjectContainers are intended to be kept open as long as you work against them. When you close an ObjectContainer, all database references to objects in RAM will be discarded.</LI></UL>
<P>Basically ObjectContainer supplies functionality, which is enough for the most common usage of db4o database.</P>

<a name="Extended Object Container Interface "></a><H2>Extended Object Container Interface </H2>
<P>Additional db4o features are provided by an interface extending ObjectContainer - ExtObjectContainer.</P>
<P>The idea of splitting basic and advanced functionality between 2 interfaces is:</P>
<UL>
<LI>Keep the root package/namespace very small and well readable.</LI>
<LI>Separate vital and optional functionality.</LI>
<LI>Make it easy for other products to implement the basic db4o interface.</LI>
<LI>Show an example of how a lightweight version of db4o could look.</LI></UL>
<P>Every ObjectContainer object is also an ExtObjectContainer. You can cast it to ExtObjectContainer or you can use #ext() method to get to the advanced features. </P></div>
    </div>
    
  </body></html>
