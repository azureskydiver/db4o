<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="838" MadCap:lastWidth="680" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;listResult;MessageRecipient;ObjectServer;openServer;ObjectNotStorableException;s;clientserverJava;ServerConfiguration;clientserverCS;cs;clientserverVB;vb;config;databaseFileName;int;NativeSocketFactory;socketFactory;OpenClient;hostName;IObjectServer;OpenServer;IConfiguration;INativeSocketFactory;IObjectContainer;genkey;SSLcert;storepass;SecureSocketFactory;IMessageSender;setMessageRecipient;SetMessageRecipient;IMessageRecipient;processMessage;ProcessMessage;ByVal;UpdateServer;waitMilliSeconds;releaseSemaphore;ReleaseSemaphore;monitorObject;semaphoreName;switchToFile;fileName;SwitchToFile;switchToMainFile;SwitchToMainFile;switchs;isAlive;IsAlive;replicateDeletions;ReplicateDeletions;GetType;g;ReplicationEvent;VersionNumbers;providerA;objectsChangedSinceLastReplication;ProviderA;ObjectsChangedSinceLastReplication;hbm;ProviderSignature;MySignature;PeerSignature;ReplicationProvider;HibernateReplicationProvider;ReplicationProviders;m;typed_id;pi2763;longPart;ObjectReference;className;typedId;Uuid;uuid;drs_providers;is_my_sig;t';f';drs_history;provider_id;PK;drs_objects;class_name;varchar;one_to_one;ReplicationConfigurator;SessionFactory;sessionFactory;buildSessionFactory;openSession;beginTransaction;createCriteria;AbstractDb4oTestCase;Db4oFixture;_fixture;AbstractSoloDb4oFixture;AbstractClientServerDb4oFixture;IDb4oFixture;IQuery;NewQuery;retrieveOnlyInstance;RetrieveOnlyInstance;countOccurences;CountOccurences;foreach;Visitor4;Foreach;IVisitor4;obj;deleteAll;DeleteAll;ReflectClass;reflectClass;indexField;fieldName;IndexField;Config;setUp;SetUp;db4oSetupBeforeStore;db4oSetupAfterStore;Db4oSetupBeforeStore;Db4oSetupAfterStore;runSoloAndClientServer;RunSoloAndClientServer;runSolo;RunSolo;runClientServer;RunClientServer;CodeBlock;Db4oUnit;ICodeBlock;isTrue;msg;IsTrue;bool;Msg;areEqual;AreEqual;FrameworkTestCase;runTestAndExpect;expFailures;RunTestAndExpect;ITest;GetConfig;storedType;runtimeType;tAlias;resolveRuntimeName;resolveStoredName;storedPattern;runtimePattern;aliasing;QueryStarted;QueryFinished;QueryEventArgs;ObjectEventArgs;CancellableObjectEventArgs;CommitEventArgs;client2;client1;WaitForCompletion;args;AddHandler;forObjectContainer;ForObjectContainer;OnCreated;createdEvent;onEvent;Event4;ABC0001DEF;MustInherit;CountedObject;IncrementedId;queryStarted;queryFinished;QueryStats;q;executionTime;activationCount;storedClass;Foo;classname;storedClasses;StoredClasses;getStoredFields;GetStoredFields;storedField;getParentStoredClass;GetParentStoredClass;reflectWith;Db4oFactory;ReflectWith;self_get;self_set;LoggingReflector;IoAdapter;MyEncryptionAdapter;Io;Db4oEnhancerMSBuildTask;SensorPanel;GetOptions;UsingTask;AssemblyFile;OutputPath;TaskName;ItemGroup;Db4oEnhance;TargetPath;AfterBuild;AbstractAssemblyInstrumentation;IAssemblyInstrumentation;TAInstrumentation;tp;EnhancementExample;tacustom;Db4oPersistent;typedef;classTargetDir;jarTargetDir;MaintenanceQueue;'Barrichello';'BMW';useIndexSystem;useRamSystem;discardSmallerThan;DiscardSmallerThan;allObjects;SumPilotPoints;SelectMinPointsPilot;AveragePilotPoints;CountSubGroups;SelectPilotsAndTrainees;SelectPilotsInRange;SelectAndChangePilots;SelectTestPilots6PointsMore;SelectPilots6To12Points;SelectPilotsRandom;SelectPilotsEven;SelectAnyOnePilot;SelectDistinctPilots;SelectAllPilots;SelectAllPilotsNonGeneric;GetSortedPilots;GetPilotsSortByNameAndPoints;GetPilotsSortWithComparator;SelectPilot5Points;SelectTestPilots;SelectPilotsNumberX6;newPackage;newClass;objectField;oldField;newField;newAssembly;ObjectField;aaplication">
    <head><title>Fast collections	<link href="../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Fast collections</h1>
        <p>Db4o's solution for the best collection performance and lowest memory consumption is to implement them directly on top of BTrees without an intermediate "stored-object-db4o" layer (P1Object, P1Collection, P2LinkedList). </p>
        <p>This task is still under development, but already it makes sense to be ready to switch to the new fast collections seamlessly.</p>
        <p>Current recommendation for collection usage with db4o is:</p>
        <ul>
            <li>Declare members of persistent classes as interface (java.util.List / System.Collections.IList).</li>
            <li>Create central factory method to implement concrete collection (can be switched to fast collection implementation easily).</li>
        </ul>
        <p>Please, avoid the following realizations, which will make the switching more difficult:</p>
        <ul>
            <li>Declaring concrete implementations as fields in persistent classes</li>
            <li>Deriving from JDK collection classes</li>
            <li>Using third-party non-standard collections</li>
        </ul>
        <p>Let's look at application design, which will allow you to upgrade your application to fast collections with the least effort.</p>
        <p>In our example we will save a list of pilots as members of one team. To make it simple let's use the following factory class to get the proper list implementation:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionFactory.java/CollectionFactory.java.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionFactory.cs/CollectionFactory.cs.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionFactory.vb/CollectionFactory.vb.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>The concrete class returned by the CollectionFactory can be changed to any other collection implementation (fast collection) with the minimum coding effort.</p>
        <p>We will use the following class as a team of pilots:</p>
        <p MadCap:conditions="Primary.Java,Primary.All languages">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/Team.java/Team.java.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/Team.cs/Team.cs.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/Team.vb/Team.vb.flsnp" />
            <p>Let's try to store our team:</p>
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionExample.java/setTeam.flsnp" />
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionExample.cs/SetTeam.flsnp" />
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionExample.vb/SetTeam.flsnp" />
            <p>If we want to update one of the pilots, we will have to retrieve the whole collection:</p>
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionExample.java/updateTeam.flsnp" />
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionExample.cs/UpdateTeam.flsnp" />
            <MadCap:snippetBlock src="../../../Resources/Snippets/Fast collections/CollectionExample.vb/UpdateTeam.flsnp" />
            <p>
            </p>
            <p MadCap:conditions="Primary:vb" />
        </p>
        <p>The idea of the new fast collection implementation is to allow select/update of collection elements without an intermediate "stored-object-db4o" layer. This will allow random activation and fast querying, thus providing a considerable performance improvement especially on big collections holding deep object graphs.</p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages"><a href="listsvb.zip">VB.NET </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages"><a href="listscs.zip">c# </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="listsjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
    </body>
</html>