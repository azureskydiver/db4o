<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>BigMath	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>BigMath</h1>
<p>If you are dealing
with very big numbers, you might be using BigDecimal or BigInteger java classes.
These classes are specially designed to allow computations with of arbitrary
precision. Internally the values are stored in byte arrays for both types. Now,
thinking about it - it should not be a problem for db4o to store such values,
as it is just a matter of storing a class with the actual value in a byte array
field. However, a deeper consideration uncovers the following problems:</p>

<ul>
<li>BigInteger/BigDecimal
     representation is different in different java versions, which can cause
     problems re-instantiating the objects from a database created with a
     different Java version. </li>
<li>BigDecimal relies on
     transient field setup in the constructor, which means that constructor use
     is compulsory</li>
<li>db4o would store instances
     of these classes as full object graphs: A BigDecimal contains a BigInteger
     which contains a byte array, plus some other fields. This graph would
     faithfully be persisted into the database file and it would have to be
     read and reconstructed on access - activation depth applies.</li>
<li>Querying and indexing will essentially
     be broken due to the above limitations.</li>
</ul>

<p>To see the problem you can try the following simple
test:</p>

<MadCap:snippetBlock src="../../Resources/Snippets/BigMath/Probability.java/Probability.java.flsnp" />
<MadCap:snippetBlock src="../../Resources/Snippets/BigMath/BigMathExample.java/testDefaultConfiguration.flsnp" /><p>You will see that comparison is not done correctly. However some of the queries can work fine, like unoptimised native queries for example. </p>

<p>In order to solve the above mentioned problems db4o
implements special typehandlers for BigInteger and BigDecimal, which allow to
treat them as normal value types, i.e. in the same way as long and double, just
without precision limitation. These typehandlers are implemented in db4o
optional jar (required on the classpath) and should be added to the
configuration before opening the file with the following method:</p>

<MadCap:snippetBlock src="../../Resources/Snippets/BigMath/BigMathExample.java/configBigMathSupport.flsnp" />
<p>Note, that BigMathSupport is a part of common
configuration interface and should be added through common() method.</p>

<p>Now the initial example should produce expected
results:</p>

<MadCap:snippetBlock src="../../Resources/Snippets/BigMath/BigMathExample.java/testBigMathConfiguration.flsnp" /></div>
    </div>

        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="bigmathjava.zip">Java</a>
            </MadCap:conditionalText>
        </p>

    
</body></html>