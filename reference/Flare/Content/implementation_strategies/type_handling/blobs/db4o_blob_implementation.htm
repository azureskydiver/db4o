<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Db4o Blob Implementation	<link href="../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../../../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Db4o Blob Implementation</h1>


<p>Built-in db4o Blob type helps you to get rid of the problems of byte[] array, though it has its own drawbacks. Pros and Cons for the points, mentioned above:</p>

<ol>
<li>
every Blob gets it's own file </li>

<p>+ main database file stays a lot smaller </p>

<p>+ backups are possible over individual files </p>

<p>+ the BLOBs are accessible without db4o</p>

<p>- multiple files need to be managed </p>

<li>C/S communication runs asynchronous in separate thread</li>

<p>+ asynchronous storage allows the main application thread to continue its work, while blobs are being stored </p>

<li>special code is necessary to store and load</li>

<p>
- it is more difficult to move objects between db4o database files</p>

<li>no concerns about activation depth</li>

<p>
+ big objects won't be loaded into memory as part of the activation process</p>
</ol>

<p>Let's look, how it works. </p>

<p>
First, BLOB storage should be defined:</p>

<p MadCap:conditions="Primary.Java">

<p>Java: <code>Db4o.configure().setBlobPath(storageFolder);</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<p>c#:   <code>Db4o.Configure().SetBlobPath(storageFolder);</code></p>

</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">

<p>VB:   <code>Db4o.Configure().SetBlobPath(storageFolder);</code></p>

</p><p MadCap:conditions="Primary:vb" />

<p>where storageFolder is a String value representing local or server path to store BLOBs. If that value is not defined, db4o will use the default folder "blobs" in user directory.</p>

<p>
We will use a modified Car class, which holds reference to the car photo:</p>

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/Car.java/Car.java.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/Car.cs/Car.cs.flsnp" />
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/Car.vb/Car.vb.flsnp" />
</p><p MadCap:conditions="Primary:vb" />

<p>CarImage is a wrapper to BLOB, representing the photo:</p>

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/CarImage.java/CarImage.java.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/CarImage.cs/CarImage.cs.flsnp" />
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/CarImage.vb/CarImage.vb.flsnp" />
</p><p MadCap:conditions="Primary:vb" />

<p>inFolder ( "blobs\in\") is used as a location of existing files, which are to be stored into db4o, and outFolder ( "blobs\out\") will be the place for images, retrieved from the database.</p>

<p>
readFile method allows blob to be read from the specified location into db4o storage:</p>

<p MadCap:conditions="Primary.Java">

<p>Java: <code>Blob.readFrom( File )</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<p>c#:   <code>IBlob.ReadFrom( File )</code></p>

</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<p>VB:   <code>IBlob.ReadFrom( File )</code></p>

</p><p MadCap:conditions="Primary:vb" />

<p>As reading is done in a dedicated thread, you can use Blob#getStatus() in a loop to create a progress window.</p>

<p>
The same applies to the write operation, which copies BLOB, stored with db4o, to the specified filesystem location. </p>

<p>Let's store some cars together with their images in our database:</p>

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/storeCars.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/storeCars.flsnp" />
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/storeCars.flsnp" />
</p><p MadCap:conditions="Primary:vb" />

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/storeImage.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/storeImage.flsnp" />
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/storeImage.flsnp" />
</p><p MadCap:conditions="Primary:vb" />

<p>CarImage is stored in the database just like normal object, no BLOB data is transferred before explicit call (Blob#readFrom in CarImage#readFile method), which copies the images to the storageFolder.</p>

<p>Please, note, that CarImage reference should be stored to the database before uploading actual data, because the Blob field is only instantiated once the object is stored (otherwise you will get a null reference exception). To get the images back to the filesystem we can run a usual query:</p>

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/retrieveCars.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/retrieveCars.flsnp" />
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/retrieveCars.flsnp" />
</p><p MadCap:conditions="Primary:vb" />

<p>and get BLOB data using retrieved Car references:</p>

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/getImages.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/getImages.flsnp" />
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">

<MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/getImages.flsnp" />
</p><p MadCap:conditions="Primary:vb" />

<p>Retrieved images are placed in CarImage.outFolder ("blobs\out"). </p>

<p>So query interface operates on references - no BLOB data is loaded into memory until explicit call (Blob#writeTo). This also means, that activationDepth does not affect Blob objects and best querying performance is achieved without additional coding.</p></div>
    </div>
    
  <p>Download example code:</p>        <p></p></body></html>