<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="865" MadCap:lastWidth="624" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;objectContainer;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;listResult;MessageRecipient;ObjectServer;openServer;ObjectNotStorableException;s;clientserverJava;ServerConfiguration;clientserverCS;cs;clientserverVB;vb;config;databaseFileName;int;NativeSocketFactory;socketFactory;OpenClient;hostName;IObjectServer;OpenServer;IConfiguration;INativeSocketFactory;IObjectContainer;genkey;SSLcert;storepass;SecureSocketFactory;IMessageSender;setMessageRecipient;SetMessageRecipient;IMessageRecipient;processMessage;ProcessMessage;ByVal;UpdateServer;waitMilliSeconds;releaseSemaphore;ReleaseSemaphore;monitorObject;semaphoreName;switchToFile;fileName;SwitchToFile;switchToMainFile;SwitchToMainFile;switchs;isAlive;IsAlive;replicateDeletions;ReplicateDeletions;GetType;g;ReplicationEvent;VersionNumbers;providerA;objectsChangedSinceLastReplication;ProviderA;ObjectsChangedSinceLastReplication;hbm;ProviderSignature;MySignature;PeerSignature;ReplicationProvider;HibernateReplicationProvider;ReplicationProviders;m;typed_id;pi2763;longPart;ObjectReference;className;typedId;Uuid;uuid;drs_providers;is_my_sig;t';f';drs_history;provider_id;PK;drs_objects;class_name;varchar;one_to_one;ReplicationConfigurator;SessionFactory;sessionFactory;buildSessionFactory;openSession;beginTransaction;createCriteria;AbstractDb4oTestCase;Db4oFixture;_fixture;AbstractSoloDb4oFixture;AbstractClientServerDb4oFixture;IDb4oFixture;IQuery;NewQuery;retrieveOnlyInstance;RetrieveOnlyInstance;countOccurences;CountOccurences;foreach;Visitor4;Foreach;IVisitor4;obj;deleteAll;DeleteAll;ReflectClass;reflectClass;indexField;fieldName;IndexField;Config;setUp;SetUp;db4oSetupBeforeStore;db4oSetupAfterStore;Db4oSetupBeforeStore;Db4oSetupAfterStore;runSoloAndClientServer;RunSoloAndClientServer;runSolo;RunSolo;runClientServer;RunClientServer;CodeBlock;Db4oUnit;ICodeBlock;isTrue;msg;IsTrue;bool;Msg;areEqual;AreEqual;FrameworkTestCase;runTestAndExpect;expFailures;RunTestAndExpect;ITest;GetConfig;storedType;runtimeType;tAlias;resolveRuntimeName;resolveStoredName;storedPattern;runtimePattern;aliasing;QueryStarted;QueryFinished;QueryEventArgs;ObjectEventArgs;CancellableObjectEventArgs;CommitEventArgs;client2;client1;WaitForCompletion;args;AddHandler;forObjectContainer;ForObjectContainer;OnCreated;createdEvent;onEvent;Event4;ABC0001DEF;MustInherit;CountedObject;IncrementedId;queryStarted;queryFinished;QueryStats;q;executionTime;activationCount;storedClass;Foo;classname;storedClasses;StoredClasses;getStoredFields;GetStoredFields;storedField;getParentStoredClass;GetParentStoredClass;reflectWith;Db4oFactory;ReflectWith;self_get;self_set;LoggingReflector;IoAdapter;MyEncryptionAdapter;Io;Db4oEnhancerMSBuildTask;SensorPanel;GetOptions;UsingTask;AssemblyFile;OutputPath;TaskName;ItemGroup;Db4oEnhance;TargetPath;AfterBuild;AbstractAssemblyInstrumentation;IAssemblyInstrumentation;TAInstrumentation;tp;EnhancementExample;tacustom;Db4oPersistent;typedef;classTargetDir;jarTargetDir;MaintenanceQueue;'Barrichello';'BMW';useIndexSystem;useRamSystem;discardSmallerThan;DiscardSmallerThan;allObjects;SumPilotPoints;SelectMinPointsPilot;AveragePilotPoints;CountSubGroups;SelectPilotsAndTrainees;SelectPilotsInRange;SelectAndChangePilots;SelectTestPilots6PointsMore;SelectPilots6To12Points;SelectPilotsRandom;SelectPilotsEven;SelectAnyOnePilot;SelectDistinctPilots;SelectAllPilots;SelectAllPilotsNonGeneric;GetSortedPilots;GetPilotsSortByNameAndPoints;GetPilotsSortWithComparator;SelectPilot5Points;SelectTestPilots;SelectPilotsNumberX6;newPackage;newClass;objectField;oldField;newField;newAssembly;ObjectField;aaplication">
    <head><title>Db4o Blob Implementation	<link href="../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Db4o Blob Implementation</h1>
        <p>Built-in db4o Blob type helps you to get rid of the problems of byte[] array, though it has its own drawbacks. Pros and Cons for the points, mentioned above:</p>
        <ol>
            <li>every Blob gets it's own file </li>
            <p>+ main database file stays a lot smaller </p>
            <p>+ backups are possible over individual files </p>
            <p>+ the BLOBs are accessible without db4o</p>
            <p>- multiple files need to be managed </p>
            <li>C/S communication runs asynchronous in separate thread</li>
            <p>+ asynchronous storage allows the main application thread to continue its work, while blobs are being stored </p>
            <li>special code is necessary to store and load</li>
            <p>- it is more difficult to move objects between db4o database files</p>
            <li>no concerns about activation depth</li>
            <p>+ big objects won't be loaded into memory as part of the activation process</p>
        </ol>
        <p>Let's look, how it works. </p>
        <p>First, BLOB storage should be defined:</p>
        <p MadCap:conditions="Primary.Java">
            <p>Java: <code>Db4o.configure().setBlobPath(storageFolder);</code></p>
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <p>c#:   <code>Db4o.Configure().SetBlobPath(storageFolder);</code></p>
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <p>VB:   <code>Db4o.Configure().SetBlobPath(storageFolder);</code></p>
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>where storageFolder is a String value representing local or server path to store BLOBs. If that value is not defined, db4o will use the default folder "blobs" in user directory.</p>
        <p>We will use a modified Car class, which holds reference to the car photo:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/Car.java/Car.java.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/Car.cs/Car.cs.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/Car.vb/Car.vb.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>CarImage is a wrapper to BLOB, representing the photo:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/CarImage.java/CarImage.java.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/CarImage.cs/CarImage.cs.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/CarImage.vb/CarImage.vb.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>inFolder ( "blobs\in\") is used as a location of existing files, which are to be stored into db4o, and outFolder ( "blobs\out\") will be the place for images, retrieved from the database.</p>
        <p>readFile method allows blob to be read from the specified location into db4o storage:</p>
        <p MadCap:conditions="Primary.Java">
            <p>Java: <code>Blob.readFrom( File )</code></p>
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <p>c#:   <code>IBlob.ReadFrom( File )</code></p>
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <p>VB:   <code>IBlob.ReadFrom( File )</code></p>
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>As reading is done in a dedicated thread, you can use Blob#getStatus() in a loop to create a progress window.</p>
        <p>The same applies to the write operation, which copies BLOB, stored with db4o, to the specified filesystem location. </p>
        <p>Let's store some cars together with their images in our database:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/storeCars.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/storeCars.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/storeCars.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/storeImage.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/storeImage.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/storeImage.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>CarImage is stored in the database just like normal object, no BLOB data is transferred before explicit call (Blob#readFrom in CarImage#readFile method), which copies the images to the storageFolder.</p>
        <p>Please, note, that CarImage reference should be stored to the database before uploading actual data, because the Blob field is only instantiated once the object is stored (otherwise you will get a null reference exception). To get the images back to the filesystem we can run a usual query:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/retrieveCars.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/retrieveCars.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/retrieveCars.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>and get BLOB data using retrieved Car references:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.java/getImages.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.cs/getImages.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Db4o Blob Implementation/BlobExample.vb/getImages.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>Retrieved images are placed in CarImage.outFolder ("blobs\out"). </p>
        <p>So query interface operates on references - no BLOB data is loaded into memory until explicit call (Blob#writeTo). This also means, that activationDepth does not affect Blob objects and best querying performance is achieved without additional coding.</p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.VB.NET"><a href="blobsvb.zip">VB.NET </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.c#"><a href="blobscs.zip">c# </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="blobsjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
    </body>
</html>