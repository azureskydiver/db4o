<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="5911" MadCap:lastWidth="672">
    <head>
    </head>
    <body>
        <h1>Storing Static Fields</h1>
        <p>By default db4o does not persist static fields. Normally this is not necessary as static values are set for a class, not for an object. However you can set up db4o to store static fields if you need to implement constant or enumeration: <MadCap:xref href="../../../configuration/objectclass/persist_static_fields.htm" target="" title="" alt="">See "Persist Static Fields"</MadCap:xref></p>
        <MadCap:snippetBlock src="../../../CodeExamples/configuration/objectconfig/ObjectConfigurationExamples-Persist-also-the-static-fields.all.flsnp" />
        <p>Use this option only very carefully. This option means that static fields are stored in the database. So when you change the value of this field, it you need to store it explicitly again. Furthermore, db4o will replace the static value at runtime, which can lead to very subtle bugs in your application.</p>
        <p>This option does not have any effect on primitive types, like ints, longs, floats etc.</p>
        <p>When this setting is on for a specific class, all non-primitive-typed static field values of this class are stored the first time an object of the class is stored, and restored, every time a database file is opened afterwards, after class meta information is loaded for this class (when the class objects are retrieved with a query, for example).</p>
        <h2>Enum Class Usecase</h2>
        <p style="font-weight: normal;">One of the use-cases is when you have a enumeration-class, which you want to store.
		<span MadCap:conditions="Primary.Java">In fact, Java enums implement the enumeration-class idiom directly. And db4o enables the
			persist static fields option by default for all enums.</span> For example we have a color-class, which also has some static colors.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/strategies/storingstatic/Color-Class-as-enumeration.all.flsnp" />
        <p style="font-weight: normal;">In our we want to do reference equality on colors. This is an easy way to check for a color. But when we load the colors from the database, the objects are new instances. This means that comparing the references will fail, because the objects from the database and the objects in the static class are now different instances. </p>
        <MadCap:snippetBlock src="../../../CodeExamples/strategies/storingstatic/StoringStaticFields-Compare-by-reference.all.flsnp" />
        <p style="font-weight: normal;">When we now enable the persist static fields option, the static fields are stored. This means that the object referenced in the static fields are loaded from the database and therefore the same instance. And the comparing the references works again.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/strategies/storingstatic/StoringStaticFields-Enable-storing-static-fields-for-our-color-class.all.flsnp" />
    </body>
</html>