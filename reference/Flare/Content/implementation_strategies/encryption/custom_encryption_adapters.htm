<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="547" MadCap:lastWidth="560">
    <head><title>Custom Encryption Adapters</title>
    </head>
    <body>
        <h1>Custom Encryption Adapters</h1>
        <p>db4o still provides a solution for high-security encryption by allowing any user to choose his own encryption mechanism that he thinks he needs. The db4o file IO mechanism is pluggable and any fixed-length encryption mechanism can be added. All that needs to be done is to write an <MadCap:variable name="Primary.Storage" />-adapter for db4o file IO.</p>
        <p>This is a lot easier than it sounds. Simply:</p>
        <ul>
            <li>Take the sources of FileStorage as an example. </li>
            <li>Write your own <MadCap:variable name="Primary.Storage" />-implementation that delegates raw file access to another adapter using the GoF decorator pattern. You can extend the StorageDecorator to implement your decorator.</li>
            <li>Implement the read- and write-methods from the <MadCap:variable name="Primary.Bin" />-interface to encrypt and decrypt when bytes are being exchanged with the file  </li>
            <li>Plug your adapter into db4o with the following method:
</li>
        </ul>
        <MadCap:snippetBlock src="../../CodeExamples/configuration/io/IOConfigurationExamples-You-stack-up-different-storage-decorator-to-add-functionality.all.flsnp" />
        <p>However, you'll have to keep in mind that db4o will write partial updates. For example, it may write a full object and then only modify one field entry later on. Therefore it is not sufficient to en-/decrypt each access in isolation. You'll rather have to make up a tiling structure that defines the data chunks that have to be en-/decrypted together.</p>
    </body>
</html>