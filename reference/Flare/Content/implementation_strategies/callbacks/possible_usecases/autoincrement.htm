<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="6073" MadCap:lastWidth="756" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;listResult;MessageRecipient;ObjectServer;openServer;ObjectNotStorableException;s;clientserverJava;ServerConfiguration;clientserverCS;cs;clientserverVB;vb;config;databaseFileName;int;NativeSocketFactory;socketFactory;OpenClient;hostName;IObjectServer;OpenServer;IConfiguration;INativeSocketFactory;IObjectContainer;genkey;SSLcert;storepass;SecureSocketFactory;IMessageSender;setMessageRecipient;SetMessageRecipient;IMessageRecipient;processMessage;ProcessMessage;ByVal;UpdateServer;waitMilliSeconds;releaseSemaphore;ReleaseSemaphore;monitorObject;semaphoreName;switchToFile;fileName;SwitchToFile;switchToMainFile;SwitchToMainFile;switchs;isAlive;IsAlive;replicateDeletions;ReplicateDeletions;GetType;g;ReplicationEvent;VersionNumbers;providerA;objectsChangedSinceLastReplication;ProviderA;ObjectsChangedSinceLastReplication;hbm;ProviderSignature;MySignature;PeerSignature;ReplicationProvider;HibernateReplicationProvider;ReplicationProviders;m;typed_id;pi2763;longPart;ObjectReference;className;typedId;Uuid;uuid;drs_providers;is_my_sig;t';f';drs_history;provider_id;PK;drs_objects;class_name;varchar;one_to_one;ReplicationConfigurator;SessionFactory;sessionFactory;buildSessionFactory;openSession;beginTransaction;createCriteria;AbstractDb4oTestCase;Db4oFixture;_fixture;AbstractSoloDb4oFixture;AbstractClientServerDb4oFixture;IDb4oFixture;IQuery;NewQuery;retrieveOnlyInstance;RetrieveOnlyInstance;countOccurences;CountOccurences;foreach;Visitor4;Foreach;IVisitor4;obj;deleteAll;DeleteAll;ReflectClass;reflectClass;indexField;fieldName;IndexField;Config;setUp;SetUp;db4oSetupBeforeStore;db4oSetupAfterStore;Db4oSetupBeforeStore;Db4oSetupAfterStore;runSoloAndClientServer;RunSoloAndClientServer;runSolo;RunSolo;runClientServer;RunClientServer;CodeBlock;Db4oUnit;ICodeBlock;isTrue;msg;IsTrue;bool;Msg;areEqual;AreEqual;FrameworkTestCase;runTestAndExpect;expFailures;RunTestAndExpect;ITest;GetConfig;storedType;runtimeType;tAlias;resolveRuntimeName;resolveStoredName;storedPattern;runtimePattern;aliasing;QueryStarted;QueryFinished;QueryEventArgs;ObjectEventArgs;CancellableObjectEventArgs;CommitEventArgs;client2;client1;WaitForCompletion;args;AddHandler;forObjectContainer;ForObjectContainer;OnCreated;createdEvent;onEvent;Event4;ABC0001DEF;MustInherit;CountedObject;IncrementedId">
    <head><title>Autoincrement	<link href="../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>
            <MadCap:keyword term="Autoincrement" />Autoincrement</h1>
        <p>db4o does not deliver a field auto increment feature, which
is common in RDBMS. Normally you don't need any additional ids, since db4o manages objects by <a href="../../../Basic_Concepts/object_identity.htm">object-identity</a>. However cases where you have <a href="../../../platform_specific_issues/disconnected_objects.htm">disconnected object</a>, you need additional ids. One of then are auto incremented ids.</p>
        <p> If your application logic requires this feature you can
implement it using external callbacks. One of the possible solutions is
presented below. Note that this example only works in embedded-mode.</p>
        <p>For this example assumes that all object which need an auto incremented id are subclasses of the IDHolder-class. This class contains the auto-incremented id.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/disconnectedobj/idexamples/IDHolder-id-holder.all.flsnp" />
        <p>First create a class which keeps the state of the auto-increment numbers. For example a map which keeps the latest auto incremented id for each class.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/disconnectedobj/idexamples/AutoIncrement-persistent-auto-increment.all.flsnp" />
        <p>Then create two methods, which are called later. One which returns the next auto-incremented id for a certain class. Another which stored the current state of the auto-increments.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/disconnectedobj/idexamples/AutoIncrement-getting-the-next-id-and-storing-state.all.flsnp" />
        <p>The last part is to ensure that the existing auto-increments are loaded from the database. Or if not existing, that a new instance is created.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/disconnectedobj/idexamples/AutoIncrement-load-the-state-from-the-database.all.flsnp" />
        <p>Now it's time to use the callbacks. Every time a new object is, assign the new ids. For this the creating-event is perfect. When commiting  also make the auto increment-state persistent, to ensure that no id is used twice.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/disconnectedobj/idexamples/AutoIncrementExample-use-events-to-assign-the-ids.all.flsnp" />
        <p>Last, don't forget to index the id-field. Otherwise looks-ups will be slow.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/disconnectedobj/idexamples/AutoIncrementExample-index-the-id-field.all.flsnp" />
    </body>
</html>