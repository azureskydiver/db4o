<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="818" MadCap:lastWidth="640" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;objectContainer;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;listResult;MessageRecipient;ObjectServer;openServer;ObjectNotStorableException;s;clientserverJava;ServerConfiguration;clientserverCS;cs;clientserverVB;vb;config;databaseFileName;int;NativeSocketFactory;socketFactory;OpenClient;hostName;IObjectServer;OpenServer;IConfiguration;INativeSocketFactory;IObjectContainer;genkey;SSLcert;storepass;SecureSocketFactory;IMessageSender;setMessageRecipient;SetMessageRecipient;IMessageRecipient;processMessage;ProcessMessage;ByVal;UpdateServer;waitMilliSeconds;releaseSemaphore;ReleaseSemaphore;monitorObject;semaphoreName;switchToFile;fileName;SwitchToFile;switchToMainFile;SwitchToMainFile;switchs;isAlive;IsAlive;replicateDeletions;ReplicateDeletions;GetType;g;ReplicationEvent;VersionNumbers;providerA;objectsChangedSinceLastReplication;ProviderA;ObjectsChangedSinceLastReplication;hbm;ProviderSignature;MySignature;PeerSignature;ReplicationProvider;HibernateReplicationProvider;ReplicationProviders;m;typed_id;pi2763;longPart;ObjectReference;className;typedId;Uuid;uuid;drs_providers;is_my_sig;t';f';drs_history;provider_id;PK;drs_objects;class_name;varchar;one_to_one;ReplicationConfigurator;SessionFactory;sessionFactory;buildSessionFactory;openSession;beginTransaction;createCriteria;AbstractDb4oTestCase;Db4oFixture;_fixture;AbstractSoloDb4oFixture;AbstractClientServerDb4oFixture;IDb4oFixture;IQuery;NewQuery;retrieveOnlyInstance;RetrieveOnlyInstance;countOccurences;CountOccurences;foreach;Visitor4;Foreach;IVisitor4;obj;deleteAll;DeleteAll;ReflectClass;reflectClass;indexField;fieldName;IndexField;Config;setUp;SetUp;db4oSetupBeforeStore;db4oSetupAfterStore;Db4oSetupBeforeStore;Db4oSetupAfterStore;runSoloAndClientServer;RunSoloAndClientServer;runSolo;RunSolo;runClientServer;RunClientServer;CodeBlock;Db4oUnit;ICodeBlock;isTrue;msg;IsTrue;bool;Msg;areEqual;AreEqual;FrameworkTestCase;runTestAndExpect;expFailures;RunTestAndExpect;ITest;GetConfig;storedType;runtimeType;tAlias;resolveRuntimeName;resolveStoredName;storedPattern;runtimePattern;aliasing;QueryStarted;QueryFinished;QueryEventArgs;ObjectEventArgs;CancellableObjectEventArgs;CommitEventArgs;client2;client1;WaitForCompletion;args;AddHandler;forObjectContainer;ForObjectContainer;OnCreated;createdEvent;onEvent;Event4;ABC0001DEF;MustInherit;CountedObject;IncrementedId">
    <head><title>Autoincrement	<link href="../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Autoincrement</h1>
        <p>Db4o does not deliver a field autoincrement feature, which
is common in RDBMS. If your application logic requires this feature you can
implement it using External Callbacks. One of the possible solutions is
presented below.</p>
        <p>We will need an object to store the last generated ID and to
return a new ID on request:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/IncrementedId.java/IncrementedId.java.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/IncrementedId.cs/IncrementedId.cs.flsnp" />
            <p MadCap:conditions="Primary:cs" />
            <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/IncrementedId.vb/IncrementedId.vb.flsnp" />
            </p>
            <p MadCap:conditions="Primary:vb" />
            <p>This object generates the simplest ID, which is an
autoincremented integer value. You can add your own algorithm to generate more
sophisticated ID sequences, like ABC0001DEF.</p>
            <p>When you use external callbacks you are not limited to a
single object: a callback can apply to any group of objects Thus you can create
a sequence of classes sharing the same autoincrement. To distinguish the
objects, which will have an autoincremented field, we will use an abstract
(MustInherit in VB) class:</p>
            <p MadCap:conditions="Primary.Java">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/CountedObject.java/CountedObject.java.flsnp" />
            </p>
            <p MadCap:conditions="Primary:java" />
            <p MadCap:conditions="Primary..NET,Primary.c#">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/CountedObject.cs/CountedObject.cs.flsnp" />
            </p>
            <p MadCap:conditions="Primary:cs" />
            <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/CountedObject.vb/CountedObject.vb.flsnp" />
            </p>
            <p MadCap:conditions="Primary:vb" />
            <p>Each object extending CountedObject will get an
autoincremented ID. For example:</p>
            <p MadCap:conditions="Primary.Java">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/TestObject.java/TestObject.java.flsnp" />
            </p>
            <p MadCap:conditions="Primary:java" />
            <p MadCap:conditions="Primary..NET,Primary.c#">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/TestObject.cs/TestObject.cs.flsnp" />
            </p>
            <p MadCap:conditions="Primary:cs" />
            <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/TestObject.vb/TestObject.vb.flsnp" />
            </p>
            <p MadCap:conditions="Primary:vb" />
            <p>It is only left to register the callback with the creating() event:</p>
            <p MadCap:conditions="Primary.Java">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.java/registerCallback.flsnp" />
            </p>
            <p MadCap:conditions="Primary:java" />
            <p MadCap:conditions="Primary..NET,Primary.c#">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.cs/RegisterCallback.flsnp" />
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.cs/OnCreating.flsnp" />
            </p>
            <p MadCap:conditions="Primary:cs" />
            <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.vb/RegisterCallback.flsnp" />
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.vb/GetNextId.flsnp" />
            </p>
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>You can test the results with the following code:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.java/storeObjects.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java" />
        <p MadCap:conditions="Primary..NET,Primary.c#">
            <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.cs/StoreObjects.flsnp" />
            <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.cs/RetrieveObjects.flsnp" />
            <p MadCap:conditions="Primary:cs" />
            <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                <MadCap:snippetBlock src="../../../Resources/Snippets/Autoincrement/AutoIncExample.vb/StoreObjects.flsnp" />
            </p>
        </p>
        <p MadCap:conditions="Primary:vb" />Please,
note that the suggested implementation <b>cannot be used in a multithreaded
environment</b>. In such environment you will have to make sure that the IncrementedId class can only be
saved to the database once, and that 2 threads cannot independently and
simultaneously increment IncrementedId
counter. 
     
    

        <p MadCap:conditions="Primary.Online">Download example code:</p><p MadCap:conditions="Primary.Online"><MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.VB.NET"><a href="autoincvb.zip">VB.NET </a></MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.c#"><a href="autoinccs.zip">c# </a></MadCap:conditionalText><MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="autoincjava.zip">Java </a></MadCap:conditionalText></p></body>
</html>