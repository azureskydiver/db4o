<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="4243" MadCap:lastWidth="770">
    <head><title>Event Registry API</title>
    </head>
    <body>
        <h1>
            <MadCap:keyword term="Events" />Event Registry API</h1>
        <p>You can register to events of the db4o-database. You can used these events to implement all kinds of additional functionality. Take a look a few example use-cases. <MadCap:xref href="possible_usecases.htm" target="" title="" alt="">See "Possible Usecases"</MadCap:xref></p>
        <p>There's an event for each database operation. Most of the time there are two events for an operation. One is fired before the operation starts, the other when the operation ends.</p>
        <h2>Register to an Event</h2>
        <p>You can gain access tot the events via a event registry. These three steps show how to register to events.</p>
        <p>Obtain a <MadCap:variable name="Primary.EventRegistry" />-instance from the object container.</p>
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-Obtain-the-event-registry.all.flsnp" />
        <p>Now you can register your event-handlers on the event registry.</p>
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-register-for-a-event.all.flsnp" />
        <p>Then implement your event handling.</p>
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-implement-your-event-handling.all.flsnp" />
        <h2>Cancelable Events</h2>
        <p>Some events can actually cancel the operation. All events which have a CancellableObjectEventArgs-parameter can cancel the operation. When you cancel a operation in a event-handler. When you cancel in a event, the operation won't be executed. For example:</p>
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-Cancel-store-operation.all.flsnp" />
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-Cancel-store-operation-Handler.all.flsnp" />
        <h2>Register Events On The Server</h2>
        <p>When you want to register for the events on the server, you should register it on the server-container. </p>
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-register-for-events-on-the-server.all.flsnp" />
        <h2>Commit-Events</h2>
        <p>Commit-events bring a collection of the added, updated and deleted object with it. You can iterate over these objects. The updated- and added-collections contain LazyObjectReferences, the deleted-event a FrozenObjectInfos. Note that you may cannot get deleted object-instance anymore, but only the meta-info. Further the object doesn't need to be activated. So when you need to read information out if it, ensure that you've activated it first.</p>
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-Commit-info.all.flsnp" />
        <MadCap:snippetBlock src="../../CodeExamples/callbacks/eventregistry/EventRegistryExamples-Commit-info-Handler.all.flsnp" />
        <h2>Pitfalls and Limitations</h2>
        <ul>
            <li>All embedded clients-/session share the same event registry. So you need to register the events only on one.</li>
            <li>You cannot call recursively the event-producing operation within the event-handler. For example in the storing-event you cannot call store. In the committing-event you cannot call commit.</li>
            <li>In client-server mode, each client has it's own event-registry, and therefore only sees its own events. Except the committed-event. <MadCap:xref href="../../client-server/events_in_cs_mode.htm" target="" title="" alt="">See "Events In Client Server-Mode"</MadCap:xref></li>
        </ul>
    </body>
</html>