<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="9" MadCap:lastHeight="3739" MadCap:lastWidth="1340" MadCap:conditions="Primary..NET">
    <head><title>.NET Example Class	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
                <h1>.NET Example Class</h1>
                <p>For this example we'll be using a hypothetical <code>LocalizedItemList</code> class which binds together culture information with a list of items.</p>
                <p><code>System.Globalization.CultureInfo</code> is particularly interesting because it internally holds a native pointer to a system structure which in turn cannot be cleanly stored by db4o.</p>
                <p MadCap:conditions="Primary..NET,Primary.c#">
                    <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/LocalizedItemList.cs/LocalizedItemList.cs.flsnp" />
                </p>
                <p MadCap:conditions="Primary:cs" />
                <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                    <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/LocalizedItemList.vb/LocalizedItemList.vb.flsnp" />
                </p>
                <p MadCap:conditions="Primary:vb" />
                <p>We'll be using this code to store and retrieve and instance of this class with different configuration settings:</p>
                <p MadCap:conditions="Primary..NET,Primary.c#">
                    <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/TranslatorExample.cs/TryStoreAndRetrieve.flsnp" />
                </p>
                <p MadCap:conditions="Primary:cs" />
                <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                    <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/TranslatorExample.vb/TryStoreAndRetrieve.flsnp" />
                </p>
                <p MadCap:conditions="Primary:vb" /><a name="Using The Constructor "></a>
                <h2>Using The Constructor </h2>
                <p MadCap:conditions="Primary..NET,Primary.c#">
                    <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/TranslatorExample.cs/TryStoreWithCallConstructors.flsnp" />
                </p>
                <p MadCap:conditions="Primary:cs" />
                <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                    <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/TranslatorExample.vb/TryStoreWithCallConstructors.flsnp" />
                </p>
                <p MadCap:conditions="Primary:vb" />
                <p>At storage time, db4o tests the only available constructor with null arguments and runs into a NullPointerException, so it refuses to accept our object. (Note that this test only occurs when configured with <a href="../../object_lifecycle/object_construction/troubleshooting.htm"  >exceptionsOnNotStorable</a>(default setting is true) - otherwise db4o will silently fail when trying to reinstantiate the object.)  </p><a name="Bypassing The Constructor "></a>
                <h2>Bypassing The Constructor </h2>
                <p>
                    <p MadCap:conditions="Primary..NET,Primary.c#">
                        <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/TranslatorExample.cs/TryStoreWithoutCallConstructors.flsnp" />
                    </p>
                    <p MadCap:conditions="Primary:cs" />
                    <p MadCap:conditions="Primary..NET,Primary.VB.NET">
                    </p>
                    <MadCap:snippetBlock src="../../Resources/Snippets/.NET Example Class/TranslatorExample.vb/TryStoreWithoutCallConstructors.flsnp" />
                </p>
                <p MadCap:conditions="Primary:vb" />
                <p>This still does not work for our case because the native pointer will definitely be invalid. In fact this example crashes the Common Language Runtime.  </p>
                <p>In order to solve the problem we will need to use <a href="the_translator_api.htm"  >db4o Translators</a>. </p>
    </body>
</html>