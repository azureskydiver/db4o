<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="828" MadCap:lastWidth="624" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;objectContainer;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;listResult;MessageRecipient;ObjectServer;openServer;ObjectNotStorableException;s;clientserverJava;ServerConfiguration;clientserverCS;cs;clientserverVB;vb;config;databaseFileName;int;NativeSocketFactory;socketFactory;OpenClient;hostName;IObjectServer;OpenServer;IConfiguration;INativeSocketFactory;IObjectContainer;genkey;SSLcert;storepass;SecureSocketFactory;IMessageSender;setMessageRecipient;SetMessageRecipient;IMessageRecipient;processMessage;ProcessMessage;ByVal;UpdateServer;waitMilliSeconds;releaseSemaphore;ReleaseSemaphore;monitorObject;semaphoreName;switchToFile;fileName;SwitchToFile;switchToMainFile;SwitchToMainFile;switchs;isAlive;IsAlive;replicateDeletions;ReplicateDeletions;GetType;g;ReplicationEvent;VersionNumbers;providerA;objectsChangedSinceLastReplication;ProviderA;ObjectsChangedSinceLastReplication;hbm;ProviderSignature;MySignature;PeerSignature;ReplicationProvider;HibernateReplicationProvider;ReplicationProviders;m;typed_id;pi2763;longPart;ObjectReference;className;typedId;Uuid;uuid;drs_providers;is_my_sig;t';f';drs_history;provider_id;PK;drs_objects;class_name;varchar;one_to_one;ReplicationConfigurator;SessionFactory;sessionFactory;buildSessionFactory;openSession;beginTransaction;createCriteria;AbstractDb4oTestCase;Db4oFixture;_fixture;AbstractSoloDb4oFixture;AbstractClientServerDb4oFixture;IDb4oFixture;IQuery;NewQuery;retrieveOnlyInstance;RetrieveOnlyInstance;countOccurences;CountOccurences;foreach;Visitor4;Foreach;IVisitor4;obj;deleteAll;DeleteAll;ReflectClass;reflectClass;indexField;fieldName;IndexField;Config;setUp;SetUp;db4oSetupBeforeStore;db4oSetupAfterStore;Db4oSetupBeforeStore;Db4oSetupAfterStore;runSoloAndClientServer;RunSoloAndClientServer;runSolo;RunSolo;runClientServer;RunClientServer;CodeBlock;Db4oUnit;ICodeBlock;isTrue;msg;IsTrue;bool;Msg;areEqual;AreEqual;FrameworkTestCase;runTestAndExpect;expFailures;RunTestAndExpect;ITest;GetConfig;storedType;runtimeType;tAlias;resolveRuntimeName;resolveStoredName;storedPattern;runtimePattern;aliasing;QueryStarted;QueryFinished;QueryEventArgs;ObjectEventArgs;CancellableObjectEventArgs;CommitEventArgs;client2;client1;WaitForCompletion;args;AddHandler;forObjectContainer;ForObjectContainer;OnCreated;createdEvent;onEvent;Event4;ABC0001DEF;MustInherit;CountedObject;IncrementedId;queryStarted;queryFinished;QueryStats;q;executionTime;activationCount;storedClass;Foo;classname;storedClasses;StoredClasses;getStoredFields;GetStoredFields;storedField;getParentStoredClass;GetParentStoredClass;reflectWith;Db4oFactory;ReflectWith;self_get;self_set;LoggingReflector;IoAdapter;MyEncryptionAdapter;Io;Db4oEnhancerMSBuildTask;SensorPanel;GetOptions;UsingTask;AssemblyFile;OutputPath;TaskName;ItemGroup;Db4oEnhance;TargetPath;AfterBuild;AbstractAssemblyInstrumentation;IAssemblyInstrumentation;TAInstrumentation;tp;EnhancementExample;tacustom;Db4oPersistent;typedef;classTargetDir;jarTargetDir;MaintenanceQueue;'Barrichello';'BMW';useIndexSystem;useRamSystem;discardSmallerThan;DiscardSmallerThan;allObjects;SumPilotPoints;SelectMinPointsPilot;AveragePilotPoints;CountSubGroups;SelectPilotsAndTrainees;SelectPilotsInRange;SelectAndChangePilots;SelectTestPilots6PointsMore;SelectPilots6To12Points;SelectPilotsRandom;SelectPilotsEven;SelectAnyOnePilot;SelectDistinctPilots;SelectAllPilots;SelectAllPilotsNonGeneric;GetSortedPilots;GetPilotsSortByNameAndPoints;GetPilotsSortWithComparator;SelectPilot5Points;SelectTestPilots;SelectPilotsNumberX6;newPackage;newClass;objectField;oldField;newField;newAssembly;ObjectField;aaplication">
    <head><title>CachingStorage	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>CachingStorage</h1>
        <p>CachingStorage
is db4o default storage. </p>
        <p>Default
implementation uses LRU/Q2 caching mechanism to reduce disk access times and
improve performance. You can find the LRU/Q2 description on the internet or you
can look for the concrete implementation in db4o source code: LRU2QCache,
LRU2QXCache and LRUCache. By default, CachingStorage class makes use of LRU2QCache,
however other implementations can be used as well, as it will be discussed
later.</p>
        <p>Cache is characterized by the amount of pages that
can be utilized and the page size. The multiplication of these 2 parameters
gives the maximum cache size that can be used.</p>
        <p>Bigger page size means faster handling of the
information as there is no need to switch between pages for longer. On the
other hand bigger page size will mean higher memory consumption, as memory will
be reserved for the whole page size, when the new page is needed. Modifying
these values and running performance tests, you can achieve the best
performance/memory consumption combination for your system. The default values
are the following:</p>
        <p>Page count = 64 
Page size = 1024,</p>
        <p>Which gives us a total of 64 KB of cache memory.</p>
        <p>In order to modify page size and amount use the
following configuration calls:</p>
        <p MadCap:conditions="Primary.Java">
            <p>Java:  </p>
            <p><code>// config is an instance of either EmbeddedConfiguration
or ServerConfiguration</code>
            </p>
            <p><code>config.file().storage(new CachingStorage(new
FileStorage(), PAGE_COUNT, PAGE_SIZE));</code>
            </p>
        </p>
        <p MadCap:conditions="Primary:java,Primary.All languages" />
        <p MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages">
            <p>c#:  </p>
            <p><code>// config is an instance of either IEmbeddedConfiguration
or IServerConfiguration</code>
            </p>
            <p><code>config.File.Storage = new CachingStorage(new
FileStorage(), PageCount, PageSize);</code>
            </p>
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages">
            <p>VB.NET:  </p>
            <p><code>' config is an instance of either IEmbeddedConfiguration
or IServerConfiguration</code>
            </p>
            <p><code>config.File.Storage = New CachingStorage(New
FileStorage(), PageCount, PageSize)</code>
            </p>
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>For more information on Page size and count please see
<a href="cachingstorage/cache_configuration_example.htm">Cache Configuration Example</a>.</p>
        <p>By default db4o uses LRU2QCache,which is a
simplified implementation of the 2 Queue algorithm described here:</p>
        <p><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.34.2641">http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1..34.2641</a>
        </p>
        <p>You can also make use of the full version of the algorithm
or a simple LRU, by overriding newCache/NewCache method in CachingStorage class:</p>
        <p MadCap:conditions="Primary.Java">
            <MadCap:snippetBlock src="../../Resources/Snippets/CachingStorage/FullLRUCachingStorage.java/FullLRUCachingStorage.java.flsnp" />
        </p>
        <p MadCap:conditions="Primary:java,Primary.All languages" />
        <p MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages">
            <MadCap:snippetBlock src="../../Resources/Snippets/CachingStorage/FullLRUCachingStorage.cs/FullLRUCachingStorage.cs.flsnp" />
        </p>
        <p MadCap:conditions="Primary:cs" />
        <p MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages">
            <MadCap:snippetBlock src="../../Resources/Snippets/CachingStorage/FullLRUCachingStorage.vb/FullLRUCachingStorage.vb.flsnp" />
        </p>
        <p MadCap:conditions="Primary:vb" />
        <p>If you have a better idea of cache implementation
you are welcome to create it by overriding Cache4&lt;K,V&gt;(Java) or ICache4&lt;K,V&lt;(.NET) and using the new
implementation in the newCache/NewCache method in CachingStorage class as in the example
above.</p>
        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages"><a href="pluggable_storage/storagevb.zip">VB.NET </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages"><a href="pluggable_storage/storagecs.zip">c# </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="pluggable_storage/storagejava.zip">Java </a>
            </MadCap:conditionalText>
        </p>
    </body>
</html>