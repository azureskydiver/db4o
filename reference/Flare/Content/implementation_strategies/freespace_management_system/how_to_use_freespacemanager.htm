<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>How To Use FreeSpacemanager	<link href="../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
     
       
        <h1>How To Use FreeSpacemanager</h1>

<p>There are several configuration options that can help you to tune up your freespacemanager to achieve the best performance and reliability of your system. All methods should be called before opening database files.</p>
<p>
Public interface FreespaceConfiguration provides methods to select freespace system ( <i>useIndexSystem() , useRamSystem()</i>) as described before. See API documentation for more information.</p>
<p>
Another FreespaceConfiguration method</p>

<p MadCap:conditions="Primary.Java">
<p>Java: </p><p><code>void discardSmallerThan(int byteCount) </code></p>
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">
<p>c#:   </p><p><code>void DiscardSmallerThan(int byteCount) </code></p>
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<p>VB:   </p><p><code>void DiscardSmallerThan(int byteCount) </code></p>
</p><p MadCap:conditions="Primary:vb" />

<p>configures the minimum size of free space slots in the database file that are to be reused. FreespaceManager keeps 2 lists of all 'freed' space that can be reused (sorted by address and by size). In some cases (numerous updates, deletes) these lists can grow large, causing extra RAM consumption and performance loss for maintenance. With this method you can specify an upper bound for the byte slot size to discard from Freespace manager list. It is not recommended to specify a value of byteCount &gt; 100 as freespace re-usage will become less efficient and the database file will grow faster. However, if defragment can be run frequently, it will also reclaim lost space and decrease the database file to the minimum size. Therefore byteCount may be set to bigger value.</p>
<p>By default byteCount = 0, which means that all 'freed' space is reused.</p>
<p>
Another configuration setting that can be used with frequently defragmented systems</p>

<p MadCap:conditions="Primary.Java">
<p>Java: </p><p><code>configuration.automaticShutDown(false);</code></p>
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary..NET,Primary.c#">
<p>c#:   </p><p><code>configuration.AutomaticShutDown(false);</code></p>
</p><p MadCap:conditions="Primary:cs" />

<p MadCap:conditions="Primary..NET,Primary.VB.NET">
<p>VB:   </p><p><code>configuration.AutomaticShutDown(false);</code></p>
</p><p MadCap:conditions="Primary:vb" />
<p>
Detailed description of this method can be found in <a href="../../tuning/performance_hints/no_shutdown_thread.htm"  >Tuning</a> part of the Reference documentation.</p> 
     
    
  </body></html>
