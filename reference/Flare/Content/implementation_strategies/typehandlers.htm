<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>TypeHandlers	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
     
       
        <h1>TypeHandlers</h1>

<p>One of the most important and convenient things that db4o provides is the
ability to store any object just as it is: no interfaces to be implemented, no
custom fields, no attributes/annotations - nothing, just a plain object.
However, it is not as simple as it may seem - objects are getting more and more
complex and sometimes the generic solution is not good enough for specific
objects. </p>

<p>This problem was recognized by db4o team long ago, and various solutions
were provided to customize the way an object is stored: configuration #readAs
method, <a href="translators.htm"  >Translators</a>, transient <a href="../tuning/selective_persistence/transient_fields_in_java.htm"  >fields in Java</a> and <a href="../tuning/selective_persistence/transient_fields_in_.net.htm"  >.NET</a> and <a href="../tuning/selective_persistence/transient_classes.htm"  >classes</a>, custom
marshallers etc. However all these means were rather fixing the symptoms but
not the disease itself. And the fact is that there is no single generic way to
store just any available or future object in the best possible way. But luckily
we don't even need it - all we need is a simple way to write a specific
persistence solution for any custom object, and now db4o provides this way
though a pluggable TypeHandler4/ITypeHandler4 interface:</p>

<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>configuration.registerTypeHandler(TypeHandlerPredicate, TypeHandler4);</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>configuration.RegisterTypeHandler(ITypeHandlerPredicate, ITypeHandler4);</code></p>

</p><p MadCap:conditions="Primary:net" /><p>In the method above TypeHandler4 interface provides methods that define how
an object is converted to a low-level byte-array and back and how it behaves in
a query:</p>

<p MadCap:conditions="Primary.Java">

<MadCap:snippetBlock src="../Resources/Snippets/TypeHandlers/TypeHandler4.java/TypeHandler4.java.flsnp" />
<MadCap:snippetBlock src="../Resources/Snippets/TypeHandlers/Comparable4.java/Comparable4.java.flsnp" />
</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<MadCap:snippetBlock src="../Resources/Snippets/TypeHandlers/ITypeHandler4.cs/ITypeHandler4.cs.flsnp" />
<MadCap:snippetBlock src="../Resources/Snippets/TypeHandlers/IComparable4.cs/IComparable4.cs.flsnp" />
</p><p MadCap:conditions="Primary:net" />

<p>TypeHandlerPredicate provides a #match method, which returns true for objects
that should be handled with the specified TypeHandler. </p>

<p>Type handler functionality is best explained on a <a href="typehandlers/custom_typehandler_example.htm"  >working example</a>.</p>

<p>Usecases and other benefits of the pluggable typehandler interface are
reviewed <a href="typehandlers/pluggable_typehandler_benefits.htm"  >here</a>.</p> 
     
    


        <p MadCap:conditions="Primary.Online">Download example code:</p>
        <p MadCap:conditions="Primary.Online">
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.VB.NET"><a href="typehandlers/typehandlervb.zip">VB.NET </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary..NET,Primary.c#"><a href="typehandlers/typehandlercs.zip">c# </a>
            </MadCap:conditionalText>
            <MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="typehandlers/typehandlerjava.zip">Java </a>
            </MadCap:conditionalText>
        </p>


</body></html>