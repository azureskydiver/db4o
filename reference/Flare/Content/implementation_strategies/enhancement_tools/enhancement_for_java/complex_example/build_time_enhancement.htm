<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="819" MadCap:lastWidth="940" MadCap:ignoredWords="RandomAccessFileAdapter;randomAccessFileAdapter;NonFlushingIoAdapter;nonFlushingIoAdapter;CachedIoAdapter;cachedIoAdapter;disableCommitRecovery;DisableCommitRecovery;extObjectContainer;setSemaphore;getName;SetSemaphore;typeof;LOCK_;objectContainer;getID;GetID;getPilot;getSignature;idenity;car1;car2;car3;UUID;defragment;startsWith;getPoints;StartsWith;ExtentType;oql;AllPilots;OQLQuery;persistenceManager;newQuery;IList;IComparer;ObjectSet;IObjectSet;comparer;ExtObjectContainer;IExtObjectContainer;VB;pilot1;name1;name2;peekPersisted;isCached;JDO;WeakReferences;VM;ClientConfiguration;IClientConfiguration;BatchMessages;NO_OF_OBJECTS;maxBatchQueueSize;MaxBatchQueueSize;listResult;MessageRecipient;ObjectServer;openServer;ObjectNotStorableException;s;clientserverJava;ServerConfiguration;clientserverCS;cs;clientserverVB;vb;config;databaseFileName;int;NativeSocketFactory;socketFactory;OpenClient;hostName;IObjectServer;OpenServer;IConfiguration;INativeSocketFactory;IObjectContainer;genkey;SSLcert;storepass;SecureSocketFactory;IMessageSender;setMessageRecipient;SetMessageRecipient;IMessageRecipient;processMessage;ProcessMessage;ByVal;UpdateServer;waitMilliSeconds;releaseSemaphore;ReleaseSemaphore;monitorObject;semaphoreName;switchToFile;fileName;SwitchToFile;switchToMainFile;SwitchToMainFile;switchs;isAlive;IsAlive;replicateDeletions;ReplicateDeletions;GetType;g;ReplicationEvent;VersionNumbers;providerA;objectsChangedSinceLastReplication;ProviderA;ObjectsChangedSinceLastReplication;hbm;ProviderSignature;MySignature;PeerSignature;ReplicationProvider;HibernateReplicationProvider;ReplicationProviders;m;typed_id;pi2763;longPart;ObjectReference;className;typedId;Uuid;uuid;drs_providers;is_my_sig;t';f';drs_history;provider_id;PK;drs_objects;class_name;varchar;one_to_one;ReplicationConfigurator;SessionFactory;sessionFactory;buildSessionFactory;openSession;beginTransaction;createCriteria;AbstractDb4oTestCase;Db4oFixture;_fixture;AbstractSoloDb4oFixture;AbstractClientServerDb4oFixture;IDb4oFixture;IQuery;NewQuery;retrieveOnlyInstance;RetrieveOnlyInstance;countOccurences;CountOccurences;foreach;Visitor4;Foreach;IVisitor4;obj;deleteAll;DeleteAll;ReflectClass;reflectClass;indexField;fieldName;IndexField;Config;setUp;SetUp;db4oSetupBeforeStore;db4oSetupAfterStore;Db4oSetupBeforeStore;Db4oSetupAfterStore;runSoloAndClientServer;RunSoloAndClientServer;runSolo;RunSolo;runClientServer;RunClientServer;CodeBlock;Db4oUnit;ICodeBlock;isTrue;msg;IsTrue;bool;Msg;areEqual;AreEqual;FrameworkTestCase;runTestAndExpect;expFailures;RunTestAndExpect;ITest;GetConfig;storedType;runtimeType;tAlias;resolveRuntimeName;resolveStoredName;storedPattern;runtimePattern;aliasing;QueryStarted;QueryFinished;QueryEventArgs;ObjectEventArgs;CancellableObjectEventArgs;CommitEventArgs;client2;client1;WaitForCompletion;args;AddHandler;forObjectContainer;ForObjectContainer;OnCreated;createdEvent;onEvent;Event4;ABC0001DEF;MustInherit;CountedObject;IncrementedId;queryStarted;queryFinished;QueryStats;q;executionTime;activationCount;storedClass;Foo;classname;storedClasses;StoredClasses;getStoredFields;GetStoredFields;storedField;getParentStoredClass;GetParentStoredClass;reflectWith;Db4oFactory;ReflectWith;self_get;self_set;LoggingReflector;IoAdapter;MyEncryptionAdapter;Io;Db4oEnhancerMSBuildTask;SensorPanel;GetOptions;UsingTask;AssemblyFile;OutputPath;TaskName;ItemGroup;Db4oEnhance;TargetPath;AfterBuild;AbstractAssemblyInstrumentation;IAssemblyInstrumentation;TAInstrumentation;tp;EnhancementExample;tacustom;Db4oPersistent;typedef;classTargetDir;jarTargetDir">
    <head><title>Build Time Enhancement	<link href="../../../../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" /><script type="text/javascript" src="../../../../Resources/Code/prettify.js"></script></title>
    </head>
    <body onload="prettyPrint()">
        <h1>Build Time Enhancement</h1>
        <p><font color="#990000">&#160;</font>
        </p>
        <p>For build-time enhancement you will need to put the
following jars into the lib folder of EnhancementExample project:</p>
        <ul>
            <li>bloat-1.0.jar</li>
            <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-classedit.jar</li>
            <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-java5.jar</li>
            <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-nqopt.jar</li>
            <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-taj.jar</li>
            <li>db4o-<MadCap:variable name="Primary.CurrentVersion" />-tools.jar</li>
            <li>pilot.jar</li>
            <li>tacustom.jar</li>
        </ul>
        <p>pilot.jar supplies Pilot and Id classes presented
<a href="model_classes.htm">before</a></p>
        <p>tacustom.jar  provides
an annotation-based class filter. Using this jar we can mark the classes that
should be enhanced with @Db4oPersistent annotation to filter them from the
other classes.</p>
        <p>You can use the following script to enhance your
classes:</p>
        <MadCap:snippetBlock src="../../../../Resources/Snippets/Build Time Enhancement/build.xml/build.xml.flsnp" />The core part of this script is inside the <i>db4o-instrument</i> task, which is imported by the first typedef instruction. (The second typedef imports the custom annotation class filter.) The <i>classTargetDir</i> and <i>jarTargetDir</i> attributes specify the target folders where instrumented class files and instrumented jar files should be created, respectively.<p>The nested <i>classpath</i> is just a normal Ant path type and should cover the full application classpath. In the example, we are using one single classpath for task definition and application for convenience - in a real project, these are better kept separate, of course. The nested <i>sources</i> FileSet specifies the location of the class files  to be instrumented. Similarly, the <i>jars</i> FileSet specifies the location of jar files to be instrumented. Both are optional (providing neither <i>sources</i> nor <i>jars</i> doesn't make much sense, of course). If one is left out, the corresponding target folder attribute is not required, either.</p><p>The remaining nested arguments specify the instrumentation steps to be processed. For Native Query optimization, there is no further configuration - it will simply try to instrument all Predicate implementations. Transparent Activation instrumentation allows to specify more fine-grained filters to select the classes to be instrumented. This can be Ant regular expression types or arbitrary custom <i>ClassFilters</i>. These are OR-ed together and used to further constrain the implicit filter provided by the <i>sources</i>/<i>jars</i> FileSets. In the example, we are constraining TA instrumentation to classes that are either annotated with the <i>@Db4oPersistent</i> annotation, or whose fully qualified name matches the given regexes. 
</p><p>After running the <i>enhance</i> target, the instrumented model classes should appear in the enhanced-bin folder, and an instrumented version of the pilot.jar should have been created in the enhanced-lib folder.</p><p>For rather straightforward projects you can alternatively use the <i>db4o-enhance</i> task variant that provides a default setting for joint NQ/TA instrumentation (but doesn't allow fine-grained configuration for the single instrumentation steps in return). This is demonstrated by the following build script for the same sample project. </p><MadCap:snippetBlock src="../../../../Resources/Snippets/Build Time Enhancement/build-simple.xml/build-simple.xml.flsnp" />/p&gt; 
         
        <p MadCap:conditions="Primary.Online">Download example code:</p><p MadCap:conditions="Primary.Online"><MadCap:conditionalText MadCap:conditions="Primary.Java"><a href="enhancementexamplejava.zip">Java </a></MadCap:conditionalText></p></body>
</html>