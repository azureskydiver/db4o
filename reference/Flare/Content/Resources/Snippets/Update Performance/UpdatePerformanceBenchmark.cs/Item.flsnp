<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.cs: Item
private void Update(Object item)
         {
            objectContainer.Store(item);
        }
        // end Update


        private void RunDifferentObjectsTest()
         {
            System.Console.WriteLine(&quot;Update test with different objects&quot;);
            int objectsToUpdate = 90;
            int updated = objectsToUpdate;

            InitDifferentObjectsTest();

            Clean();
            System.Console.WriteLine(&quot; - primitive object with int field&quot;);
            Open(Configure());
            StoreSimplest();

            IObjectSet result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    SimplestItem item = (SimplestItem)result.Next();
                    item._id = 1;
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with string field&quot;);
            Store();
            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    Item item = (Item)result.Next();
                    item._name = &quot;Updated&quot;;
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with StringBuilder field&quot;);
            StoreWithStringBuilder();

            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    ItemWithStringBuilder item = (ItemWithStringBuilder)result.Next();
                    item._name = new StringBuilder(&quot;Updated&quot;);
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with int array field&quot;);
            StoreWithArray();
            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    ItemWithArray item = (ItemWithArray)result.Next();
                    item._id = new int[]  { 1, 2, 3 };
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with ArrayList field&quot;);
            StoreWithArrayList();
            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    ItemWithArrayList item = (ItemWithArrayList)result.Next();
                    item._ids = new ArrayList();
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();
        }
        // end RunDifferentObjectsTest


        private void RunIndexTest()
         {
            System.Console.WriteLine(&quot;Update test for objects with and without indexed fields&quot;);

            int objectsToUpdate = 100;
            Init();
            System.Console.WriteLine(&quot;Updating &quot; + objectsToUpdate + &quot; of &quot; + _count + &quot; objects&quot;);
            Clean();
            Open(Configure());
            Store();
            UpdateItems(objectsToUpdate);
            Close();

            Clean();
            Init();
            System.Console.WriteLine(&quot;Updating &quot; + objectsToUpdate + &quot; of &quot; + _count + &quot; objects with indexed field&quot;);
            Open(ConfigureIndexTest());
            Store();
            UpdateItems(objectsToUpdate);
            Close();
        }
        // end RunIndexTest


        private void Init()
         {
            _count = 1000;
            _depth = 90;
            _isClientServer = false;

        }
        // end Init

        private void InitDifferentObjectsTest()
         {
            _count = 1000;
            _depth = 1;
            _isClientServer = false;

        }
        // end InitDifferentObjectsTest


        private void InitForClientServer()
         {
            _count = 1000;
            _depth = 90;
            _isClientServer = true;
            _host = &quot;localhost&quot;;
        }
        // end InitForClientServer

        private void InitForRamDriveTest()
         {
            _count = 30000;
            _depth = 1;
            _filePath = &quot;r:\\performance.db4o&quot;;
            _isClientServer = false;

        }
        // end InitForRamDriveTest

        private void InitForHardDriveTest()
         {
            _count = 10000;
            _depth = 3;
            _filePath = &quot;performance.db4o&quot;;
            _isClientServer = false;
        }
        // end InitForHardDriveTest

        private void InitForCommitTest()
         {
            _count = 10000;
            _commitInterval = 1000;
            _depth = 3;
            _isClientServer = false;
        }
        // end InitForCommitTest

        private void Clean()
         {
            File.Delete(_filePath);
        }
        // end Clean

        private IConfiguration Configure()
         {
            IConfiguration config = Db4oFactory.NewConfiguration();
            // using MemoryIoAdapter improves the performance 
            // by replacing the costly disk IO operations with 
            // memory access
            config.Io(new MemoryIoAdapter());
            return config;
        }
        // end Configure

        private IConfiguration ConfigureTP()
         {
            IConfiguration config = Db4oFactory.NewConfiguration();
            // With Transparent Persistence enabled only modified
            // objects are written to disk. This allows to achieve 
            // better performance
            config.ObjectClass(typeof(Item)).CascadeOnUpdate(true);
            return config;
        }
        // end ConfigureTP

        private IConfiguration ConfigureCascade()
         {
            IConfiguration config = Db4oFactory.NewConfiguration();
            // CascadeOnUpdate can be a performance-killer for 
            // deep object hierarchies
            config.ObjectClass(typeof(Item)).CascadeOnUpdate(true);
            return config;
        }
        // end ConfigureCascade

        private IConfiguration ConfigureIndexTest()
         {
            IConfiguration config = Db4oFactory.NewConfiguration();
            config.Io(new MemoryIoAdapter());
            config.ObjectClass(typeof(Item)).ObjectField(&quot;_name&quot;).Indexed(true);
            return config;
        }
        // end ConfigureIndexTest

        private IConfiguration ConfigureForCommitTest()
         {
            IConfiguration config = Db4oFactory.NewConfiguration();
            // the Commit information is physically written 
            // and in the correct order
            config.FlushFileBuffers(true);
            return config;
        }
        // end ConfigureForCommitTest

        private IConfiguration ConfigureClientServer()
         {
            IConfiguration config = Db4oFactory.NewConfiguration();
            config.ClientServer().SingleThreadedClient(true);
            return config;
        }
        // end ConfigureClientServer

        private IConfiguration ConfigureDriveTest()
         {
            IConfiguration config = Db4oFactory.NewConfiguration();
            config.FlushFileBuffers(true);
            return config;
        }
        // end ConfigureDriveTest

        private void Store()
         {
            StartTimer();
            for (int i = 0; i &lt; _count; i++)
             {
                Item item = new Item(&quot;level&quot; + i, null);
                for (int j = 1; j &lt; _depth; j++)
                 {
                    item = new Item(&quot;level&quot; + i + &quot;/&quot; + j, item);
                }
                objectContainer.Store(item);
            }
            objectContainer.Commit();
            StopTimer(&quot;Store &quot; + TotalObjects() + &quot; objects&quot;);
        }
        // end Store

        private void StoreActivatableItems()
         {
            StartTimer();
            for (int i = 0; i &lt; _count; i++)
             {
                ActivatableItem item = new ActivatableItem(&quot;level&quot; + i, null);
                for (int j = 1; j &lt; _depth; j++)
                 {
                    item = new ActivatableItem(&quot;level&quot; + i + &quot;/&quot; + j, item);
                }
                objectContainer.Store(item);
            }
            objectContainer.Commit();
            StopTimer(&quot;Store &quot; + TotalObjects() + &quot; objects&quot;);
        }
        // end StoreActivatableItems

        private void StoreInherited()
         {
            StartTimer();
            for (int i = 0; i &lt; _count; i++)
             {
                ItemDerived item = new ItemDerived(&quot;level&quot; + i, null);
                for (int j = 1; j &lt; _depth; j++)
                 {
                    item = new ItemDerived(&quot;level&quot; + i + &quot;/&quot; + j, item);
                }
                objectContainer.Store(item);
            }
            objectContainer.Commit();
            StopTimer(&quot;Store &quot; + TotalObjects() + &quot; objects&quot;);
        }
        // end StoreInherited


        private void StoreWithStringBuilder()
         {
            StartTimer();
            for (int i = 0; i &lt; _count; i++)
             {
                ItemWithStringBuilder item = new ItemWithStringBuilder(new StringBuilder(&quot;level&quot; + i), null);
                for (int j = 1; j &lt; _depth; j++)
                 {
                    item = new ItemWithStringBuilder(new StringBuilder(&quot;level&quot; + i + &quot;/&quot; + j), item);
                }
                objectContainer.Store(item);
            }
            objectContainer.Commit();
            StopTimer(&quot;Store &quot; + TotalObjects() + &quot; objects&quot;);
        }
        // end StoreWithStringBuilder

        private void StoreSimplest()
         {
            StartTimer();
            for (int i = 0; i &lt; _count; i++)
             {
                SimplestItem item = new SimplestItem(i, null);
                for (int j = 1; j &lt; _depth; j++)
                 {
                    item = new SimplestItem(i, item);
                }
                objectContainer.Store(item);
            }
            objectContainer.Commit();
            StopTimer(&quot;Store &quot; + TotalObjects() + &quot; objects&quot;);
        }
        // end StoreSimplest

        private void StoreWithArray()
         {
            StartTimer();
            int[] array = new int[]  { 1, 2, 3, 4 };
            for (int i = 0; i &lt; _count; i++)
             {
                int[] id = new int[]  { 1, 2, 3, 4 };
                ItemWithArray item = new ItemWithArray(id, null);
                for (int j = 1; j &lt; _depth; j++)
                 {
                    int[] id1 = new int[]  { 1, 2, 3, 4 };
                    item = new ItemWithArray(id1, item);
                }
                objectContainer.Store(item);
            }
            objectContainer.Commit();
            StopTimer(&quot;Store &quot; + TotalObjects() + &quot; objects&quot;);
        }
        // end StoreWithArray

        private void StoreWithArrayList()
         {
            StartTimer();
            ArrayList idList = new ArrayList();
            idList.Add(1);
            idList.Add(2);
            idList.Add(3);
            idList.Add(4);
            for (int i = 0; i &lt; _count; i++)
             {
                ArrayList ids = new ArrayList();
                ids.AddRange(idList);
                ItemWithArrayList item = new ItemWithArrayList(ids, null);
                for (int j = 1; j &lt; _depth; j++)
                 {
                    ArrayList ids1 = new ArrayList();
                    ids1.AddRange(idList);
                    item = new ItemWithArrayList(ids1, item);
                }
                objectContainer.Store(item);
            }
            objectContainer.Commit();
            StopTimer(&quot;Store &quot; + TotalObjects() + &quot; objects&quot;);
        }
        // end StoreWithArrayList

        private int TotalObjects()
         {
            return _count * _depth;
        }
        // end TotalObjects

        private void Open(IConfiguration config)
         {
            if (_isClientServer)
             {
                int port = TCP ? PORT : 0;
                string user = &quot;db4o&quot;;
                string password = user;
                objectServer = Db4oFactory.OpenServer(_filePath, port);
                objectServer.GrantAccess(user, password);
                objectContainer = TCP ? Db4oFactory.OpenClient(_host, port, user,
                        password) : objectServer.OpenClient();
            }
            else
             {
                objectContainer = Db4oFactory.OpenFile(config, _filePath);
            }
        }
        // end Open

        private void Close()
         {
            objectContainer.Close();
            if (_isClientServer)
             {
                objectServer.Close();
            }
        }
        //end Close

        private void StartTimer()
         {
            _startTime = DateTime.Now.Ticks;
        }
        // end StartTimer

        private void StopTimer(string message)
         {
            long stop = DateTime.Now.Ticks;
            long duration = stop - _startTime;
            System.Console.WriteLine(message + &quot;: &quot; + duration + &quot; ticks&quot;);
        }
        // end StopTimer

        public class Item
         {

            public string _name;
            public Item _child;

            public Item()
             {

            }

            public Item(string name, Item child)
             {
                _name = name;
                _child = child;
            }
        }</pre>    </body></html>