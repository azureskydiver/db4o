<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">MaintenanceQueue.java
/** Copyright (C) 2007  Versant Inc.  http://www.db4o.com */

package enhancement.model;

import java.util.*;

import tacustom.*;

@Db4oPersistent

public class MaintenanceQueue&lt;Item&gt;  {

  public MaintenanceQueue&lt;Item&gt; _next;
  
  private Item _value;

  public MaintenanceQueue(Item value)  {
    _value = value;
  }

  public static MaintenanceQueue&lt;Integer&gt; newList(int depth)  {
    if (depth == 0)  {
      return null;
    }
    MaintenanceQueue&lt;Integer&gt; head = new MaintenanceQueue&lt;Integer&gt;(depth);
    head._next = newList(depth - 1);
    return head;
  }

  /** *//**
   * Overrides this method to assert that &lt;code&gt;other&lt;/code&gt; is only
   * activated with depth 1.
   */
  @SuppressWarnings(&quot;unchecked&quot;)
  public boolean equals(Object other)  {
    return ((MaintenanceQueue&lt;Item&gt;) other)._next == null;
  }

  public boolean hasNext()  {
    return _next != null;
  }

  public MaintenanceQueue&lt;Item&gt; next()  {
    return _next;
  }

  public int size()  {
    if(_next == null)  {
      return 1;
    }
    return _next.size() + 1;
  }
  
  public Item get(int idx)  {
    if(idx == 0)  {
      return value();
    }
    return _next.get(idx - 1);
  }

  public Item value()  {
    return _value;
  }
  
  public void add(Item item)  {
    if(_next != null)  {
      _next.add(item);
    }
    else  {
      _next = new MaintenanceQueue&lt;Item&gt;(item);
    }
  }
  
  public Iterator&lt;Item&gt; iterator()  {
    return new LinkedListIterator&lt;Item&gt;(this);
  }
  
  public String toString()  {
    return &quot;LinkedList: &quot; + _value;
  }
  
  public static &lt;Item&gt; MaintenanceQueue&lt;Item&gt; add(MaintenanceQueue&lt;Item&gt; list, Item item)  {
    if(list == null)  {
      return new MaintenanceQueue&lt;Item&gt;(item);
    }
    list.add(item);
    return list;
  }

  private final static class LinkedListIterator&lt;Item&gt; implements Iterator&lt;Item&gt;  {
    private MaintenanceQueue&lt;Item&gt; _current;
    
    public LinkedListIterator(MaintenanceQueue&lt;Item&gt; list)  {
      _current = list;
    }

    public boolean hasNext()  {
      return _current != null;
    }

    public Item next()  {
      Item item = _current.value();
      _current  = _current.next();
      return item;
    }

    public void remove()  {
      throw new UnsupportedOperationException();
    }
  }

  public static &lt;Item&gt; Iterator&lt;Item&gt; iterator(MaintenanceQueue&lt;Item&gt; list)  {
    return (list == null ? new LinkedListIterator&lt;Item&gt;(null) : list.iterator());
  }

}</pre>    </body></html>