<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.java: runDifferentObjectsTest
private void runDifferentObjectsTest() {
      System.out.println(&quot;Update test with different objects&quot;);
      int objectsToUpdate = 90;
      int updated = objectsToUpdate;
          
      initDifferentObjectsTest();
      
      clean();
      System.out.println(&quot; - primitive object with int field&quot;);
      open(configure());
      storeSimplest();
      
    ObjectSet result = objectContainer.queryByExample(null);
    startTimer();
    for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        SimplestItem item = (SimplestItem)result.next();
        item._id = 1;
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
      close();
    
      clean();
      open(configure());
      System.out.println(&quot; - object with String field&quot;);
      store();
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        Item item = (Item)result.next();
        item._name = &quot;Updated&quot;;
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
      close();
      
      clean();
      open(configure());
      System.out.println(&quot; - object with StringBuffer field&quot;);
      storeWithStringBuffer();
      
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        ItemWithStringBuffer item = (ItemWithStringBuffer)result.next();
        item._name = new StringBuffer(&quot;Updated&quot;);
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
      close();
      
      clean();
      open(configure());
      System.out.println(&quot; - object with int array field&quot;);
      storeWithArray();
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        ItemWithArray item = (ItemWithArray)result.next();
        item._id = new int[] {1,2,3};
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
      close();
      
      clean();
      open(configure());
      System.out.println(&quot; - object with ArrayList field&quot;);
      storeWithArrayList();
      updated = objectsToUpdate;
      result = objectContainer.queryByExample(null);
      startTimer();
      for (int i = 0; i &lt; objectsToUpdate; i ++) {
      if (result.hasNext()) {
        ItemWithArrayList item = (ItemWithArrayList)result.next();
        item._ids = new ArrayList();
          update(item);  
      } else  {
        updated = i;
        break;
      }
    }
      stopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
      close();
    }</pre>    </body></html>