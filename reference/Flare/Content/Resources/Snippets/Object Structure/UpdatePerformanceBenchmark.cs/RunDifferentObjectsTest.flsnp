<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">UpdatePerformanceBenchmark.cs: RunDifferentObjectsTest
private void RunDifferentObjectsTest()
         {
            System.Console.WriteLine(&quot;Update test with different objects&quot;);
            int objectsToUpdate = 90;
            int updated = objectsToUpdate;

            InitDifferentObjectsTest();

            Clean();
            System.Console.WriteLine(&quot; - primitive object with int field&quot;);
            Open(Configure());
            StoreSimplest();

            IObjectSet result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    SimplestItem item = (SimplestItem)result.Next();
                    item._id = 1;
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with string field&quot;);
            Store();
            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    Item item = (Item)result.Next();
                    item._name = &quot;Updated&quot;;
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with StringBuilder field&quot;);
            StoreWithStringBuilder();

            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    ItemWithStringBuilder item = (ItemWithStringBuilder)result.Next();
                    item._name = new StringBuilder(&quot;Updated&quot;);
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with int array field&quot;);
            StoreWithArray();
            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    ItemWithArray item = (ItemWithArray)result.Next();
                    item._id = new int[]  { 1, 2, 3 };
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine(&quot; - object with ArrayList field&quot;);
            StoreWithArrayList();
            updated = objectsToUpdate;
            result = objectContainer.QueryByExample(null);
            StartTimer();
            for (int i = 0; i &lt; objectsToUpdate; i++)
             {
                if (result.HasNext())
                 {
                    ItemWithArrayList item = (ItemWithArrayList)result.Next();
                    item._ids = new ArrayList();
                    Update(item);
                }
                else
                 {
                    updated = i;
                    break;
                }
            }
            StopTimer(&quot;Updated &quot; + updated + &quot; items&quot;);
            Close();
        }</pre>    </body></html>