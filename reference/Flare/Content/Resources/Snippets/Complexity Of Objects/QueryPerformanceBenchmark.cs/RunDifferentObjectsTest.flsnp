<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.cs: RunDifferentObjectsTest
private void RunDifferentObjectsTest()
         {

            Init();
            System.Console.WriteLine(&quot;Storing &quot; + _count + &quot; objects with &quot; + _depth
                    + &quot; levels of embedded objects:&quot;);

            Clean();
            System.Console.WriteLine();
            System.Console.WriteLine(&quot; - primitive object with int field&quot;);
            Open(Configure());
            StoreSimplest();
            objectContainer.Ext().Purge();
            Close();
            Open(Configure());
            StartTimer();
            IQuery query = objectContainer.Query();
            query.Constrain(typeof(SimplestItem));
            query.Descend(&quot;_id&quot;).Constrain(1);
            IList result = query.Execute();
            SimplestItem simplestItem = (SimplestItem)result[0];
            StopTimer(&quot;Querying SimplestItem: &quot; + simplestItem._id);
            Close();

            Open(Configure());
            System.Console.WriteLine();
            System.Console.WriteLine(&quot; - object with string field&quot;);
            Store();
            objectContainer.Ext().Purge();
            Close();
            Open(Configure());
            StartTimer();
            query = objectContainer.Query();
            query.Constrain(typeof(Item));
            query.Descend(&quot;_name&quot;).Constrain(&quot;level1/2&quot;);
            result = query.Execute();
            Item item = (Item)result[0];
            StopTimer(&quot;Querying object with string field: &quot; + item._name);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine();
            System.Console.WriteLine(&quot; - object with StringBuilder field&quot;);
            StoreWithStringBuffer();
            objectContainer.Ext().Purge();
            Close();
            Open(Configure());
            StartTimer();
            query = objectContainer.Query();
            query.Constrain(typeof(ItemWithStringBuilder));
            query.Descend(&quot;_name&quot;).Constrain(new StringBuilder(&quot;level1/2&quot;));
            result = query.Execute();
            ItemWithStringBuilder itemWithSB = (ItemWithStringBuilder)result[0];
            StopTimer(&quot;Querying object with StringBuilder field: &quot;
                    + itemWithSB._name);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine();
            System.Console.WriteLine(&quot; - object with int array field&quot;);
            StoreWithArray();
            objectContainer.Ext().Purge();
            Close();
            Open(Configure());
            StartTimer();
            query = objectContainer.Query();
            query.Constrain(typeof(ItemWithArray));
            IQuery idQuery = query.Descend(&quot;_id&quot;);
            idQuery.Constrain(1);
            idQuery.Constrain(2);
            idQuery.Constrain(3);
            idQuery.Constrain(4);
            result = query.Execute();

            ItemWithArray itemWithArray = (ItemWithArray)result[0];
            StopTimer(&quot;Querying object with Array field: [&quot; + itemWithArray._id[0]
                    + &quot;, &quot; + +itemWithArray._id[1] + &quot;, &quot; + +itemWithArray._id[2]
                    + &quot;, &quot; + +itemWithArray._id[0] + &quot;]&quot;);
            Close();

            Clean();
            Open(Configure());
            System.Console.WriteLine();
            System.Console.WriteLine(&quot; - object with ArrayList field&quot;);
            StoreWithArrayList();
            objectContainer.Ext().Purge();
            Close();
            Open(Configure());
            StartTimer();
            query = objectContainer.Query();
            query.Constrain(typeof(ItemWithArrayList));
            query.Descend(&quot;_ids&quot;).Constrain(1).Contains();
            result = query.Execute();
            ItemWithArrayList itemWithArrayList = (ItemWithArrayList)result[0];
            StopTimer(&quot;Querying object with ArrayList field: &quot;
                    + itemWithArrayList._ids.ToString());
            Close();

        }</pre>    </body></html>