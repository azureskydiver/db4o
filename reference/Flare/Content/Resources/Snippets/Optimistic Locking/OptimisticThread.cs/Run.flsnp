<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="838" MadCap:lastWidth="790">
    <head>
    </head>
    <body>
        <pre class="prettyprint" xml:space="preserve">OptimisticThread.cs: Run
public void Run()
         {
            try  {
        IList&lt;Pilot&gt; result = _container.Query&lt;Pilot&gt;();
                foreach (Pilot pilot in result)
                 {
                    
                
                /**//* We will need to set a lock to make sure that the 
           * object version corresponds to the object retrieved.
           * (Prevent other client committing changes
           * at the time between object retrieval and version
           * retrieval )
           */
                if (!_container.Ext().SetSemaphore("LOCK_" + 
_container.Ext().GetID(pilot), 3000))
                 {
                    Console.WriteLine("Error. The object is locked");
                    continue;
                }
                _container.Ext().Refresh(pilot, Int32.MaxValue);
          long objVersion = _container.Ext().GetObjectInfo(pilot).GetVersion();
                _container.Ext().ReleaseSemaphore("LOCK_" + 
_container.Ext().GetID(pilot));
          /**//* save object version into _idVersions collection
           * This will be needed to make sure that the version
           * originally retrieved is the same in the database 
           * at the time of modification
           */
          long id = _container.Ext().GetID(pilot);
          _idVersions.Add(id, objVersion);
          
              Console.WriteLine(Name + "Updating pilot: " + 
pilot+ " version: "+objVersion);
              pilot.AddPoints(1);
              _updateSuccess = false;
              RandomWait();
              if (!_container.Ext().SetSemaphore("LOCK_"+
_container.Ext().GetID(pilot), 3000)) {
                Console.WriteLine("Error. The object is locked");
                continue;
              }
                _container.Store(pilot);
              /**//* The changes should be committed to be 
               * visible to the other clients
               */
              _container.Commit();
              _container.Ext().ReleaseSemaphore("LOCK_"+
_container.Ext().GetID(pilot));
              if (_updateSuccess) {
                Console.WriteLine(Name + "Updated pilot: " + pilot);
              }
                Console.WriteLine();
              /**//* The object version is not valid after commit
               * - should be removed
               */
              _idVersions.Remove(id);
        }
          
      } finally  {
        _container.Close();
      }
       }</pre>
    </body>
</html>