<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">OptimisticThread.java: run
public void run()  {
      try  {
        List&lt;Pilot&gt; result = _container.query(Pilot.class);
        for (Pilot pilot: result) {
          /**//* We will need to set a lock to make sure that the 
           * object version corresponds to the object retrieved.
           * (Prevent other client committing changes
           * at the time between object retrieval and version
           * retrieval )
           */
          if (!_container.ext().setSemaphore(&quot;LOCK_&quot;+_container.ext().getID(pilot), 3000)) {
                System.out.println(&quot;Error. The object is locked&quot;);
                continue;
              }
          long objVersion = _container.ext().getObjectInfo(pilot).getVersion();
          _container.ext().refresh(pilot, Integer.MAX_VALUE);
          _container.ext().releaseSemaphore(&quot;LOCK_&quot;+_container.ext().getID(pilot));
          
          /**//* save object version into _idVersions collection
           * This will be needed to make sure that the version
           * originally retrieved is the same in the database 
           * at the time of modification
           */
          long id = _container.ext().getID(pilot);
          _idVersions.put(id, objVersion);
          
              System.out.println(getName() + &quot;Updating pilot: &quot; + pilot+ &quot; version: &quot;+objVersion);
              pilot.addPoints(1);
              _updateSuccess = false;
              randomWait();
              if (!_container.ext().setSemaphore(&quot;LOCK_&quot;+_container.ext().getID(pilot), 3000)) {
                System.out.println(&quot;Error. The object is locked&quot;);
                continue;
              }
              _container.store(pilot);
              /**//* The changes should be committed to be 
               * visible to the other clients
               */
              _container.commit();
              _container.ext().releaseSemaphore(&quot;LOCK_&quot;+_container.ext().getID(pilot));
              if (_updateSuccess) {
                System.out.println(getName() + &quot;Updated pilot: &quot; + pilot);
              }
              System.out.println();
              /**//* The object version is not valid after commit
               * - should be removed
               */
              _idVersions.remove(id);
        }
          
      } finally  {
        _container.close();
      }
    }</pre>    </body></html>