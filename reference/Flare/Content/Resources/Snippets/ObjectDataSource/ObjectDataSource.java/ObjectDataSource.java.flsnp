<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">ObjectDataSource.java
/**//* Copyright (C) 2007 Versant Inc. http://www.db4o.com */
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Iterator;
import java.util.List;

import net.sf.jasperreports.engine.JRDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRField;

/** *//**
 * ObjectDataSource class is used to extract object field values for the report.
 * &lt;br&gt;&lt;br&gt;
 * usage:&lt;br&gt;
 * List pilots =  &lt;br&gt;
 * ObjectDataSource dataSource = new ObjectDataSource(pilots);&lt;br&gt;  
 * In the report (*.jrxml) you will need to define fields. For example: &lt;br&gt;
 *   &lt;field name=&quot;Name&quot; class=&quot;java.lang.String&quot;/&gt;&lt;br&gt;
 *   where field name should correspond to your getter method:&lt;br&gt;
 *   &quot;Name&quot; - for getName()&lt;br&gt;
 *   &quot;Id&quot; - for getId()&lt;br&gt; 
 *
 */
public class ObjectDataSource implements JRDataSource  {

  private Iterator iterator;

  private Object currentValue;

  public ObjectDataSource(List list)  {
    this.iterator = list.iterator();
  }
  // end ObjectDataSource

  public Object getFieldValue(JRField field) throws JRException  {
    Object value = null;
    try  {
      // getter method signature is assembled from &quot;get&quot; + field name 
      // as specified in the report
      Method fieldAccessor = currentValue.getClass().getMethod(&quot;get&quot; + field.getName(), null);
      value = fieldAccessor.invoke(currentValue, null);
    } catch (IllegalAccessException iae)  {
      iae.printStackTrace();
    } catch (InvocationTargetException ite)  {
      ite.printStackTrace();
    } catch (NoSuchMethodException nsme)  {
      nsme.printStackTrace();
    }
    return value;
  }
  // end getFieldValue

  public boolean next() throws JRException  {
    currentValue = iterator.hasNext() ? iterator.next() : null;
    return (currentValue != null);
  }
  // end next
  
}</pre>    </body></html>