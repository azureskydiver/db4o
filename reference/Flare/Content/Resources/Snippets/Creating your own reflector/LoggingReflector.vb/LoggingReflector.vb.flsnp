<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="838" MadCap:lastWidth="750">
    <head>
    </head>
    <body>
        <pre class="prettyprint lang-vb" xml:space="preserve">LoggingReflector.vb
' Copyright (C) 2007   Versant Inc.   http://www.db4o.com 

Imports System

Imports Db4objects.Db4o.Internal
Imports Db4objects.Db4o.Reflect
Imports Db4objects.Db4o.Reflect.Net

Namespace Db4objectsNamespace Db4objects.Db4odoc.Reflections
    Public Class LoggingReflectorClass LoggingReflector
        Implements Db4objects.Db4o.Reflect.IReflector
        Protected _parent As Db4objects.Db4o.Reflect.IReflector

        Private _array As Db4objects.Db4o.Reflect.IReflectArray

        Private _config As Db4objects.Db4o.Reflect.IReflectorConfiguration

        Public Overridable Function Array() As _ 
Db4objects.Db4o.Reflect.IReflectArray Implements IReflector.Array
            If _array Is Nothing Then
                _array = New Db4objects.Db4o.Reflect.Net.NetArray(Parent())
            End If
            Return _array
        End Function

        Public Overridable Function DeepClone(ByVal obj _ 
As Object) As Object Implements IReflector.DeepClone
            Return New NetReflector()
        End Function

        Public Overridable Function ForClass(ByVal forType _
 As System.Type) As Db4objects.Db4o.Reflect.IReflectClass _ 
Implemplements  IReflector.ForClass
            Dim rc As Db4objects.Db4o.Reflect.IReflectClass = Nothing
            Dim underlyingType As System.Type = GetUnderlyingType(forType)
            If underlyingType.IsPrimitive AndAlso Not _ 
Db4objects.Db4o.Internal.NullableArrayHandling.UseOldNetHandling() Then
                rc = CreateClass(forType)
            End If
            rc = CreateClass(underlyingType)
            Console.WriteLine("ForClass: " + forType.ToString() + " -&gt; " + _ 
(IIf(rc Is Nothing, "", rc.GetName())))
            Return rc
        End Function

        Protected Overridable Function CreateClass(ByVal type As Type) _
 As Db4objects.Db4o.Reflect.IReflectClass
            If type Is Nothing Then
                Return Nothing
            End If
            Dim netReflector As New NetReflector()
            netReflector.Configuration(_config)
            Return New Db4objects.Db4o.Reflect.Net.NetClass(Parent(), _ 
netReflector, type)
        End Function

        Private Shared Function GetUnderlyingType(ByVal type As Type) _
	 As Type
            If type Is Nothing Then
                Return Nothing
            End If
            Dim underlyingType As Type = Nullable.GetUnderlyingType(type)
            If underlyingType IsNot Nothing Then
                Return underlyingType
            End If
            Return type
        End Function

        Public Overridable Function ForName(ByVal className As String) As _ 
			Db4objects.Db4o.Reflect.IReflectClass Implements IReflector.ForName
            Dim rc As Db4objects.Db4o.Reflect.IReflectClass = Nothing
            Try
                Dim type As Type = ReflectPlatform.ForName(className)
                If type Is Nothing Then
                    Return Nothing
                End If
                rc = ForClass(type)
                Console.WriteLine("ForName: " + className + " -&gt; " + _ 
			(IIf(rc Is Nothing, "", rc.GetName())))
            Catch
            End Try
            Return rc
        End Function

        Public Overridable Function ForObject(ByVal a_object As Object) _
			 As Db4objects.Db4o.Reflect.IReflectClass _ 
Implements IReflector.ForObject
            If a_object Is Nothing Then
                Return Nothing
            End If
            Dim rc As Db4objects.Db4o.Reflect.IReflectClass = _ 
Parent().ForClass(a_object.[GetType]())
            Console.WriteLine("ForObject:" + a_object.ToString() + " -&gt; " + _ 
(IIf(rc Is Nothing, "", rc.GetName())))
            Return rc
        End Function

        Public Overridable Function IsCollection(ByVal candidate _ 
			As Db4objects.Db4o.Reflect.IReflectClass) As Boolean _ 
Implements IReflector.IsCollection
            Dim result As Boolean = False
            If candidate.IsArray() Then
               result = False
            End If
            Dim netClass As NetClass = TryCast(candidate, NetClass)
            If netClass Is Nothing Then
                result = False
            End If
            result = GetType(System.Collections.ICollection).IsAssignableFrom _ 
(netClass.GetNetType())
            Console.WriteLine("Type " + candidate.GetName() + " is Collection " + _ 
result.ToString())
            Return result
        End Function

        Public Overridable Function MethodCallsSupported() As Boolean
            Return True
        End Function

        Public Shared Function ToMeta(ByVal reflector As _ 
			Db4objects.Db4o.Reflect.IReflector, ByVal _ 
clazz As System.Type()) As Db4objects.Db4o.Reflect.IReflectClass()
            Dim claxx As Db4objects.Db4o.Reflect.IReflectClass() = Nothing
            If clazz IsNot Nothing Then
                claxx = New Db4objects.Db4o.Reflect.IReflectClass(clazz.Length - 1) {}
                For i As Integer = 0 To clazz.Length - 1
                    If clazz(i) IsNot Nothing Then
                        claxx(i) = reflector.ForClass(clazz(i))
                    End If
                Next
            End If
            Return claxx
        End Function

        Public Shared Function ToNative()Function ToNative(ByVal claxx As _ 
			Db4objects.Db4o.Reflect.IReflectClass()) As System.Type()
            Dim clazz As System.Type() = Nothing
            If claxx IsNot Nothing Then
                clazz = New System.Type(claxx.Length - 1) {}
                For i As Integer = 0 To claxx.Length - 1
                    If claxx(i) IsNot Nothing Then
                        Dim reflectClass As IReflectClass = claxx(i)
                        System.Console.WriteLine("ToNative: " + claxx(i).GetName())
                        clazz(i) = ToNative(reflectClass)
                    End If
                Next
            End If
            Return clazz
        End Function

        Public Shared Function ToNative()Function ToNative(ByVal reflectClass _ 
As IReflectClass) As Type
            System.Console.WriteLine("ToNative: " + reflectClass.GetName())
            Return DirectCast(reflectClass.GetDelegate(), _ 
Db4objects.Db4o.Reflect.Net.NetClass).GetNetType()
        End Function

        Public Overridable Sub SetParent()Sub SetParent(ByVal reflector As _ 
IReflector) Implements IReflector.SetParent
            _parent = reflector
        End Sub

        Public Overridable Sub Configuration()Sub Configuration(ByVal config As _ 
Db4objects.Db4o.Reflect.IReflectorConfiguration) Implements IReflector.Configuration
            _config = config
        End Sub

        Public Overridable Function Configuration()Function Configuration() _ 
As Db4objects.Db4o.Reflect.IReflectorConfiguration
            Return _config
        End Function

        Public Overridable Function NullValue()Function NullValue(ByVal _ 
clazz As IReflectClass) As Object
            Return Platform4.NullValue(ToNative(clazz))
        End Function

        Private Function Parent()Function Parent() As IReflector
            If _parent Is Nothing Then
                Return Me
            End If

            Return _parent
        End Function

    End Class
End Namespace</pre>
    </body>
</html>