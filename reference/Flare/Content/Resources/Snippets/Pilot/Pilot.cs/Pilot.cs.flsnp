<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">Pilot.cs
/**//* Copyright (C) 2004 - 2008 Versant Inc. http://www.db4o.com */
using Db4objects.Db4o;
using Db4objects.Db4o.Activation;
using Db4objects.Db4o.TA;

namespace Db4objects.Db4odoc.TP.Rollback
 {
    public class Pilot : IActivatable
     {
        private string _name;
        private Id _id;

        [System.NonSerialized]
        IActivator _activator;

        public Pilot(string name, int id)
         {
            _name = name;
            _id = new Id(id);
        }

        // Bind the class to an object container
        public void Bind(IActivator activator)
         {
            if (_activator == activator)
             {
                return;
            }
            if (activator != null &amp;&amp; null != _activator)
             {
                throw new System.InvalidOperationException();
            }
            _activator = activator;
        }

        // activate the object fields
        public void Activate(ActivationPurpose purpose)
         {
            if (_activator == null)
                return;
            _activator.Activate(purpose);
        }

        public Id Id
         {
            get
             {
                Activate(ActivationPurpose.Read);
                return _id;
            }
            set
             {
                Activate(ActivationPurpose.Write);
                _id = value;
            }
        }

        public string Name
         {
            get
             {
                // even simple string needs to be activated
                Activate(ActivationPurpose.Read);
                return _name;
            }
            set
             {
                Activate(ActivationPurpose.Write);
                _name = value;
            }
        }

        public override string ToString()
         {
            return string.Format(&quot;{0}[{1}]&quot;,Name, Id) ;
        }
    }

}</pre>    </body></html>