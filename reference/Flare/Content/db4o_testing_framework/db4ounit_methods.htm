<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Db4ounit Methods	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
        <h1>Db4ounit Methods</h1>

<p>Let's
look through the basic API , which will help you to build your own test. This
document is not a complete API reference and its intention is to give you a
general idea of the methods usage and availability.</p>

<a name="AbstractDb4oTestCase"></a><h2>AbstractDb4oTestCase</h2>

<p>AbstractDb4oTestCase is a base class for creating test
cases.</p>

<p>private transient Db4oFixture _fixture; - determines an
environment for the test execution and gives an access to the test database.
The environment can be local (derived from AbstractSoloDb4oFixture) or
client/server (AbstractClientServerDb4oFixture). </p>

<p>You can always access the fixture from your test class using</p>

<p MadCap:conditions="Primary.Java">

<p>Java: </p>

<p><code>public void fixture(Db4oFixture fixture)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET: </p>

<p><code>public virtual void
Fixture(IDb4oFixture fixture)
</code></p>

</p><p MadCap:conditions="Primary:net" />

<a name="Methods for working with a database:"></a><h3>Methods for working with a database:</h3>
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public ExtObjectContainer db()</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public virtual Db4objects.Db4o.Ext.IExtObjectContainer Db()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Returns an instanse of object container for the current
environment.</p>
 
<p MadCap:conditions="Primary.Java">
Java:

<p><code>protected void reopen() throws Exception</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void Reopen()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This function will close the database and open it again. It
also performs an implicit commit on close.</p>
 







<p MadCap:conditions="Primary.Java">
<p>Java:</p>
<p><code>protected Reflector reflector()</code></p>
</p><p MadCap:conditions="Primary:java" />
<p MadCap:conditions="Primary.Print">
<p>.NET:</p>
<p><code>protected virtual Db4objects.Db4o.Reflect.IReflector
Reflector()</code></p>
</p><p MadCap:conditions="Primary:net" />

<p>Returns current reflector.</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:
</p>

<p><code>protected Transaction trans()</code> </p>

<p><code>protected Transaction systemTrans()</code> </p>

<p><code>protected Transaction newTransaction()</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual Db4objects.Db4o.Transaction Trans()</code></p>

<p><code>protected virtual Db4objects.Db4o.Transaction SystemTrans()</code></p>

<p><code>protected virtual Db4objects.Db4o.Transaction
NewTransaction()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Methods to get transaction object for the current environment.</p>

<a name="Various methods to work with persistent objects:"></a><h3>Various methods to work with persistent objects:</h3>

<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected Query newQuery()</code></p>

<p><code>protected Query newQuery(Class clazz)</code></p>

<p><code>protected Query newQuery(Transaction transaction, Class
clazz)</code> </p>

<p><code>protected Query newQuery(Transaction transaction)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual Db4objects.Db4o.Query.IQuery NewQuery()</code></p>

<p><code>protected virtual Db4objects.Db4o.Query.IQuery
NewQuery(System.Type clazz)</code></p>


<p><code>protected virtual Db4objects.Db4o.Query.IQuery
NewQuery(Db4objects.Db4o.Transaction transaction, System.Type clazz)</code></p>


<p><code>protected virtual Db4objects.Db4o.Query.IQuery
NewQuery(Db4objects.Db4o.Transaction transaction)</code></p>
<p>[/filter] </p>

<p>Create a new query object.</p>
 
<p>[filter=java]</p>

<p>Java:</p>

<p><code>protected Object retrieveOnlyInstance(Class clazz)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual object RetrieveOnlyInstance(System.Type
clazz)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Checks if only one object of a class is stored in the
database</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected int countOccurences(Class clazz)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual int CountOccurences(System.Type clazz)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Returns the amount of objects of the specified class in the
database.</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected void foreach(Class clazz, Visitor4 visitor)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void Foreach(System.Type clazz,
Db4objects.Db4o.Foundation.IVisitor4 visitor)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method goes through the ObjectSet of the specified
class objects in the database calling Visitor4.visit() method. Visitor4 is an
interface specifiing a visit method:</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public void visit(Object obj);</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>void Visit(object obj);</code></p>

</p><p MadCap:conditions="Primary:net" />

<p MadCap:conditions="Primary.Java">
 
<p>Java:</p>

<p><code>protected void deleteAll(Class clazz)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void DeleteAll(System.Type clazz)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Deletes all the instances of the specified class in the
database.</p>

 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected ReflectClass reflectClass(Class clazz)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p>Returns a ReflectClass instance for the specified class.</p>

 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected void indexField(Configuration config,Class clazz,
String fieldName)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void
IndexField(Db4objects.Db4o.Config.IConfiguration config, System.Type clazz, string fieldName)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Adds field index into specified configuration.</p>
 
<p MadCap:conditions="Primary.Java">
Java:
<p><code>public final void setUp() throws Exception</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET</p>

<p><code>public void SetUp()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method:</p>

<ul>
<li>deletes
     the used database;</li>

<li>configures
     and opens a new one (see Configure method). </li>

<li>Calls
     db4oSetupBeforeStore</li>

<li>Calls
     store()</li>

<li>Commits
     and reopens the database</li>

<li>Calls
     db4oSetupAfterStore</li>
</ul>

 
<p>More details about the mentioned above methods:</p>

<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected void configure(Configuration config)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void
Configure(Db4objects.Db4o.Config.IConfiguration config)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Use this method to create your custom configuration for a
test. Config parameter is the current default test configuration, which can be
modified.</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected void db4oSetupBeforeStore() throws Exception</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void Db4oSetupBeforeStore()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method is a placeholder for any custom setup actions
that need to be taken before filling up the database with objects.</p>

<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected void store() throws Exception {}</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void Store()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method is supplied for creating and storing the
objects, which you are going to use for your test.</p>

 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>protected void db4oSetupAfterStore() throws Exception</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>protected virtual void Db4oSetupAfterStore()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method is a placeholder for any custom setup actions
that need to be taken after the database is filled up with objects.</p>

 
<a name="Methods for running tests:"></a><h3>Methods for running tests:</h3>

<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public int runSoloAndClientServer()</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public virtual int RunSoloAndClientServer()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Will run the test in both modes</p>

 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public int runSolo()</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public virtual int RunSolo()</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Only local mode.</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:
</p>

<p><code>public int runClientServer()</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public virtual int RunClientServer()</code></p>

</p><p MadCap:conditions="Primary:net" />

<a name="Db4ounit.Assert"></a><h2>Db4ounit.Assert</h2>

<p>Db4ounit.Assert
class - provides a variety of methods for controlling code execution. Some of
the methods are presented below. For more information please refer to the
source code.</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public
static void expect(Class exception, CodeBlock block)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public
static void Expect(System.Type exception, Db4oUnit.ICodeBlock block)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method
runs a specified method (block parameter) and throws an exception if the block
runs without any exception.</p>
 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public
static void isTrue(boolean condition)</code></p>

<p><code>public
static void isTrue(boolean condition, String msg)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public
static void IsTrue(bool condition)</code></p>

<p><code>public
static void IsTrue(bool condition, string msg)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method
checks the condition and throws an exception if the condition is false. Msg
parameter can be used to customize exception message.</p>

 
<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public
static void areEqual(Object expected, Object actual)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public
static void AreEqual(object expected, object actual)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>Checks if
the supplied parameters are equal and throws an exception otherwise.</p>

<p>Similar methods are provided for null, lesser, greater and
other checkings, please refer to Assert class code for full information.</p>
 
<a name="FrameworkTestCase"></a><h2>FrameworkTestCase</h2>

<p>FrameworkTestCase class provides methods to run your test
suite and check if its results.</p>

<p MadCap:conditions="Primary.Java">

<p>Java:</p>

<p><code>public static void runTestAndExpect(Test test,int
expFailures)</code></p>

</p><p MadCap:conditions="Primary:java" />

<p MadCap:conditions="Primary.Print">

<p>.NET:</p>

<p><code>public static void RunTestAndExpect(Db4oUnit.ITest test, int
expFailures)</code></p>

</p><p MadCap:conditions="Primary:net" />

<p>This method will run the test specified and throw an
exception if the number of expected failures (expFailures parameter) is not
equal to the number of experienced failures.</p>

 
<p>For more information please refer to the source code of FrameworkTestCase class.</p>    
  </body></html>