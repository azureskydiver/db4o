<?xml version="1.0" encoding="utf-8"?><html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
<head><title>Sharpen Annotations	<link href="../Resources/Stylesheets/prettify.css" type="text/css" rel="stylesheet" />		<script type="text/javascript" src="../Resources/Code/prettify.js"></script></title></head>
<body onload="prettyPrint()">
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Sharpen Annotations</h1><p> </p><p>Sharpen annotations decorate java source code and are used
to notify sharpener about how the code should be processed and converted. Annotations
can be used to specify how a code element should be converted (for example
class to enum), to skip conversion of some code elements, to rename classes, to
change visibility etc.</p>

<p>The following table shows existing annotations, their
meaning and examples.</p>

<table border="1" cellpadding="0" cellspacing="0">
 <tr>
  <td valign="top">
  <p><b>Annotation</b></p>
  </td>
  <td valign="top">
  <p><b>Meaning</b></p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.enum</p>
  </td>
  <td valign="top">
  <p>Mark java class to be processed as a .NET enum</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.rename</p>
  </td>
  <td valign="top">
  <p>Specifies a different name for the converted type, takes a
  single name argument. For example:</p>
  <p>@sharpen.rename Db4oFactory</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.private</p>
  </td>
  <td valign="top">
  <p>Specifies that the element must be declared private in the
  converted file, though it can be not private in the java source:</p>
  <p>* @sharpen.private</p>
  <p>*/</p>
  <p>public List4 _first;</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.internal</p>
  </td>
  <td valign="top">
  <p>Specifies that the element must be declared internal in
  the converted file:</p>
  <p>/**</p>
  <p> * @sharpen.internal</p>
  <p>*/</p>
  <p>public abstract int size();</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.event</p>
  </td>
  <td valign="top">
  <p>Links an event to its arguments. For example:</p>
  <p>Java:</p>
  <p>/**</p>
  <p> * @sharpen.event
  com.db4o.events.QueryEventArgs</p>
  <p> */</p>
  <p>public Event4 queryStarted();</p>
  <p>is converted to:</p>
  <p>c#:</p>
  <p>public delegate void QueryEventHandler(object sender,
  Db4objects.Db4o.Events.<b>QueryEventArgs</b></p>
  <p>                         args);</p>
  <p>.......</p>
  <p>event Db4objects.Db4o.Events.QueryEventHandler
  QueryStarted;</p>
  
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.event.add</p>
  </td>
  <td valign="top">
  <p>Marks the method as an event subscription method. Invocations to the method in the form &lt;target&gt;.method(&lt;argument&gt;) will be replaced by the c# event subscription idiom: &lt;target&gt; += &lt;argument&gt; </p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.event.onAdd</p>
  </td>
  <td valign="top">
  <p>Valid for event declaration only (SHARPEN_EVENT). Configures the method to be invoked whenever a new event handler is subscribed to the event. </p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.if</p>
  </td>
  <td valign="top">
  <p>Add #if &lt;expression&gt;#endif declaration:</p>
  <p>@sharpen.if &lt;expression&gt;</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.property</p>
  </td>
  <td valign="top">
  <p>Convert a java method as a property:</p>
  <p>/**</p>
  <p> * @sharpen.property</p>
  <p>*/</p>
  <p>public abstract int size();</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.indexer</p>
  </td>
  <td valign="top">
  <p>Marks an element as an indexer property</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.ignore</p>
  </td>
  <td valign="top">
  <p>Skip the element while converting</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.ignore.extends</p>
  </td>
  <td valign="top">
  <p>Ignore the extends clause in Java class definition</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.ignore.implements</p>
  </td>
  <td valign="top">
  <p>Ignore the implements clause in Java class definition</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.extends</p>
  </td>
  <td valign="top">
  <p>Adds an extends clause to the converted class definition.
  For example:</p>
  <p>Java:</p>
  <p>/**</p>
  <p>* @sharpen.extends System.Collections.IList</p>
  <p>*/</p>
  <p>public interface ObjectSet {...</p>
  <p>converts to</p>
  <p>c#:</p>
  <p>public interface IObjectSet : System.Collections.IList</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.partial</p>
  </td>
  <td valign="top">
  <p>Marks the converted class as partial</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.remove</p>
  </td>
  <td valign="top">
  <p>Marks a method invocation that should be removed</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>@sharpen.struct</p>
  </td>
  <td valign="top">
  <p>Marks class to be converted as c# struct</p>
  </td>
 </tr>
</table>



</div>
    </div>
    
  </body></html>
