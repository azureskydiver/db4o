.n
.a MetaInf ..
.1 db4o meta-information ..

.2 Accessing db4o meta-information ..
Db4o provides an access to the database meta-information through its extended ._
object container interface (ExtObjectContainer).
Within the object database meta-schema is represented by classes and their ._
fields. To access their meta-information db4o provides special interfaces:
- StoredClass
- StoredField
The following ExtObjectContainer methods give you access to the StoredClass.
.c ExtObjectContainer#storedClass(clazz) ..
returns StoredClass for the specified clazz, which can be specified as:
- a fully qualified classname;
- a Class object;
- any object to be used as a template.
.c ExtObjectContainer#storedClasses() ..
returns an array of all StoredClass meta-information objects.
.s com.db4odoc.f1.metainf.MetaInfExample#setObjects -out ..
.s com.db4odoc.f1.metainf.MetaInfExample#getMetaObjects ..

.2 StoredClass and StoredField interfaces ..
Let's look closer at the class meta-information interfaces.
They look quite similar to reflection API, but unlike reflection there is no information ._
about methods and constructors.
You can only use StoredClass to get the class's fields:
.c StoredClass#getStoredFields() ..
returns all stored fields of this stored class.
.c StoredClass#storedField(name, type) ..
returns an existing stored field of this stored class.
You can also use this interface to explore classes hierarchy.
.c StoredClass#getParentStoredClass ..
returns the parent of the class.

StoredField interface gives you access to various meta-field information, such as ._
field name, field type. It also provides some helpful methods for manipulating ._
fields accepting their object as a variable (see db4o API for more information).
.s com.db4odoc.f1.metainf.MetaInfExample#getMetaObjectsInfo ..
