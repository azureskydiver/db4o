.n
.a ios ..
.1 IO Adapter ..

.2 The concept of pluggable FileIO ..
Db4o input/output implementation comes as a pluggable module. It means that you can ._
write your own IO system based on IoAdapter class.
Pluggable IO Adapter has control over the following:
-	place and method of storing a database file;
-	the form of the stored file (plain, encrypted);
-	additional actions that are taken at read,write,close,open events.
Some of the popular implementations of IoAdapter:
-	encryption IoAdapter: database stream is encrypted-decrypted upon read-write operations;
-	native IoAdapter: uses native system API for file access (WinAPI for example);
-	memory IoAdapter: keeps database in RAM instead of hard drive;
-	IoAdapter using several physical locations to store a database;
-	debug IoAdapter: outputs various debugging information to the specified output stream.
You can look at the db4o source to see some of these implementations (search for classes ._
inheriting from IoAdapter).
By default db4o uses RandomAccessFileAdapter. You can install another IoAdapter with a ._
single call:
.c Db4o.configure().io(new SpecificIoAdapter()) ..
Please, note: this call should be issued before opening of a database file. IoAdapter can be ._
changed only while the database is closed.
For a test, let's try to create debugging IoAdapter, which will log all the information about its ._
actions to the output stream:
.s com.db4odoc.f1.ios.LoggingAdapter ..
Now let's test how it works:
.s com.db4odoc.f1.ios.IOExample#testLoggingAdapter -out ..
The output can be used for debugging purposes.


.2 MemoryIoAdapter ..
One of the built-in db4o IoAdapters is MemoryIoAdapter. This adapter keeps the whole database ._
in RAM instead of a hard-drive. Obviously such in-memory database has both advantages ._
and disadvantages:
Pros:
- it is a lot faster, as no disc access is necessary.
Cons:
- it only works, if the database fits into RAM;
- all the data can be lost in case of a system failure.
You can achieve the best results combining the usage of MemoryIoAdapter with the normal ._
file adapter. Let's look, how MemoryIoAdapter should be used in your application.
First of all MemoryIoAdapter should be configured. The API gives you control over memory ._
consumption with
.c MemoryIoAdapter#growBy(length) ..
method. Length defines the amount of bytes in memory that should be allocated, when no ._
more free slots are found within the allocated file. Large value (>100,000) will assure the ._
best performance; small value (100) will keep the memory consumption at the lowest level. ._
The default setting is 10,000.
MemoryIoAdaptor supplies methods to exchange data with the database from the filesystem.
.c MemoryIoAdapter#put(filename, byte[]) ..
This method allows you to put the contents of the stored database file (byte[]) into the memory ._
database. 
The opposite method:
.c MemoryIoAdapter#get(filename) ..
returns the updated byte[] array of the database in memory, which can be saved to disc as a ._
normal database file.
The filename can be used for all further access (#openFile, #openServer methods) like ._
normal file name. Make sure that you close the database file on the disc after reading its contents ._
into memory and writing it back.
The configured adapter should be assigned as db4o IO system:
.c Db4o.configure().io(MemoryIoAdapter) ..
Let's create sample database on the disc:
.s com.db4odoc.f1.ios.IOExample#setObjects -out ..
Now we can read the database into the memory file and work in the memory using ._
MemoryIoAdapter:
.s com.db4odoc.f1.ios.IOExample#getObjectsInMem ..
Well, the changes are made and written to the disc. Let's check, if all the data are in place. ._
We will need to switch back to the normal RandomAccessFileAdapter:
.s com.db4odoc.f1.ios.IOExample#getObjects ..
So, switching between disc and memory database is quite easy. It can be used to ._
increase performance on certain operations. More flexibility can be reached writing ._
your own IoAdapter implementation.

 

