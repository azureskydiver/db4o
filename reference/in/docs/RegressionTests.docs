.n
.a RegressionTests ..
.1 Regression tests ..

Regression testing is a useful practice of retesting modified software system to ensure that:
-	all bugs have been fixed 
-	no other previously working functions have failed as a result of the reparations 
-	newly added features have not created problems with previous versions of the software.
Regression tests can considerably improve the quality of the software, but writing them is a ._
long and labour-intensive process.

.2 The built-in db4o regression tests ..
Db4o includes a fairly comprehensive suite of regression tests to help prevent ._
errors from creeping into the code over time.  Tests can also serve as a feature ._
documentation.
.e RegressionTestsRun ..

.2 Testing options ..
The main method can be run from: 
.c com.db4o.test.AllTests#main  ..
Initially the main method will run all the regression tests available. You can also choose to ._
run a single test. To do this, modify the AllTests method to inherit from AllTestsConfSingle ._
instead of AllTestsConfAll. 
In AllTestsConfSingle simply enter the name of your test class to be returned by ._
the tests() method  :
.? java
.c     public Class[] tests(){
        return new Class[] {
            SimplestPossible.class,
    	};
    }
..  ..?
.? net 
.c internal Type[] TESTS
		{
			get
			{
				ArrayList tests = new ArrayList();
				tests.Add(typeof(SimplestPossible));
				return (Type[]) tests.ToArray(typeof (Type));
			}
		}
..  ..?
.? mono 
.c internal Type[] TESTS
		{
			get
			{
				ArrayList tests = new ArrayList();
				tests.Add(typeof(SimplestPossible));
				return (Type[]) tests.ToArray(typeof (Type));
			}                                                           
		}
..  ..?
You can specify command-line parameters to modify test-suite behaviour:
1) "*"        -  results with an Exception if some of the tests fail.
2) "-solo" - the tests are run in stand-alone mode
3) "-cs"    -  the tests are run in client-server mode
4) "-full"   -  combination of 2) and 3)
By default the tests are run in full mode.
Other configuration parameters are found in AllTestsConfAll or AllTestsConfSingle classes ._
and can be modified in code.
.? java Test   ..?   .? net Tester  ..?  .? mono Tester  ..?  class provides you with the special API which ._
you can use to write your own test cases. The API provides methods:
-	results validation (ensure, ensureEquals, ensureOccurrences),;
-	messages output (error, log, logAll, statistics)
-	working on database objects (forEach, getOne, query, store, occurrences, deleteAllInstances, deleteObjectSet, deleteAll, delete)
-	database methods (open, reopen, rollback, objectContainer, end, defragment, commit, close)
-	client-server operations (openClient, reOpenServer, isClientServer, server, commitSync, end, currentServer)
-	file operations (fileLength)

Let's look at an example of a very simple test class: 
.? java
.c public class SimplestPossible { 
		public String name; 
		public void storeOne() { 
			name = "sp"; 
		} 
		public void testOne() { 
			Test.ensure(name.equals("sp")); 
	} 
} 
..
..?
.? net
.c public class SimplestPossible {
      
       public SimplestPossible() : base() {
       }

       public SimplestPossible(string name) : base() {
           this.name = name;
       }

      public String name;
      
      public void StoreOne() {
         name = "sp";
      }
      
      public void TestOne() {
         Tester.Ensure(name.Equals("sp"));
      }
   } .. ..?
.? mono
.c public class SimplestPossible {
      
       public SimplestPossible() : base() {
       }

       public SimplestPossible(string name) : base() {
           this.name = name;
       }

      public String name;
      
      public void StoreOne() {
         name = "sp";
      }
      
      public void TestOne() {
         Tester.Ensure(name.Equals("sp"));
      }
   } .. ..?
The db4o testing environment will automatically detect methods in your test classes and run ._
them using reflection in the following order: 
1. public void configure() 
2. public void storeOne() 
3. public void store()  - is called only if no storeOne() method has been found 
4. public void testOne() 
5. public void testXxx() – is called if no testOne() method has been found
It is recommended to have a look through all the test classes that come with the distribution. ._
This will not only help you to write your own simple test classes, but also will give you a better ._
overview of many db4o features.
Testing collection is growing all the time together with the process of db4o development. You ._
are welcome to particioate in db4o development sharing your test cases: ._
.l http://developer.db4o.com/ProjectSpaces/view.aspx/ ..
