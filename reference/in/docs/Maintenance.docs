.n
.a Maintenance ..
.1 Maintenance ..

db4o is designed to minimize maintenance tasks to the absolute ._
minimum. The stored class schema adapts to the application ._
automatically as it is being developed. db4o "understands" ._
the addition and removal of fields which allows it to continue to ._
work against modified classes without having to reorganize the ._
database file. Internally db4o works with a superset of all class ._
versions previously used.

However there are two recommended maintenance tasks, that can ._
both be fully automated remotely with API calls:
.a Defragment ..
.2 Defragment ..
Defragment creates a new database file and copies all objects ._
from the current database file to the new database file. All ._
indexes are recreated. The resulting database file will be ._
smaller and faster. 

com.db4o.tools.Defragment is  ._
.b only supplied as source code ..  to encourage embedding ._
custom maintenance tasks on objects.


.2 Backup ..

db4o supplies hot backup functionality to backup single-user ._
databases and client-server databases while they are running.

The respective API calls for backups are:
.c objectContainer.ext().backup(String path) ..
.c objectServer.ext().backup(String path) ..

The methods can be called while an ObjectContainer/ObjectServer ._
is open and they will execute with low priority in a dedicated ._
thread, with as little impact on processing performance as possible.

It is recommended to backup the current development state of an ._
application (ideally source code and bytecode) along with the ._
database files since the old code can make it easier to work ._
with the old data.
