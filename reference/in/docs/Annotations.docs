.n
.a Annotations ..

.? java
.1 Using Annotations ..
JDK1.5 platform introduced new metadata feature ._
called .l http://java.sun.com/j2se/1.5.0/docs/guide/language/annotations.html  annotations ..  . Annotations allow ._
programmers to decorate Java code with their attributes, which can ._
be used afterwards for automatic code generation, documentation, ._
security checking etc. Annotations do not directly affect program ._
semantics, but they do affect the way programs are treated by tools and ._
libraries, which can in turn affect the semantics of the running program.
Annotations can make your code cleaner, protecting you from common ._
errors (using deprecated API, typos in overriding methods) and taking part of you work.
You can use annotations to affect db4o behavior. At present we provide only one annotation:
.c @Indexed ..
This annotation can be applied to class fields 
.c public class Car {
           @Indexed
           private String model;
           Pilot pilot;
           . . .
           } ..
and its functionality is equivalent to the db4o configurations setting: 
.c Db4o.configure().objectClass(clazz).objectField("fieldName").indexed(true) ..
..?
.? net
.1 Using Attributes ..
.NET Attributes provide the means for a developer to add meta-data that describes, or annotates ._
 specific elements of code such as classes, methods, properties, etc. At compile time the ._
resulting metadata is placed into the Portable Executable (PE)file along with the ._
Microsoft Intermediate Language (MSIL). Once metadata is in the PE other .NET programs ._
may access it using the .NET Reflection API.
Attributes can be used to document classes at design time, specify runtime information ._
(such as the name of an XML field to be used when serializing information from the class), ._
and even dictate runtime behavior (such as whether the class should automatically ._
participate in a transaction). 
You can use attributes with db4o to configure how db4o will process your ._
classes. At present we provide only one attribute:
.c [Indexed] ..
This attribute can be applied to class fields 

.c public class Car {
           [Indexed]
           private string _model;
           Pilot _pilot;
           . . .
           } ..

and its functionality is equivalent to the db4o configuration setting: 
.c Db4o.Configure().ObjectClass(clazz).ObjectField("fieldName").Indexed(true) ..

..?
.? mono
.1 Using Attributes ..
.NET Attributes provide the means for a developer to add meta-data that describes, or annotates ._
 specific elements of code such as classes, methods, properties, etc. At compile time the ._
resulting metadata is placed into the Portable Executable (PE)file along with the ._
Microsoft Intermediate Language (MSIL). Once metadata is in the PE other .NET programs ._
may access it using the .NET Reflection API.
Attributes can be used to document classes at design time, specify runtime information ._
(such as the name of an XML field to be used when serializing information from the class), ._
and even dictate runtime behavior (such as whether the class should automatically ._
participate in a transaction). 
You can use attributes with db4o to configure how db4o will process your ._
classes. At present we provide only one attribute:
.c [Indexed] ..
This attribute can be applied to class fields 

.c public class Car {
           [Indexed]
           private string _model;
           Pilot _pilot;
           . . .
           } ..

and its functionality is equivalent to the db4o configuration setting: 
.c Db4o.Configure().ObjectClass(clazz).ObjectField("fieldName").Indexed(true) ..

..?
