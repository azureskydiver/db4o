<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="913" MadCap:lastWidth="756">
  <head />
  <body>
    <h1>Load Time Enhancement</h1>
    <p>Its possible to enhance you classes at runtime. This mechanism uses the Java class loading mechanism. Instead of using the regular class-loader, the application needs to use a db4o classloader which enhanced the classes when loaded.</p>
    <p>The enable load time enhancement, you need to create a special launcher for your application. This launcher sets up the class-loader and then starts the application.</p>
    <p>The db4o instrumenting classloader has following configuration options available:</p>
    <ul>
      <li>A <i>ClassFilter</i> specifies which classes should be instrumented. In the example, we are using a filter that will only accept classes whose fully qualified name starts with a given prefix. The instrumentation API already comes with a variety of other filter implementations, and it's easy to create custom filters.</li>
      <li>A sequence of <i>ClassEdits</i>. A ClassEdit is a single instrumentation step. In the example, we are applying two steps: First, we preoptimize all Native Query Predicates, then we instrument for Transparent Activation. Note that the order of steps is significant: Switching the order would leave the generated NQ optimization code unaware of TA. The db4otools package provides a convenience launcher with a hardwired sequence for combined NQ/TA instrumentation.</li>
      <li>The <i>classpath</i> for the instrumented classes, represented by a sequence of URLs. This must contain all classes "reachable" from the classes to be instrumented - the easiest way probably is to provide the full application class path here. The classes to be instrumented need not be listed here, they are implicitly added to this classpath, anyway.  </li>
    </ul>
    <p>A start of your application might look like this:</p>
    <MadCap:snippetBlock src="../../../../Resources/Snippets/Load Time Enhancement/EnhancerStarter.java/main.flsnp" />
    <p>Try this code now - if everything is correct you will see
that the objects are getting activated as they are requested. NQ info also
should say that the queries are preoptimized.</p>
    <p>Note that for load time instrumentation to work, the application code has to make sure db4o operates on the appropriate classloader for the persistent model classes.</p>
    <p>This means that you need to set explicitly the class-loader for the reflection. Set the thread-context class loader in the db4o configuration. </p>
    <MadCap:snippetBlock src="../../../../CodeExamples/strategies/classloading/ClassloadingStrategies-Use-the-context-classloader.all.flsnp" />
    <p>Don't forget that you still need to <a href="../../../../basics/activation_concept/transparent_activation_framework.htm">enable transparent activation</a> / <a href="../../../../basics/update_concept/transparent_persistence.htm">persistence</a> in order to use it.</p>
    <p style="font-weight: bold;"> </p>
  </body>
</html>