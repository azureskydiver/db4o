<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="494" MadCap:lastWidth="468">
    <head>
    </head>
    <body>
        <h1>
            <MadCap:keyword term="Concurrency" />Concurrency and db4o</h1>
        <p>How should you deal with concurrent access to a db4o database? This chapter gives an overview and a guidelines for dealing with that.</p>
        <h2>Do Not Share an Object Containers Across Threads</h2>
        <p>The are some basic rules which you should never break, otherwise strange effects due to race-condition can happen:</p>
        <p><b>Never share a object-container instance across threads</b>, nor share the data-objects across threads. That will almost certainly create race-conditions. The reason is that when you change objects, while other threads read them, you will get inconsistent views on the state of your data model. </p>
        <p>Now how do you deal with concurrent operations?&#160;Well you need to use some kind of synchronization strategy. </p>
        <h2>Use a Object Containers per Unit of Work</h2>
        <h2>Sharing an Object Container</h2>
        <p>In a desktop/mobile application you usually want to have one consistent view on your data model. Therefore it makes sense to use the same object container in the whole application. That ensures that we always get the same objects throughout the whole application. As long as you don't load of work to different threads, everything is fine. </p>
        <p>However as soon as you start to do manipulations on the data model in different threads you need to synchronize these operations.    <![CDATA[ ]]><MadCap:xref href="concurrency/share_object_container_threads.htm" target="" title="" alt="">See "Share a Object Container Across Threads"</MadCap:xref></p>
        <h2>&#160;</h2>
    </body>
</html>