<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="1604" MadCap:lastWidth="714">
    <head>
    </head>
    <body>
        <h1>Deleting Objects</h1>
        <p>Deleting object is always a delicate process. Deleting the wrong object can be catastrophic. Here are some best practices for deleting objects.</p>
        <h2>Delete Flag</h2>
        <p>When a end user deletes a object it's often better to use a deleted-flag instead of actually deleting the data. This has the advantage that you can undo the delete operation at any time. Also you don't break the model in cases where the user deleted the wrong object. However it has also some disadvantages. You need to honor the deleted-flag in your queries. </p>
        <p>You can set the delete flag in a <a href="../advanced_topics/callbacks.htm">callback</a> and use the regular db4o delete operation:</p>
        <MadCap:snippetBlock src="../CodeExamples/practises/deletion/DeletionStrategies-The-delete-event-handler.all.flsnp" />
        <MadCap:snippetBlock src="../CodeExamples/practises/deletion/DeletionStrategies-Deletion-Flag.all.flsnp" />
        <p>However you need to filter the deleted objects in every query. </p>
        <p>&#160;</p>
        <h2>Be Very Careful</h2>
        <p>db4o doesn't support any referential integrity. When you delete a object and there's still a reference to that object this reference is set to null. This means if you delete a object you may break the consistency of you're object model. </p>
        <p>This means also that you need to implement any consistency check yourself on top of db4o. You can use db4o <a href="../advanced_topics/callbacks.htm">callbacks</a> for doing so. </p>
        <h2>Use Cascade Deletion Wisely</h2>
        <p>You can configure db4o the cascade delete referenced objects. You can configure that for <a href="../configuration/objectclass/cascade_on_delete.htm">certain type</a> or <a href="../configuration/objectfield_configuration.htm#CascadeDelete">certain fields</a>. As said there's no referential integrity checks for db4o, so you have to extreamly conscious where to use this feature. It makes sense to configure cascade deletion for composition roots, where you are sure that the children cannot be referenced from another location. In all other places it's a bad idea most of the time. </p>
        <p> </p>
    </body>
</html>