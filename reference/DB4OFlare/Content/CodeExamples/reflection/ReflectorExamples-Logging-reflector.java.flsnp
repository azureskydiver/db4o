<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="157" MadCap:lastWidth="1148">
    <body>
	<div class="codesnippet" MadCap:conditions="Primary.Java">
        <pre class="prettyprint" xml:space="preserve"><span style="color:Blue;">class</span> LoggerReflector <span style="color:Blue;">implements</span> Reflector{
    <span style="color:Blue;">private</span> <span style="color:Blue;">final</span> Reflector readReflector;

    <span style="color:Blue;">public</span> LoggerReflector() {
        <span style="color:Blue;">this</span>(<span style="color:Blue;">new</span> JdkReflector(Thread.currentThread().getContextClassLoader()));
    }

    <span style="color:Blue;">public</span> LoggerReflector(Reflector readReflector) {
        <span style="color:Blue;">this</span>.readReflector = readReflector;
    }

    @Override
    <span style="color:Blue;">public</span> <span style="color:Blue;">void</span> configuration(ReflectorConfiguration reflectorConfiguration) {
        readReflector.configuration(reflectorConfiguration);
    }

    @Override
    <span style="color:Blue;">public</span> ReflectArray array() {
        <span style="color:Blue;">return</span> readReflector.array();
    }

    @Override
    <span style="color:Blue;">public</span> ReflectClass forClass(Class aClass) {
        System.out.println(<span style="color:#A31515;">&quot;Reflector.forClass(&quot;</span>+aClass+<span style="color:#A31515;">&quot;)&quot;</span>);
        <span style="color:Blue;">return</span> readReflector.forClass(aClass);
    }

    @Override
    <span style="color:Blue;">public</span> ReflectClass forName(String className) {
        System.out.println(<span style="color:#A31515;">&quot;Reflector.forName(&quot;</span>+className+<span style="color:#A31515;">&quot;)&quot;</span>);
        <span style="color:Blue;">return</span> readReflector.forName(className);
    }

    @Override
    <span style="color:Blue;">public</span> ReflectClass forObject(Object o) {
        System.out.println(<span style="color:#A31515;">&quot;Reflector.forObject(&quot;</span>+o+<span style="color:#A31515;">&quot;)&quot;</span>);
        <span style="color:Blue;">return</span> readReflector.forObject(o);
    }

    @Override
    <span style="color:Blue;">public</span> <span style="color:Blue;">boolean</span> isCollection(ReflectClass reflectClass) {
        <span style="color:Blue;">return</span> readReflector.isCollection(reflectClass);
    }

    @Override
    <span style="color:Blue;">public</span> <span style="color:Blue;">void</span> setParent(Reflector reflector) {
        readReflector.setParent(reflector);
    }

    @Override
    <span style="color:Blue;">public</span> Object deepClone(Object o) {
        <span style="color:Blue;">return</span> <span style="color:Blue;">new</span> LoggerReflector((Reflector) readReflector.deepClone(o));
    }
}</pre>
		<div class="codesnippet-meta">
			ReflectorExamples.java: Logging reflector
			<div class="codedownload">
				<a href="Example-db4odoc-reflection-java.zip" class="codedownload" MadCap:conditions="Primary.Online">Download Code</a>
			</div>
			<div class="codedownload copylink-marker" MadCap:conditions="Primary.Online"><a href="#copy">Copy Code</a></div>
		</div>
	</div>

    </body>
</html>