<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">SensorPanelTA.cs
/** Copyright (C) 2004 - 2007 Versant Inc. http://www.db4o.com */
using Db4objects.Db4o;
using Db4objects.Db4o.Activation;
using Db4objects.Db4o.TA;

namespace Db4ojects.Db4odoc.TAExamples
 {
    public class SensorPanelTA /**//*must implement Activatable for TA*/: IActivatable
     {
        private object _sensor;

        private SensorPanelTA _next;

        /**//*activator registered for this class*/
        [System.NonSerialized]
        IActivator _activator;

        public SensorPanelTA()
         {
            // default constructor for instantiation
        }

        public SensorPanelTA(int value)
         {
            _sensor = value;
        }

        /**//*Bind the class to the specified object container, create the activator*/
        public void Bind(IActivator activator)
         {
            if (_activator == activator)
             {
                return;
            }
            if (activator != null &amp;&amp; null != _activator)
             {
                throw new System.InvalidOperationException();
            }
            _activator = activator;
        }

        /**//*Call the registered activator to activate the next level,
         * the activator remembers the objects that were already 
         * activated and won't activate them twice. 
         */
        public void Activate(ActivationPurpose purpose)
         {
            if (_activator == null)
                return;
            _activator.Activate(purpose);
        }

        public SensorPanelTA Next
         {
            get
             {
                /**//*activate direct members*/
                Activate(ActivationPurpose.Read);
                return _next;
            }
        }

        public object Sensor
         {
            get
             {
                /**//*activate direct members*/
                Activate(ActivationPurpose.Read);
                return _sensor;
            }
        }

        public SensorPanelTA CreateList(int length)
         {
            return CreateList(length, 1);
        }

        public SensorPanelTA CreateList(int length, int first)
         {
            int val = first;
            SensorPanelTA root = NewElement(first);
            SensorPanelTA list = root;
            while (--length &gt; 0)
             {
                list._next = NewElement(++val);
                list = list.Next;
            }
            return root;
        }

        protected SensorPanelTA NewElement(int value)
         {
            return new SensorPanelTA(value);
        }

        public override string ToString()
         {
            return &quot;Sensor #&quot; + Sensor;
        }
    }

}</pre>    </body></html>