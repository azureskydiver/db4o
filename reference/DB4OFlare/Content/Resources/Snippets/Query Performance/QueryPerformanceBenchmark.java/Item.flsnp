<?xml version="1.0" encoding="utf-8"?> <html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="2" MadCap:lastHeight="309" MadCap:lastWidth="1029">    <head>    </head>    <body>        <pre class="prettyprint" xml:space="preserve">QueryPerformanceBenchmark.java: Item
//
    System.out.println(&quot;Native Query:&quot;);
    startTimer();
    List&lt;Item&gt; result = objectContainer.query(new Predicate&lt;Item&gt;()  {
      public boolean match(Item item)  {
        return item._name.equals(&quot;level1/1&quot;);
      }
    });
    item = result.queryByExample(0);
    stopTimer(&quot;Select 1 object NQ: &quot; + item._name);
    close();
    
    //
    open(configureUnoptimizedNQ());
    System.out.println(&quot;Native Query Unoptimized:&quot;);
    startTimer();
    result = objectContainer.query(new Predicate&lt;Item&gt;()  {
      public boolean match(Item item)  {
       return item._name.equals(&quot;level1/1&quot;);
      }
    });
    item = result.queryByExample(0);
    stopTimer(&quot;Select 1 object NQ: &quot; + item._name);

    close();
  }

  // end runDifferentQueriesTest

  
  private void runRamDiskTest()  {

    initForHardDriveTest();
    clean();
    System.out.println(&quot;Storing &quot; + _count + &quot; objects of depth &quot; + _depth
        + &quot; on a hard drive:&quot;);
    open(configureRamDrive());
    store();
    close();
    open(configureRamDrive());
    startTimer();
    Query query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/1&quot;);
    Item item = (Item) query.execute().next();
    stopTimer(&quot;Select 1 object: &quot; + item._name);
    close();

    initForRamDriveTest();
    clean();
    System.out.println(&quot;Storing &quot; + _count + &quot; objects of depth &quot; + _depth
        + &quot; on a RAM disk:&quot;);
    open(configureRamDrive());
    store();
    close();
    open(configureRamDrive());
    startTimer();
    query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/1&quot;);
    item = (Item) query.execute().next();
    stopTimer(&quot;Select 1 object: &quot; + item._name);
    close();
  }

  // end runRamDiskTest

  private void runClientServerTest()  {

    initForClientServer();
    clean();
    System.out.println(&quot;Storing &quot; + _count + &quot; objects of depth &quot; + _depth
        + &quot; remotely:&quot;);
    open(configureClientServer());
    store();
    close();
    open(configureClientServer());
    startTimer();
    Query query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/1&quot;);
    Item item = (Item) query.execute().next();
    stopTimer(&quot;Select 1 object: &quot; + item._name);
    close();
    
    init();
    clean();
    System.out.println(&quot;Storing &quot; + _count + &quot; objects of depth &quot; + _depth
        + &quot; locally:&quot;);
    open(configureClientServer());
    store();
    close();
    open(configureClientServer());
    startTimer();
    query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/1&quot;);
    item = (Item) query.execute().next();
    stopTimer(&quot;Select 1 object: &quot; + item._name);
    close();
  }

  // end runClientServerTest

  private void runInheritanceTest()  {
    init();
    clean();
    System.out.println(&quot;Storing &quot; + _count + &quot; objects of depth &quot; + _depth);
    open(configure());
    store();
    close();
    open(configure());
    startTimer();
    Query query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/1&quot;);
    Item item = (Item) query.execute().next();
    stopTimer(&quot;Select 1 object: &quot; + item._name);
    close();

    clean();
    System.out.println(&quot;Storing &quot; + _count + &quot; inherited objects of depth &quot;
        + _depth);
    open(configure());
    storeInherited();
    close();
    open(configure());
    startTimer();
    // Query for item, inheriting objects should be included in the result
    query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/1&quot;);
    item = (Item) query.execute().next();
    stopTimer(&quot;Select 1 object: &quot; + item._name);
    close();
  }

  // end runInheritanceTest

  private void runDifferentObjectsTest()  {

    init();
    System.out.println(&quot;Storing &quot; + _count + &quot; objects with &quot; + _depth
        + &quot; levels of embedded objects:&quot;);

    clean();
    System.out.println();
    System.out.println(&quot; - primitive object with int field&quot;);
    open(configure());
    storeSimplest();
    close();
    open(configure());
    startTimer();
    Query query = objectContainer.query();
    query.constrain(SimplestItem.class);
    query.descend(&quot;_id&quot;).constrain(1);
    List result = query.execute();
    SimplestItem simplestItem = (SimplestItem) result.queryByExample(0);
    stopTimer(&quot;Querying SimplestItem: &quot; + simplestItem._id);
    close();

    open(configure());
    System.out.println();
    System.out.println(&quot; - object with String field&quot;);
    store();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/2&quot;);
    result = query.execute();
    Item item = (Item) result.queryByExample(0);
    stopTimer(&quot;Querying object with String field: &quot; + item._name);
    close();

    clean();
    open(configure());
    System.out.println();
    System.out.println(&quot; - object with StringBuffer field&quot;);
    storeWithStringBuffer();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(ItemWithStringBuffer.class);
    query.descend(&quot;_name&quot;).constrain(new StringBuffer(&quot;level1/2&quot;));
    result = query.execute();
    ItemWithStringBuffer itemWithSB = (ItemWithStringBuffer) result.queryByExample(0);
    stopTimer(&quot;Querying object with StringBuffer field: &quot;
        + itemWithSB._name);
    close();

    clean();
    open(configure());
    System.out.println();
    System.out.println(&quot; - object with int array field&quot;);
    storeWithArray();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(ItemWithArray.class);
    Query idQuery = query.descend(&quot;_id&quot;);
    idQuery.constrain(new Integer(1));
    idQuery.constrain(new Integer(2));
    idQuery.constrain(new Integer(3));
   idQuery.constrain(new Integer(4));
    result = query.execute();

    ItemWithArray itemWithArray = (ItemWithArray) result.queryByExample(0);
    stopTimer(&quot;Querying object with Array field: [&quot; + itemWithArray._id[0]
        + &quot;, &quot; + +itemWithArray._id[1] + &quot;, &quot; + +itemWithArray._id[2]
        + &quot;, &quot; + +itemWithArray._id[0] + &quot;]&quot;);
    close();

    clean();
    open(configure());
    System.out.println();
    System.out.println(&quot; - object with ArrayList field&quot;);
    storeWithArrayList();
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(ItemWithArrayList.class);
    query.descend(&quot;_ids&quot;).constrain(1).contains();
    result = query.execute();
    ItemWithArrayList itemWithArrayList = (ItemWithArrayList) result.queryByExample(0);
    stopTimer(&quot;Querying object with ArrayList field: &quot;
        + itemWithArrayList._ids.toString());
    close();

  }

  // end runDifferentObjectsTest

  private void runIndexTest()  {

    init();
    System.out.println(&quot;Storing &quot; + _count + &quot; objects with &quot; + _depth
        + &quot; levels of embedded objects:&quot;);

    clean();
    System.out.println(&quot; - no index&quot;);
    open(configure());
    store();
    close();
    open(configure());
    startTimer();
    Query query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/2&quot;);
    List result = query.execute();
    Item item = (Item) result.queryByExample(0);
    stopTimer(&quot;Querying object with String field: &quot; + item._name);
    close();


    System.out.println(&quot; - index on String field&quot;);
    // open to create index
    open(configureIndex());
    close();
    open(configure());
    startTimer();
    query = objectContainer.query();
    query.constrain(Item.class);
    query.descend(&quot;_name&quot;).constrain(&quot;level1/2&quot;);
    result = query.execute();
    item = (Item) result.queryByExample(0);
    stopTimer(&quot;Querying object with String field: &quot; + item._name);
   close();
  }

  // end runIndexTest

  private void init()  {
    _filePath = &quot;performance.db4o&quot;;
    // amount of objects
    _count = 10000;
    // depth of objects
    _depth = 3;
    _isClientServer = false;

  }

  // end init

  private void initLargeDb()  {
    _filePath = &quot;performance.db4o&quot;;
    _count = 100000;
    _depth = 3;
    _isClientServer = false;

  }

  // end initLargeDb

  
  private void initForClientServer()  {
    _filePath = &quot;performance.db4o&quot;;
    _isClientServer = true;
    _host = &quot;localhost&quot;;
  }

  // end initForClientServer

  private void initForRamDriveTest()  {
    _count = 30000;
    _depth = 3;
    _filePath = &quot;r:\\performance.db4o&quot;;
    _isClientServer = false;

  }

  // end initForRamDriveTest

  private void initForHardDriveTest()  {
    _count = 30000;
    _depth = 3;
    _filePath = &quot;performance.db4o&quot;;
    _isClientServer = false;

  }

  // end initForHardDriveTest


  private void clean()  {
    new File(_filePath).delete();
  }

  // end clean

  private Configuration configure()  {
    Configuration config = Db4o.newConfiguration();
    return config;
  }

  // end configure

  private Configuration configureUnoptimizedNQ()  {
    Configuration config = Db4o.newConfiguration();
    config.optimizeNativeQueries(false);
    return config;
  }
  // end configureUnoptimizedNQ

  private Configuration configureIndex()  {
    Configuration config = Db4o.newConfiguration();
    config.objectClass(Item.class).objectField(&quot;_name&quot;).indexed(true);
    return config;
  }

  // end configureIndex

  private Configuration configureClientServer()  {
    Configuration config = Db4o.newConfiguration();
    config.queries().evaluationMode(QueryEvaluationMode.IMMEDIATE);
    config.clientServer().singleThreadedClient(true);
    return config;
  }

  // end configureClientServer

  private Configuration configureRamDrive()  {
    Configuration config = Db4o.newConfiguration();
    config.flushFileBuffers(true);
    return config;
  }

  // end configureRamDrive

  private void store()  {
    startTimer();
    for (int i = 0; i &lt; _count; i++)  {
     Item item = new Item(&quot;level&quot; + i, null);
      for (int j = 1; j &lt; _depth; j++)  {
        item = new Item(&quot;level&quot; + i + &quot;/&quot; + j, item);
      }
      objectContainer.store(item);
    }
    objectContainer.commit();
    stopTimer(&quot;Store &quot; + totalObjects() + &quot; objects&quot;);
  }
  // end store

  private void storeInherited()  {
    startTimer();
    for (int i = 0; i &lt; _count; i++)  {
      ItemDerived item = new ItemDerived(&quot;level&quot; + i, null);
      for (int j = 1; j &lt; _depth; j++)  {
        item = new ItemDerived(&quot;level&quot; + i + &quot;/&quot; + j, item);
      }
      objectContainer.store(item);
    }
   objectContainer.commit();
    stopTimer(&quot;Store &quot; + totalObjects() + &quot; objects&quot;);
  }

  // end storeInherited

  private void storeWithStringBuffer()  {
    startTimer();
    for (int i = 0; i &lt; _count; i++)  {
      ItemWithStringBuffer item = new ItemWithStringBuffer(
          new StringBuffer(&quot;level&quot; + i), null);
      for (int j = 1; j &lt; _depth; j++)  {
        item = new ItemWithStringBuffer(new StringBuffer(&quot;level&quot; + i
            + &quot;/&quot; + j), item);
      }
      objectContainer.store(item);
    }
    objectContainer.commit();
    stopTimer(&quot;Store &quot; + totalObjects() + &quot; objects&quot;);
  }

  // end storeWithStringBuffer

  private void storeSimplest()  {
    startTimer();
    for (int i = 0; i &lt; _count; i++)  {
      SimplestItem item = new SimplestItem(i, null);
      for (int j = 1; j &lt; _depth; j++)  {
        item = new SimplestItem(i, item);
      }
      objectContainer.store(item);
    }
    objectContainer.commit();
    stopTimer(&quot;Store &quot; + totalObjects() + &quot; objects&quot;);
  }

  // end storeSimplest

  private void storeWithArray()  {
    startTimer();
    int[] array = new int[]  { 1, 2, 3, 4 };
    for (int i = 0; i &lt; _count; i++)  {
      int[] id = new int[]  { 1, 2, 3, 4 };
      ItemWithArray item = new ItemWithArray(id, null);
      for (int j = 1; j &lt; _depth; j++)  {
        int[] id1 = new int[]  { 1, 2, 3, 4 };
        item = new ItemWithArray(id1, item);
      }
      objectContainer.store(item);
    }
    objectContainer.commit();
    stopTimer(&quot;Store &quot; + totalObjects() + &quot; objects&quot;);
  }

  // end storeWithArray

  private void storeWithArrayList()  {
    startTimer();
    ArrayList idList = new ArrayList();
    idList.add(1);
    idList.add(2);
    idList.add(3);
    idList.add(4);
    for (int i = 0; i &lt; _count; i++)  {
      ArrayList ids = new ArrayList();
      ids.addAll(idList);
      ItemWithArrayList item = new ItemWithArrayList(ids, null);
      for (int j = 1; j &lt; _depth; j++)  {
        ArrayList ids1 = new ArrayList();
        ids1.addAll(idList);
        item = new ItemWithArrayList(ids1, item);
      }
      objectContainer.store(item);
    }
    objectContainer.commit();
    stopTimer(&quot;Store &quot; + totalObjects() + &quot; objects&quot;);
  }

  // end storeWithArrayList

  private int totalObjects()  {
    return _count * _depth;
  }

  // end totalObjects

  private void open(Configuration configure)  {
    if (_isClientServer)  {
      int port = TCP ? PORT : 0;
      String user = &quot;db4o&quot;;
      String password = user;
      objectServer = Db4o.openServer(configure, _filePath, port);
      objectServer.grantAccess(user, password);
      objectContainer = TCP ? Db4o
          .openClient(configure, _host, port, user, password) : objectServer
          .openClient(configure);
    } else  {
      objectContainer = Db4o.openFile(configure, _filePath);
    }
  }

  // end open

  private void close()  {
    objectContainer.close();
    if (_isClientServer)  {
      objectServer.close();
    }
  }

  // end close

  private void startTimer()  {
    startTime = System.currentTimeMillis();
  }

  // end startTimer

  private void stopTimer(String message)  {
    long stop = System.currentTimeMillis();
    long duration = stop - startTime;
    System.out.println(message + &quot;: &quot; + duration + &quot;ms&quot;);
  }

  // end stopTimer

  public static class Item  {

    public String _name;
    public Item _child;

    public Item()  {

    }

    public Item(String name, Item child)  {
      _name = name;
      _child = child;
    }
  }</pre>    </body></html>