<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="2958" MadCap:lastWidth="1029">
  <head />
  <body>
    <h1>Defragment</h1>
    <p MadCap:conditions="Primary.Java,Primary.All languages">
      <p>Java: <code>Defragment.defrag("sample.db4o")</code></p>
    </p>
    <p MadCap:conditions="Primary:java" />
    <p MadCap:conditions="Primary..NET">
      <p>.NET: <code>Defragment.Defrag("sample.db4o")</code></p>
    </p>
    <p MadCap:conditions="Primary:net" />
    <a name="Advantage"></a>
    <h2>Advantage</h2>
    <p>It is recommended to run Defragment frequently to reduce the database file size and to remove unused fields and freespace slots.</p>
    <a name="Effect"></a>
    <h2>Effect</h2>
    <p>db4o does not discard fields from the database file that are no longer being used. Within the database file quite a lot of space is used for transactional processing. Objects are always written to a new slot when they are modified. Deleted objects continue to occupy 8 bytes until the next Defragment run. Defragment cleans all this up by writing all objects to a completely new database file. The resulting file will be smaller and faster.</p>
    <a name="Alternate Strategies"></a>
    <h2>Alternate Strategies</h2>
    <p>
Instead of deleting objects it can be an option to mark objects as deleted with a "deleted" boolean field and to clean them out (by not copying them to the new database file) during the Defragment run. Two advantages: </p>
    <ol>
      <li>Deleted objects can be restored. </li>
      <li>In case there are multiple references to a deleted object, none of them would point to null. </li>
    </ol>
  </body>
</html>