<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="3546" MadCap:lastWidth="721" MadCap:conditions="Primary.Java">
    <head>
    </head>
    <body>
        <h1>
            <MadCap:keyword term="Native Queries:Performance;Performance:Native Queries" />Native Queries Performance Characteristics</h1>
        <p>This overview shows which query operations perform well or badly on large datasets. It should give you an idea which operations can be used on large datasets and which operations can only be applied to small datasets.</p>
        <p>Native queries are translated to SODA and therefore they share the same basic  <![CDATA[ ]]><a href="../soda/soda_performance_characteristics.htm">performance characteristics</a>.</p>
        <h2><a name="GoodPerf"></a>Good Performance Characteristics</h2>
        <p>For a good query performance fields which are used in a query have to be <a href="../../indexing.htm">indexed</a>. Otherwise db4o needs to scan through all objects. With an index these operations should scale logarithmically with the amount of data. The following queries all assume that the fields are indexed.</p>
        <h3>Equals Operation on Indexed Field</h3>
        <p>Simple equals operations on indexed fields’ perform very well.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/GoodPerformance-Equals-operation.all.flsnp" />
        <p>Not equals operations also do perform well. However a 'not equals' operation tends to return a large result which will slow down the query.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/GoodPerformance-Not-equals-operation.all.flsnp" />
        <h3>Navigation Queries on Index Field</h3>
        <p>Queries which navigate along references are executed also efficiently, as long every field and reference is indexed.</p>
        <p>However there's a catch to this: The reference field type has to be a concrete type. If a field type is <span MadCap:conditions="Primary.Java">a generic type, </span>an interface or an object-type, <a href="#SlowNavigationQueries">then the query runs slow</a>.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/GoodPerformance-Navigate-across-object-references.all.flsnp" />
        <h3>Reference-Queries</h3>
        <p>Like regular equals operation, comparisons against references also have a good performance.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/GoodPerformance-Query-by-reference.all.flsnp" />
        <h3>Comparison and Range Queries</h3>
        <p>Comparison and range queries  also perform well.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/GoodPerformance-Bigger-than.all.flsnp" />
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/GoodPerformance-In-between.all.flsnp" />
        <h3>Date Queries</h3>
        <p>Simple equals operations on dates are fast. However complex date comparisons are not yet optimized and run extremely slowly. For those you <a href="../soda/soda_performance_characteristics.htm#Date">can fallback to SODA</a>.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/GoodPerformance-Search-for-a-date.all.flsnp" />
        <h2><a name="BadPerf"></a>Bad Performance Characteristics</h2>
        <p>Here's an overview of the query operations with bad performances characteristics. The reason is that db4o cannot utilize indexes to perform these queries. Or that the native query optimizer cannot translate the query to SODA. That means the  query time grows linearly with the amount of data. </p>
        <h3><a name="SlowNavigationQueries"></a>Navigation across <span MadCap:conditions="Primary.Java">Generic/</span>Object/Interface Fields</h3>
        <p>When your query navigates across a <MadCap:variable name="Primary.getter" /> which type is <span MadCap:conditions="Primary.Java">a generic parameter, </span>an object or interface then the performance is bad. This is a limitation of the current query system implementation.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/BadPerformance-Navigation-non-concrete-types.all.flsnp" />
        <h3>String Operations: Like, Contains, StartsWith, Ends With</h3>
        <p>All string operations beside the simple equals operation cannot use indexes at the moment. Therefore all string operations like contains, like, starts with etc. run slowly. Advanced string operations are not translated to SODA and therefore run even more slowly.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/BadPerformance-Contains-and-other-string-operations-are-slow.all.flsnp" />
        <h3>Date Comparisons</h3>
        <p>The native query optimizer doesn't recognize date comparison and therefore such queries run extremely slow. You should fall <a href="../soda/soda_performance_characteristics.htm#Date">back to SODA</a> for date queries. </p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/BadPerformance-Slow-date-query.all.flsnp" />
        <h3>Queries on Collections / Arrays</h3>
        <p>Any query which does contains operations on collections/arrays or navigates across a collection/array field will run slowly. The reason is that db4o cannot index collections. Furthermore the native query optimizer may doesn't recognize such a query and just loads all objects to process the query.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/BadPerformance-Contains-on-collection.all.flsnp" />
        <h2>Computation in Query Expression</h2>
        <p>When you do a computation in a query expression, then the native query optimizer cannot optimize your query. In that case it will load all objects in order to execute your query.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/BadPerformance-Computing-expression-in-query.all.flsnp" />
        <p>Therefore you should move any computation outside of the query. Like this:</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/BadPerformance-Fix-computing-expression-in-query.all.flsnp" />
        <h3>Calling Complex Methods</h3>
        <p>Calling complex methods in native queries is a bad idea. Most of the time the native query optimizer cannot deal with a complex method and will load all objects to execute the query.</p>
        <MadCap:snippetBlock src="../../../CodeExamples/performance/query/nq/BadPerformance-Call-complex-method.all.flsnp" />
        <h2><a name="Detect"></a>Detect Slow Queries</h2>
        <p>The best indication that a query is slow is when it cannot use any field index. Install a <a href="../../../advanced_topics/diagnostics.htm">diagnostic listener and look for the LoadedFromClassIndex</a> message. That message indicates that a query couldn't use any field index for its execution. </p>
        <p>For native queries another indication is when the 'NativeQueryNotOptimized' or the 'NativeQueryOptimizerNotLoaded' diagnostic message occurs. Watch out <a href="../../../advanced_topics/diagnostics.htm">for those as well</a>.</p>
    </body>
</html>