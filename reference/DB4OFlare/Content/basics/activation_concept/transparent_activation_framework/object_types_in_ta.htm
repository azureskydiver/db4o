<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="839" MadCap:lastWidth="624">
  <head />
  <body>
    <h1>Object Types In TA</h1>
    <p>When working in TA enabled environment you must remember that db4o treats Activatable (TA Aware) and non Activatable (other) types differently. </p>
    <p>In general we can distinguish the following types:</p>
    <ul>
      <li>Value types with no identity (char, boolean, integer etc). These types are handled internally by db4o engine and behave the same in TA enabled and disabled modes.</li>
      <li>Activatable types, as it is clear from the name, implement Activatable interface and are responsible for their own activation.</li>
      <li>Non Activatable type - all the other types, including user types or third-party classes.</li>
    </ul>
    <p>As it was mentioned  <a href="ta_implementation.htm">before</a> in TA enabled mode non-Activatable types are fully activated whereas Activatable types have 0 activation depth and are getting activated as requested. </p>
    <p>Let's look at an example model below, which includes Activatable and non-Activatable classes:</p>
    <p>
      <img src="../../../basics/activation_concept/transparent_activation_framework/Object_Types_In_TA/TA.Gif" />
    </p>
    <p>Querying and traversing in TA enabled mode:</p>
    <p MadCap:conditions="Primary.Java,Primary.All languages">
      <p>Java: </p>
      <p>
        <code>Customer c =
container.queryByExample(Customer.class).next();</code>
      </p>
    </p>
    <p MadCap:conditions="Global.Primary:java" />
    <p MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages">
      <p>c#: </p>
      <p>
        <code>Customer c =
container.QueryByExample(typeof(Customer)).Next();</code>
      </p>
    </p>
    <p MadCap:conditions="Global.Primary:cs" />
    <p MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages">
      <p>VB: </p>
      <p>
        <code>Dim c as Customer =
container.QueryByExample(GetType(Customer)).Next();</code>
      </p>
    </p>
    <p MadCap:conditions="Global.Primary:vb" />
    <p>At this point the following paths should be already activated (Customer is not Activatable):</p>
    <p>
      <code>c.name</code>
      <code>c.addresses</code>
      <code>.addresses[N].firstLine</code>
    </p>
    <p> </p>
    <p>
      <code>c.addresses[N].country</code> - available but not activated (Activatable type).</p>
    <p> </p>
    <p>Country.getState would cause the Country object to be activated</p>
    <p MadCap:conditions="Primary.Java,Primary.All languages">
      <p>Java: </p>
      <p>
        <code>State state = c.getAddress(0).country().getState(someZipCode);</code>
      </p>
    </p>
    <p MadCap:conditions="Global.Primary:java" />
    <p MadCap:conditions="Primary..NET,Primary.c#,Primary.All languages">
      <p>c#: </p>
      <p>
        <code>State state = c.Address[0].Country.GetState(someZipCode);</code>
      </p>
    </p>
    <p MadCap:conditions="Global.Primary:cs" />
    <p MadCap:conditions="Primary..NET,Primary.VB.NET,Primary.All languages">
      <p>VB:</p>
      <p>
        <code>Dim state As State = <br />c.Address(0).Country.GetState(someZipCode);</code>
      </p>
    </p>
    <p MadCap:conditions="Global.Primary:vb" />
    <p>At this point the following paths become activated 
</p>
    <p>
      <code>c.addresses[0].country.states</code>
      <code>.addresses[0]<br />.country.states[N].name</code>
    </p>
    <p>
      <code>c.addresses[0].country.states[N].city</code>
      <code>.addresses[0]<br />.country.states[N].cities[N]</code>
    </p>
    <p>- available but not
activated (Activatable type)</p>
    <p> </p>The following general rules apply: 
<ol><li>Arrays of Arrays of non Activatable types: non Activatable behavior</li><li>Arrays of Arrays of Activatable types: non Activatable behavior except for leaves</li><li>JDK collections: non Activatable behavior</li><li>Value types with references to non Activatable reference types and to Activatable
reference types: the non Activatable path should be activated fully; Activatable
path stops activation.</li></ol></body>
</html>