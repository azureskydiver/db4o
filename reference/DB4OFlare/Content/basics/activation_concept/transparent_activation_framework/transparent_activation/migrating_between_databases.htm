<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="6" MadCap:lastHeight="371" MadCap:lastWidth="586">
    <head>
    </head>
    <body>
        <h1>Migrating Between Databases</h1>
        <p>Transparent activation and persistence functionality depends
on an association between an object and an object container, which is created
when an activator is bound to the object. Each object allows only one
activator. Typically this limitation won't show up, however there is a valid
use case for it: </p>
        <ol>
            <li>     Suppose
you need to copy one or more objects from one object container to another.</li>
            <li>You
will retrieve the objects from the first object container.</li>
            <li>You
will now save the objects to the second object container.</li>
        </ol>
        <p>If both object containers were
using transparent activation or persistence, then the last step will throw an
exception. A activatable object contains an activator field. When transparent activation
functionality is used for the first time an object container activator will be
bound to the object.</p>
        <p>When the bind method is re-called with the same object container the activator parameter is used. However, if another object container tries to bind the object a different activator is used,
which will cause an exception. </p>
        <p>The solution to this problem is
simple: You need to unbind a object before storing it in another object container. You can do that by calling the bind-method with null as parameter.</p>
        <p>Note, that the object will quit
being activatable for the first object container. The following example shows
the described behavior:</p>
    </body>
</html>