<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>Security Requirements On Java Platform</title>
        <link rel="stylesheet" type="text/css" href="../../style.css" />
    </head>
    <body>
        <div class="CommonContent">
            <div class="CommonContentArea">
                <h1>Security Requirements On Java Platform</h1>
                <p><span style="color: #990000;">This topic applies to Java version only</span>
                </p>
                <p>Java Security Manager can be used to specify Java application security permissions. It is usually provided by web-browsers and web-servers for applet and servlet execution, however any Java application can make use of a security manager. For example, to use the default security manager you will only need to pass <code>-Djava.security.manager</code> option to JVM command line. Custom security managers can be created and utilized as well (please refer to Java documentation for more information).</p>
                <p>If you are going to use db4o in a Tomcat servlet container you will need to grant some additional permissions in {CATALINA_HOME}/conf/catalina.policy file:</p>
                <p>// The permissions granted to the context WEB-INF/classes directory<br />grant codeBase "file:${catalina.home}/webapps/{your_db4o_application}/WEB-INF/classes/-" {<br />&#160;&#160; permission java.util.PropertyPermission "user.home", "read";&#160; <br />&#160;&#160; permission java.util.PropertyPermission "java.fullversion", "read";<br />&#160;&#160; permission java.io.FilePermission "path_to_db4o_database_folder", "read";<br />&#160;&#160; permission java.io.FilePermission "path_to_db4o_database_file", "read, write";<br />};<br /><br />// The permissions granted to the context WEB-INF/lib directory, containing db4o jar<br />grant codeBase "file:${catalina.home}/webapps/{your_db4o_application}/WEB-INF/lib/-" {<br />&#160;&#160; permission java.io.FilePermission "path_to_db4o_database_file", "read, write";<br />};</p>
                <p>An example&#160; catalina.policy file can be downloaded <a href="security_requirements_on_java_platform/catalina.policy.htm" class="wikiLink">here</a>.<br /></p>
                <p>In order to avoid db4o DatabaseFileLocked exception you will also need to add some configuration before opening the object container:</p>
                <p><code>Configuration config = Db4o.newConfiguration();</code>
                </p>
                <p><code>config.lockDatabaseFile(false);</code>
                </p>
                <p><code>ObjectContainer container = Db4o.openFile(config, dbfile.getPath());</code>&#160;</p>
                <p>Having done that, you can package and deploy your application. To enable the security configuration start Tomcat with the following command:</p>
                <p>{CATALINA_HOME}/bin/catalina start -security<br /></p>
            </div>
        </div>
        <div id="footer">
					This revision (4) was last Modified 2008-05-24T21:12:00 by Tetyana.
				</div>
    </body>
</html>