<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Detailed Example</title>
    <link rel="stylesheet" type="text/css" href="../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Detailed Example</h1><p>Let's look at a primitive example, demonstrating manual implementation
of Activatable/IActivatable interface for TP. We will use a class similar to
the <a href="../activation/transparent_activation_framework/detailed_example.htm" class="wikiLink">one</a> used in Transparent Activation chapters.</p>









<p>Note, that the only place where we can modify SensorPanel members
is <code>setSensor</code> method/<code>Sensor</code> property, and that is
where <code>activate</code> method is added.<br></p>

<p>Now we will only need to add Transparent Activation support:</p>







<p>Initial storing of the objects is done as usual with a
single <code>store</code> call:</p>







<p>Now we can test how Transparent Persistence helped us to
keep the code simple. Let's select all elements from the linked SensorPanel
list, modify them and store. As you remember default update depth is one, so
without TP, we would have to store each member of the linked list (SensorPanel)
separately. With TP enabled there is absolutely nothing to do: commit call will
find all activatable objects and store those that were modified.</p>







<p>That's all. The benefits that we've got:</p>

<ul class="unIndentedList"><li>
clean and friendly to refactorings code;</li><li>
performance benefit: only modified objects are
stored;</li><li>
hussle-free development.</li></ul>







</div>
    </div>
    <div id="footer">
					This revision (2) was last Modified 2008-01-15T06:07:43 by Tetyana.
				</div>
  </body>
</html>