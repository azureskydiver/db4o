<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Automatic Deactivation</title>
    <link rel="stylesheet" type="text/css" href="../../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Automatic Deactivation</h1><p><br></p><p>The use of depth parameter in <code>deactivate</code> call from
the <a href="rollback_and_cache.htm" class="wikiLink">previous example</a> directly affects performance: the
less is the depth the less objects will need to be re-read from the database
and the better the performance will be. Ideally we only want to deactivate the
objects that were changed in the rolled-back transaction. This can be done by
providing a special class for db4o configuration. This class should implement
<code>RollbackStrategy/IRollbackStrategy</code> interface and is configured as
part of Transparent Persistence support:</p>







<p>RollbackDeactivateStrategy#rollback method will be
automatically called <b>once</b> per each <b>modified</b> object after the rollback.
Thus you do not have to worry about deactivate depth anymore - all necessary
deactivation will happen transparently preserving the best performance
possible. </p>







<p>Note, that RollbackDeactivateStrategy <b>only works for activatable</b> objects. To see the different you can
comment out Activatable implementation in Id class (id value will be preserved
in the cache).</p></div>
    </div>
    <div id="footer">
					This revision (1) was last Modified 2008-03-02T09:33:56 by Tetyana.
				</div>
  </body>
</html>