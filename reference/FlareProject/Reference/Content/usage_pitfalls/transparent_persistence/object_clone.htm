<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Object Clone</title>
    <link rel="stylesheet" type="text/css" href="../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Object Clone</h1><p>Platform implementations of #clone is not compatible with TP.
</p><p>Both java and .NET object implementations provide
<code>#clone</code> method for default objects, which is enabled by
implementing <code>Cloneable/ICloneable</code> interface. This
implementation is a shallow clone, i.e. only the top-level object
fields are duplicated, all the referenced(children) objects are only
copied as references to the same object in the parent clone. But how it
affects Transparent Persistence?</p>
<p>If you remember
<a href="../../object_lifecycle/transparent_persistence/transparent_persistence_implementation.htm" class="wikiLink">Transparent Persistence Implementation</a>
you must know that a special <code>Activator</code> field is used to
bind an object to the object container. Consequently, the default clone
will copy this <code>Activatable</code> field to the object's
duplicate, which will produce ambiguity as the object container won't
know which object should be activated for write.</p>
<p>Let's look how it will affect db4o in practice. We will use a usual
<a href="car.htm" class="wikiLink">Car</a> class and make it cloneable. Use the following code to store a
car object and it's clone:<br></p>



<p>So it works for the first store, but what if we will clone an object retrieved from the database?</p>




<p>The code above throws an exception when the cloned object is being
bound to the object container. Luckily we can easily fix it by
overriding #clone method and setting activator to null:<br></p>



</div>
    </div>
    <div id="footer">
					This revision (2) was last Modified 2008-03-02T09:14:34 by Tetyana.
				</div>
  </body>
</html>