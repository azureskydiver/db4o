<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Committed Event Example</title>
    <link rel="stylesheet" type="text/css" href="../../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Committed Event Example</h1>

<p>Committed callbacks can be used in various scenarios:</p>

<ul>
<li>backup on commit;</li>
<li>database replication on commit;</li>
<li>client database synchronization.</li>
</ul>



<p>In our example we will create an
implementation for the last case. </p>

<p>When several clients are working
on the same objects it is very possible that the data will be outdated on some
of the clients. Before the commit-callbacks feature was introduced the solution
was to call <code>refresh</code> regularly to get object updates from the
server. With the commit-callback this process can be easily automated:</p>

<ul>
<li>objects are modified when the commit is done;</li>
<li>the successful commit triggers committed event on the clients;</li>
<li>committed event handler updates modified objects on the
clients.</li>
</ul>


<p>Let's open 2 clients, which will work with <a href="car.htm" class="wikiLink">Car</a> objects,
and register committed event listeners for them.</p>






<p>Run the following method to see how the 2 clients work
concurrently on the same object:</p>






<p>You should see that client2 picked up the changes committed
from the client1 automatically due to the committed event handler.</p>

<p>Working with the committed event you should remember that
the listener is called in a separate thread, which needs to be synchronized
with the main application thread. This functionality is not implemented in the presented example, instead a simple thread Sleep(1000) method is used (WaitForCompletion method), which is not realiable at all. For a reliable execution use events and notifications from the committed callbacks.<br></p>

<p>It is a good practice to remove the committed event handlers
from the registry before shutting down the clients:</p>
<br>








<p>The example presented above works very well for remote client-server mode when object identity recognition between clients and the server is managed by internal core logic. However, if you will try the same in embedded client-server you will find out that the committed event handler is actually useless. Why is it so? In embedded mode clients and server objects are kept in the same operating memory, but each client and the server own their own fragment of it where the objects are instantiated. This means that the same object (Car in our example) will be instantiated twice: for client1 and for client2. In order to recognize those instances as the same database object, we will need to add id comparison to the event handler:</p>





<p>The logic above will link the changed objects from one client to the objects in memory of another client and will update them if necessary. This example will also work fine for networked client-server.&nbsp;</p></div>
    </div>
    <div id="footer">
					This revision (6) was last Modified 2008-07-06T16:57:32 by Tetyana.
				</div>
  </body>
</html>