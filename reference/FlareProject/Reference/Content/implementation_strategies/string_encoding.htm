<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>String Encoding</title>
    <link rel="stylesheet" type="text/css" href="../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>String Encoding</h1>
<p>When db4o
stores and loads strings it has to convert them to and from byte arrays. By
default db4o provides 2 types of string encoding, which do this job: Unicode
and ISO 8859-1, Unicode being the default one. In general Unicode can represent
any character set. However, it also imposes a certain overhead, as character values
are stored in 4 bytes (less generic encoding usually use 2 or even 1 byte per
character). In order to save on the database file size, it is recommended to
use ISO 8859-1, which only required 2 bytes per character. However ISO 8859-1
only supports latin alphabet.</p>

<p>In order
to make string encoding more flexible and configurable pluggable string
encoding was introduced in db4o version 7.7. The API looks like this:</p>

<p>Configuration#stringEncoding(stringEncoding)</p>

<p>Where
stringEncoding can be either one of the default ones:</p>







<p>or a newly implemented one:</p>





<p>It is important to remember that the string
encoding is selected once for the lifetime of a database and cannot be changed
afterwards. With the default encodings it is enough to supply the encoding
configuration when the database is created, it will be picked up automatically
afterwards. With the custom string encodings, you must make sure that the same
encoding is submitted with every database open call. As db4o uses string
encoding to store metadata information like field and classnames, opening a
database with a wrong string encoding will fail with exceptions.</p></div>
    </div>
    <div id="footer">
					This revision (4) was last Modified 2008-11-05T18:57:14 by Tetyana.
				</div>
  </body>
</html>