<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>TypeAlias</title>
    <link rel="stylesheet" type="text/css" href="../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>TypeAlias</h1>


<p>TypeAlias
constructor accepts 2 parameters: </p>

<ul>
<li>stored class name - storedType</li>

<li>runtime class name - runtimeType</li>
</ul>

<p>Note that the runtimeType class should exist in your
application when you configure the alias.</p>

<p>The alias matches are found by comparing full names of the stored and
runtime classes</p>


<p>Let's declare a new TypeAlias</p>






<p>The following method will initialize tAlias and configure db4o to use
it:</p>







<p>We can always check the results of adding an alias using
resolveRuntimeName and resolveStoredName as you see in the example. Basically
the same methods are used internally by db4o to resolve aliased names.</p>








<p>Due to the alias
configured the database will have Pilot classes saved. You can check it using
ObjectManager or you can remove alias and read it from the database:</p>








<p>Obvioulsly you can install the same alias again and read the stored
objects using Driver class.</p>




</div>
    </div>
    <div id="footer">
					This revision (3) was last Modified 2008-01-12T12:15:54 by Tetyana.
				</div>
  </body>
</html>