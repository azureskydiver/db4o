<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Unique Universal IDs</title>
    <link rel="stylesheet" type="text/css" href="../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Unique Universal IDs</h1>


<p>For long-term external references and to identify an object even after it has been copied or moved to another ObjectContainer, db4o supplies Unique Universal IDs (UUIDs).</p>

<p>
Every newly created db4o database generates a signature object. It is stored as an instance of Db4oDatabase in your database file.</p>

<p>This signature is linked to all newly created objects (if UUID generation is enabled) as the "signature part" of the UUID.</p>

<p>Further to that db4o creates a timestamp for every new object and uses an internal counter to make sure that timestamps are unique. This is called the "long part" of the UUID.</p>

<p>The long part is indexed to make the search fast. If two objects with an identical long parts are found, the signature parts are compared also.</p>

<p>The long part of the UUID can also be used to find out when an object was created. You can use </p>







<p>to get object creation time in milliseconds.</p>

<p>
UUIDs are guaranteed to be unique, if the signature of your db4o database is unique.</p>

<p>
Normally any database has a unique signature unless its file is copied. The original and copied database files are identical, so they have the same signatures. If such files are used in replication, the process will end up with exceptions. What is the solution then?</p>

<p>Signature of a database file can be changed using</p>






method. 






<p>UUIDs are not generated by default, since they occupy extra space in the database file and produce performance overhead for maintaining their index. UUIDs can be turned on globally or for individual classes:</p>







<p>- turns on UUID generation for all classes in a database. </p>







<p>- turns on UUID generation for a specific class.</p>

<p>You can get the UUID value for an object using the following methods:
</p>







<p>To get the object from the database, knowing its UUID, use: </p>







<p>
The following example shows the usage of UUID: </p>
</p>











<p>Sometimes you can find out that you need UUIDs only when the database is already created and has some data in it. What can you do in that case?</p>

<p>Fortunately enabling replication for existing data files is a very simple process: </p>







<p>After that you will just need to use the old defragment tool from tools package supplied
with the distribution before version 6.0 (source code only) to enable replication.</p>

<p>You can use UUID for replication and as a reference to a specific object instance from an external application or data store.</p></div>
    </div>
    <div id="footer">
					This revision (17) was last Modified 2008-02-05T12:05:58 by dlouwers.
				</div>
  </body>
</html>