<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Db4o Applications</title>
    <link rel="stylesheet" type="text/css" href="../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Db4o Applications</h1>

<p>db4o can be used in a wide range of production and
educational software. The primary focus is on embedded usage, like mobile
systems (phones and handhelds), device electronics (printers, cars, robots),
SCADA systems etc. The following table provides many (but not all) possible
implementations with an explanations of the benefits of db4o in the selected
environment:</p>

<table border="1" cellpadding="0" cellspacing="0">
 <tr>
  <td valign="top">
  <p><b>Environment</b></p>
  </td>
  <td valign="top">
  <p><b>Benefits</b></p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>Educational systems</p>
  </td>
  <td valign="top">
  <p>One-line persistence, Object-oriented model, intuitive
  programming interface make db4o an ideal educational tool. It is easy to use
  and it provides a meaningful example of object-oriented world. It is also
  native to most widely used OO languages: Java and .NET</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>Prototypes</p>
  </td>
  <td valign="top">
  <p>Using db4o to build a prototype system is much quicker
  than using an RDBMS. In case of db4o you do not need to create a data model.
  Further there is no need to map your object model to the database. The
  general persistence mechanism is almost transparent and requires minimum
  effort to adapt to. Automatic refactoring allows rapid change of classes
  without the necessity to update the database.</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>SCADA</p>
  </td>
  <td valign="top">
  <p>Using db4o in SCADA systems allows to achieve high
  performance in caching and replay of the events. Another benefit is a small
  footprint and easy integration with Java and .NET programming languages. db4o
  can also be run as a memory database, providing better performance though
  minimizing disk access.</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>Mobile applications</p>
  </td>
  <td valign="top">
  <p>Mobile applications can benefit from in-process database,
  which requires zero-administration. Synchronization with the main server can
  be done with the help of dRS. Automatic refactoring can be another valuable
  factor, which allows to skip the job of updating the databases when a new
  version of object model is implemented.</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>Device applications</p>
  </td>
  <td valign="top">
  <p>Device applications enjoy the same benefits as Mobile applications. In addition, smaller footprints
  can be achieved by using the minimal Micro edition.</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>Open-source software</p>
  </td>
  <td valign="top">
  <p>GPL, open-source compatibility licence. Native to Java and
  .NET. Easily integrates with any Java and .NET open-source products.</p>
  </td>
 </tr>
 <tr>
  <td valign="top">
  <p>Web-applications</p>
  </td>
  <td valign="top">
  <p>open-source, reporting support from several Java
  open-source reporting frameworks and .NET reporting API</p>
  </td>
 </tr>
</table>



<p>However, other applications might not be well suited for db4o.</p><p>For example, in situations where you have increasing amounts of data ( over 10 Gigabytes ) and high concurrency ( over 20 concurrent users/processes ) along with your complex models.&nbsp; In these cases, the <a href="http://www.versant.com/en_US/products/objectdatabase?referrer=vsnt1">Versant database</a> is likely a more appropriate choice.&nbsp; Versant's customer applications span a wide range of use including those exhibiting 1000's of current transactions ( 100's of thousands of concurrent tx per second ) to 100's of gigabytes with some Versant customers in the 25T+ sized database.&nbsp;&nbsp;&nbsp; For more information visit <a href="http://www.versant.com/en_US/products/objectdatabase?referrer=limits1">http://www.versant.com/</a></p><p>Another case is when you have simple and flat data model, primarily used for reporting.&nbsp; Simple table-like models of tuple records may be better supported by an RDBMS.&nbsp; In this case, adhoc data access would be more important to your application than well defined use cases using an object model.&nbsp; Typically this is complimented with the need let your users to be able to grab one of the plethora of commercial tools to poke at the database in an adhoc fashion. <br></p></div>
    </div>
    <div id="footer">
					This revision (3) was last Modified 2009-03-19T18:02:29 by Tetyana.
				</div>
  </body>
</html>