<html>
  <head>
    <META http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Enable Field Indexes</title>
    <link rel="stylesheet" type="text/css" href="../../../style.css">
  </head>
  <body>
    <div class="CommonContent">
      <div class="CommonContentArea">
        <h1>Enable Field Indexes</h1><div id="TOC"><div id="TOCinner"><span class="TOCtitle">Contents</span><div class="TOCcontents"><ul><li><a href ="#Advantage">Advantage</a></li><li><a href ="#Alternate Strategies">Alternate Strategies</a></li></ul></li></ul></div></div></div>


<p>For class Car with field "pilot":</p>







<a name="Advantage"></a><h2>Advantage</h2>
<p>The fastest way to improve the performance of your queries is to enable indexing on some of your class's key fields. You can read how to do it in <a href="../indexing.htm" class="wikiLink">Indexing</a> chapter of this documentation.</p>

<p>
Further step of index tuning is to optimize indexes for Class.Field1.Field2 access. What will give us the best performance:</p>

<ul>
<li>
index on Field1;</li>

<li>index on Field2;</li>

<li>index on both fields?</li>
</ul>

<p>To find the answer let's consider classes Car and Pilot from the previous chapters. In order to see indexing influence we will put 10000 new cars in our storage (note that for db4o version &gt; 5.6 the amount of objects&nbsp; should be much more to see the differences in execution time due to BTree based index optimized for big amounts of data ):</p>













<p>Now we have lots of similar cars differing only in the amount of pilots' points - that will be our constraint for the query.</p>







<p>You can check execution time on your workstation using interactive version of this tutorial.</p>

<p>Let's create index for pilots and their points and test the same query again:</p>







<p>That result is considerably better and proves the power of indexing.</p>

<p>
But do we really need 2 indexes? Will single pilot or points index suffice? Let's test this as well:</p>













<p>Single index does not increase query performance on second level fields.</p>

<p>
To maximize retrieval performance on encapsulated fields of different levels of enclosure</p>

<p>Class.Field1.Field2.Field3(.FieldN)</p>

<p>indexes for each field level should be created:</p>

<p>Class.Field1.Indexed(true) </p>

<p>Field1Class.Field2.Indexed(true)</p>

<p>Field2Class.Field3.Indexed(true)</p>

<p>. . .</p>

<p>Field(N-1)Class.FieldN.Indexed(true)</p>
<a name="Alternate Strategies"></a><h2>Alternate Strategies</h2>
<p>Field indexes dramatically improve query performance but they may considerably reduce storage and update performance. The best way to decide where to put the indexes is to test them on completed application with typical typical data load.</p></div>
    </div>
    <div id="footer">
					This revision (13) was last Modified 2009-02-17T16:50:10 by Tetyana.
				</div>
  </body>
</html>