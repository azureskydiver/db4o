<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:lastBlockDepth="8" MadCap:lastHeight="1073" MadCap:lastWidth="1000">
    <head>
    </head>
    <body>
        <h1>Client Server Mode</h1>
        <p>Lets take a look at the client server modes of db4o.</p>
        <h2><a name="SessionContainers"></a>Embedded Clients aka Session Containers</h2>
        <p>db4o allows you to open lightweight session containers (aka embedded clients), which have their own transaction. We can use these session containers when we need multiple transactions running at the same time. </p>
        <MadCap:snippetBlock src="CodeExamples/cs/ClientServer-Creating-a-session-container.all.flsnp" />
        <h2><a name="NetworkCS"></a>Network Client Server Mode</h2>
        <p>db4o supports a client server mode over the network. However db4o was designed for embedded use cases. Therefore the client server mode isn't a core feature but more an add on. Not all db4o features work in the client server mode and the performance characteristics for db4o aren't optimized for client server mode. </p>
        <p>For all these reasons we should prefer the embedded mode with session containers instead of full blown clients. Nevertheless the client server mode can be useful to us.</p>
        <h3>Starting a Server</h3>
        <p>First we start the server:</p>
        <MadCap:snippetBlock src="CodeExamples/cs/ClientServer-Open-server.all.flsnp" />
        <h3>Connect Clients</h3>
        <p>As long as the server is running we can connect to it. We need to specify the host, port, username and the password in order to connect. Afterwards we have a regular object container ready to be used.</p>
        <MadCap:snippetBlock src="CodeExamples/cs/ClientServer-Using-the-client.all.flsnp" />
        <h2><a name="SharedClasses"/>Shared Classes</h2>
        <p>The biggest limitation of the client server mode is that the server and the client need the same classes available. The server also needs the classes of the stored objects. If you change the classes, we need to deploy them to the server and the clients. To do that we need to pack the domain model into a <MadCap:variable name="Primary.Artefact" /> and ensure that the server and the client use the same version of it.</p>
    </body>
</html>