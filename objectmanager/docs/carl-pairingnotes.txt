TODO:

- Cleanup current design: fix problems detailed below.

- Rewrite tree code using clear MVC design using JFace.

- Write detail pane.

- Follow up with Karen Bennett of Red Hat (maybe at EclipseCon) regarding getting db4o into Red Hat.

- Follow up using the bottom-up strategy getting db4o into Red Hat.


---------------------


Problems with current design:

- The Model strictly represents an open database file.  It does not represent search results.

- Opening a new database file results in closing and opening the Model object.  It should
  rather tell the Model to open a new database file and then the Model should trigger a refresh
  to all listening views.
  
- The current View object mix in Controller functionality.  Controllers should be separate objects.

- There should be separate Controller objects for each part of the window:
    * Tree
    * Path string
    * Hyperlink area
    * Object field pane
    
- The Model object currently just wraps an ObjectContainer and adds convenience methods.

- The FieldNode hierarchy represents the Model, but also embeds navigation into it!!!

- Navigating/Visiting aspects of the Model should be separated out of the Model graph using the Iterator
  pattern.  The Iterator should be a hierarchy/graph Iterator, and should embed a stack, the 
  visual representation of which will be the path string in the detail pane.
  
- This stack will be how we traverse up the tree control from its root to keep its focus
  synchronized with the detail pane.
  
- This Visitor becomes like the INavigator framework in Essential Data.

- This is how we provide an ED-like provider framework for JFace TreeViewers.


----------------------

Be able to see how many subobjects per node
Break down lists into 1..50, 51-100, etc...
Click on a Java class in package explorer, see instances


Display properties:
  Be able to configure the following on a global or a package basis:
    (select packages by substring or regex)

Display nodes: in addition to toString():
getDeclaredType(), getConcreteType(), getImplementedType(), 
call a specific method, use a special field;

*.*      [declared] [concrete] [method:(name)] [field:(name)]
*.db4o   [concrete] [method:(name)] [field:(name)]
         [declared] [concrete] [method:(name)] [field:(name)]
         [declared] [concrete] [method:(name)] [field:(name)]
         [declared] [concrete] [method:(name)] [field:(name)]


Filter from search box; limit search depth (add UI for this)
 - Incremental search
 - Regular expression


- Hide package names option
- Hide these classes option (for hiding system classes)


*DONE* Put SWT application launching instructions in /dev


April: version 1.0
October timeframe: mature browser



Carl's notes:

  Popup Nodes, if there are too many. Display first 50 and use node to expand
  Would like to see the number items per class
  Double-clicking on a node: Browse from here.
  History for objects
  Update the browse view from selecting class in Java perspective
  Declared type and implemented type
  Hide package names

  [declared type] [concrete type] [method:toString] [method:(name)] [field:(name)]


Use-cases:

1) Run on mobile devices

2) Debug use-cases:

2.1) Navigate
2.2) Query
2.3) Visualize object graphs  (Java Spider)


