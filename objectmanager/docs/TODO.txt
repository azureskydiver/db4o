- Query in separate tab
- Choose class dialog
- Create query controller object



- Indented text controls.
- (+) button on top or empty text control on the bottom
- some way to distinguish between: class, field, value
- Modifier for evaluation mode behind the constraint text control:
equal, smaller, greater
- To AND and OR constraints, select two constraints and click AND button
In order to do that we need some kind of selector in front of each line.

| less-than V | 50

  ----------------------------------------------------------
Class:        Car
Field:          pilot
Field:            name
      Carl R
      Dave Orme
      [         ]
  pilot
  
  Car
     model : [       ]
     pilot : [       ]
        name:  [       ] [+]
        points: [       ]
     history: [ com.db4o.Car  ]
     
     
  
  ----------------------------------------------------------
  
  list: display class names, field names, result instances
  
  
  ----------------------------------------------------------
  
  

- Class  Text control, while user types  "om.db4", display all candidate 
class names in list, auto-completion 
  - Fieldnames for the members
    - Value (empty for complex
       - Fieldname for member.member
       



TODO:

- Remaining features
   * Sort classes by name in tree view. **DONE**
   * ArrayItemNode is not aware of simple types. **DONE**
   * Remove array types from initial view. **DONE**
   * Search result scalability. **DONE**
   * Substring search: just search displayed strings; else do a query by form QBE
   * Begin query UI / querying functionality
      - Allow display of query results
   * Click right side to navigate
      - (Hyperlink objects if object.hasChildren()?)
   * Beautify UI; add icons in appropriate places
   * If right side is displaying a collection, display in a table
   * Evaluate .NET runtime platforms (IKVM) => Rodrigo
   Alternative for first relase: Smallest possible Sun JRE distribution
   * Collections under .NET 

- Release engineering
   * Don't support PDAs for the initial release
   * 3 Packages, downloadable separately 

- Testing
   * Generic reflector; run with .net (DONE)
   * Arrays (DONE, n-dimensional fail)
   * Test with no classes (DONE)

- Make right side clickable
- Make sure browsing scales to large numbers of nodes

- Generic reflector
   * StoredIterableFieldNode - Needs to use Platform.isCollection **DONE**
   * Need to write StoredMapFieldNode **DONE**
   * Make sure there are no java.lang.reflect calls where there shouldn't be **DONE, I think**
   * Test with no classes available

- Catch up MockDatabase to the generic reflector impl
- StoredArrayFieldNode needs implemented **DONE**

- Test with J9 VM **????**


- Maps don't display correctly **DONE**
- Arrays don't display correctly **written, needs testing**
    
 - Unit testing verify that the iterator is always restored after it is used
    * template generator


- Customize display of nodes
- After initial release: fix tree/detail to implement IMaster/IDetail; submit
  changes to JFace

----

User feedback:

Please show for every class:
-- All members of the class (preferably with an expanding branch for 
members defined in any base class(es).
-- The names of the members as well as the defined type of the field
-- The Value of each field and the type of the stored value (this is 
importaint)
-- For fields containing objects, an easy way to double-click or navigate 
to the object. It would be cool to show the db4o object ID for reference.
-- For objects containing an array/collection, a way to see all 
objects/values stored in the array, by index.
-- Please pay special attention to things like the Db4o LinkedList and 
HashMap classes!



It should be possible to browse a db4o-Database WITHOUT having the original
class-definitions (no dll, no source available)

I once got an old .yap file from a client and i didn't have the old
class-definitions. It was a very hard job to browse and repair some simple
data.

would be nice to be able to modify data too  :-) 

----

YapReader / YapWriter -- Byte array encoder/decoder

Like taking a void* and typecasting it to some struct.

Or like taking a memory buffer and reading it into a data division

YapBit -- Like a sequential file that reads a bit at a time


----

- Follow up using the bottom-up strategy getting db4o into Red Hat.

- Follow up with Karen Bennett of Red Hat regarding getting db4o into Red Hat and getting
    GCJ support into Eclipse.

- Extending VEP article

- Work with Sybase, BEA, and Actuate on DB API (after browser spike)

- Follow up about getting into OSCon (*done*)

- After first browser spike done; look at BIRT API; make suggestions for oo improvements.

---------------------

Standardization discussion:

here is the result of our discussion yesterday as I
remember it:


(1) How will our standard look like?

- We don't want to go JDO.
- S.O.D.A. is not intuitive enough.
- Even if we follow the new "Java method safe query"
approach, we will need to build some kind of tree.
- Let's use a new API and make it look as much like
SQL as we can.


(2) Our browser

The majority of the work for our browser will be to
get the GUI right. This is largely independant of
the way our querying API will look. We can port this
S.O.D.A. to our new dialect in no time (2 days).


(3) How do we fit in with other standards?

We don't.
EJB 3.0 is too slow.
JDO 2.0 is too ugly.


(4) Eclipse vs. JCP standardisation bodies.

Eclipse is faster. You just go and do it. 
That's what we will do. 



---------------------


Problems with current design:

- The Model strictly represents an open database file.  It does not represent search results.

- Opening a new database file results in closing and opening the Model object.  It should
  rather tell the Model to open a new database file and then the Model should trigger a refresh
  to all listening views.
  
- The current View object mix in Controller functionality.  Controllers should be separate objects.

- There should be separate Controller objects for each part of the window:
    * Tree
    * Path string
    * Hyperlink area
    * Object field pane
    
- The Model object currently just wraps an ObjectContainer and adds convenience methods.

- The FieldNode hierarchy represents the Model, but also embeds navigation into it!!!

- Navigating/Visiting aspects of the Model should be separated out of the Model graph using the Iterator
  pattern.  The Iterator should be a hierarchy/graph Iterator, and should embed a stack, the 
  visual representation of which will be the path string in the detail pane.
  
- This stack will be how we traverse up the tree control from its root to keep its focus
  synchronized with the detail pane.
  
- This Visitor becomes like the INavigator framework in Essential Data.

- This is how we provide an ED-like provider framework for JFace TreeViewers.


----------------------

Be able to see how many subobjects per node
Break down lists into 1..50, 51-100, etc...
Click on a Java class in package explorer, see instances


Display properties:
  Be able to configure the following on a global or a package basis:
    (select packages by substring or regex)

Display nodes: in addition to toString():
getDeclaredType(), getConcreteType(), getImplementedType(), 
call a specific method, use a special field;

*.*      [declared] [concrete] [method:(name)] [field:(name)]
*.db4o   [concrete] [method:(name)] [field:(name)]
         [declared] [concrete] [method:(name)] [field:(name)]
         [declared] [concrete] [method:(name)] [field:(name)]
         [declared] [concrete] [method:(name)] [field:(name)]


Filter from search box; limit search depth (add UI for this)
 - Incremental search
 - Regular expression


- Hide package names option
- Hide these classes option (for hiding system classes)


*DONE* Put SWT application launching instructions in /dev


April: version 1.0
October timeframe: mature browser



Carl's notes:

  Popup Nodes, if there are too many. Display first 50 and use node to expand
  Would like to see the number items per class
  Double-clicking on a node: Browse from here.
  History for objects
  Update the browse view from selecting class in Java perspective
  Declared type and implemented type
  Hide package names

  [declared type] [concrete type] [method:toString] [method:(name)] [field:(name)]


Use-cases:

1) Run on mobile devices

2) Debug use-cases:

2.1) Navigate
2.2) Query
2.3) Visualize object graphs  (Java Spider)


