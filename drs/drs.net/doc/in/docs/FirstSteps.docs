.n
.a FirstSteps ..
.0 First Steps ..
To get started as simply as possible, we are going to reuse the Pilot class from the db4o tutorial.
.c public class Pilot {
	string name;
	int points;
} ..
.1 Simple Replication ..
First, we will also use db4o to db4o replication, as it is the simplest and requires the least initial setup.

When replicating objects to and from a db4o database, we need to enable UUIDs and VersionNumbers. The ._
chapter on  .l db4oReplication db4o replication ..  explains more about these settings. We need to call these settings ._
before opening our database.
.c //Replication requires UUIDs and VersionNumbers
Db4o.Configure().GenerateUUIDs(int.MaxValue);
Db4o.Configure().GenerateVersionNumbers(int.MaxValue); ..
Open the source db4o database
.c ObjectContainer handheld = Db4o.OpenFile("handheld.yap"); ..
And let's store an object or two:
.c source.Set(new Pilot("Scott Felton", 200));
source.Set(new Pilot("Frank Green", 120)); ..
Great. Now we need our destination database:
.c //Open the destination db4o database
ObjectContainer desktop = Db4o.OpenFile("desktop.yap"); ..
Now, it's about time we start replicating some data. Let's set up our replication process to replicate some data from ._
our handheld, to our desktop:
.c ReplicationSession replication = Replication.Begin(handheld, desktop); ..
The ReplicationSession object contains all the functionality that the replication system  ._
requires to be able to comprehensively replicate modified data from one database to another.

Now that we've got the ReplicationSession set up and ready, let's get to the meat of this process:
.c //Query for objects changed from db4o
ObjectSet changed = replication.ProviderA().objectsChangedSinceLastReplication();

//Iterate changed objects, replicate them
while (changed.HasNext())
	replication.Replicate(changed.Next());
..
This code will get a list of all of the updated objects, and then replicate them to the destination ._
database. Easy! 

But wait, there's one important last step:
.c //commit all of our changes to both databases.
replication.Commit(); ..
Ok. NOW we're done. Now the data has been copied, and the transaction is commited. All of our changes ._
are safely commited in case of any failures. 

.1 Bi-Directional Replication ..
Our previous example copied all new or modified objects from our handheld device to our desktop ._
database. What if we want to go the other way? Well, we only have to add one more loop:
.c ObjectSet changed = replication.ProviderB().ObjectsChangedSinceLastReplication();

while(changed.HasNext())
	replication.Replicate(changed.Next()); ..
Now our handheld contains all of the new and modified records from our desktop.

Wow, wasn't that easy? Now, if there had been any modifications made to the destination datbase, ._
the two are now both in sync with eachother. Congratulations, you've now syncronized 2 db4o databases!

.1 Selective Replication ..
What if our handheld dosn't have enough memory to store a complete set of all of our data objects? ._
Well, then we should check our objects before replicating them by modifing the while loop:
.c ObjectSet changed = replication.ProviderB().ObjectsChangedSinceLastReplication();

while (changed.HasNext()){
	Pilot p = (Pilot)changed.Next();
	if(p.name.StartsWith("S"))
		replication.Replicate(p);
} ..
Now, only Pilots whose name starts with "S" will be replicated to our handheld database.