<project name="dRS" default="publish"  xmlns:ivy="antlib:fr.jayasoft.ivy.ant">
	<import file="../build-1.1/common-1.1.xml"/>
	
	<dirname property="drs.basedir" file="${ant.file}"/>	
	<echo>XXXX ${drs.basedir}</echo>
	
	<property file="${drs.basedir}/build-1.1.properties" />
	
	<target name="clean">
  	<cleanIvyDir/>
  	<delete dir="doc/out"	failonerror="true"/>
	</target>
	
	<target name="init" depends="">
		<tstamp />
		<initIvyDir/>
		<buildDb4oDevTool/>
		<mkdir dir="${tempApi}"/>
		<mkdir dir="${tempZip}"/>		
	</target>
	
	 <target name="configure" depends="init">
        <ivy:configure file="${ivy.conf.dir}/ivyconf.xml" />
   </target>
   
   <target name="resolve" depends="configure">
        <ivy:resolve file="${drs.basedir}/ivy.xml"/>   
   		  <ivy:retrieve pattern="${ivy.retrieve.pattern}" conf="${ivy.configurations}" />
    </target>
   
   <target name="publish" depends="zip">
			<publishToIvy/>
			<antcall target="clean" />
	</target>
	
	<target name="run-tests" description="Run jar beforehand if you run this target manually">
		<jar destfile="${defaultArtifactDir}/log4j.xml.jar">
    	<fileset file="src/core/log4j.xml"/>
  	</jar>
		<path id="tests.class.path">
				<fileset dir="lib" 										includes="*.jar"/>
				<fileset dir="${defaultArtifactDir}"	includes="*.jar"/>
				<fileset dir="${ivy.lib.dir}"					includes="*.jar"/>
		</path>	 
		<java fork="true" classname="com.db4o.drs.test.all.AllDrsTests">
			<classpath refid="tests.class.path" />
		</java>	
  </target>
	
	<macrodef name="dRSjar">
		<attribute name="srcDir"/> 
		<attribute name="jarPath"/> 
		<sequential>
			<path id="compile.class.path">
				<fileset dir="${drsLibDir}" 					includes="*.jar"/>
				<fileset dir="${defaultArtifactDir}"	includes="*.jar"/>
				<fileset dir="${ivy.lib.dir}"					includes="*.jar"/>
			</path>
			<buildjar srcDir="@{srcDir}" jarPath="@{jarPath}" classPathRefId="compile.class.path" 			
				fork="yes" target="1.5" source="1.5" exclude="log4j.xml"/>
		</sequential>
	</macrodef>
	
	<target name="jar" depends="clean, resolve">
		<dRSjar srcDir="${coreSrcDir}" 			jarPath="${coreJarPath}"/>
		<dRSjar srcDir="${testSrcDir}" 			jarPath="${testJarPath}"/>
		<dRSjar srcDir="${tutorialSrcDir}" 	jarPath="${tutorialJarPath}"/>
	</target>
	
	<target name="zip" depends="jar, doctor, javadoc, src" description="This task does not work standalone">
		<copy	todir="${tempJar}">
		 <fileset dir="${defaultArtifactDir}"/>
  	</copy>
		<renameJar srcJarDir="${tempJar}"/>
		
		<zip destfile="${zipPath}">
			<zipfileset dir="${ivy.lib.dir}" prefix="${zipDir}/lib"/>
			<zipfileset dir="${tempJar}" prefix="${zipDir}/lib"/>
			<zipfileset dir="." prefix="${zipDir}" includes="machine.properties, ant.properties, build.xml, *.txt" />
			<zipfileset dir="${drsLibDir}" prefix="${zipDir}/lib" includes="*.jar, *.txt" />
			<!--<zipfileset dir="${tempSrcDir}" prefix="${zipDir}/src" excludes="misc, jira" />-->			
			<zipfileset dir="${drs.basedir}/doc/out" prefix="${zipDir}/doc/tutorial" />		
			<zipfileset dir="${tempApi}" prefix="${zipDir}/doc/api" />
			<zipfileset file="${tempSrcZipPath}" prefix="${zipDir}"/>	
		</zip>	
		
		<delete dir="${tempSrcDir}" failonerror="true"/>
	</target>
	
	<target name="src" depends="init">
		<mkdir dir="${tempSrcDir}"/>
		
		<copySrcDir srcDir="${coreSrcDir}" 				destDir="${tempSrcDir}"/>
		
		<echo message="inserting GPL header..."/>
		<filehead beforePattern="package" header="${content.gplheader}" >
			<sources dir="${tempSrcDir}">
				<include name="**/*.java" />
			</sources>
		</filehead>
		
		<zip destfile="${tempSrcZipPath}">
			<zipfileset dir="${tempSrcDir}" prefix="src"/>			
		</zip>
		
	</target>
	
	<target name="doctor">
		<!-- 
			Use the pre-compiled doctor.jar, but don't worry about that.
			We are going to obsolete doctor very soon, right?
		-->
		<java fork="true" classname="com.yetac.doctor.Doctor" classpathref="compile.class.path">
			<arg line="${drs.basedir}/doc ${font.pdf.base}" />
			<classpath>
				<fileset dir="${drsLibDir}/doctor" includes="*.jar"/>
			</classpath>
		</java>
		<move file="${drs.basedir}/doc/out/doctor.pdf" tofile="${drs.basedir}/doc/out/dRS-tutorial.pdf"/>
	</target>
	
	<target name="javadoc">
		<javadoc destdir="${tempApi}" author="true" version="true" use="true" windowtitle="dRS" classpathref="compile.class.path">
			<fileset dir="${coreSrcDir}" defaultexcludes="yes">
				<include name="com/db4o/drs/**/*.java" />
			</fileset>
		</javadoc>
	</target>	
</project>
