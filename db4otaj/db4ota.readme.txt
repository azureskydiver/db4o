The code you find in the db4ota and db4otaj source modules and/or in
the db4ota jar provide the basis for an implementation of transparent
activation for db4o. This is just a minimalist first step. To fill in
the gaps and to guide further development, we depend on your feedback.
Please report issues and post proposals or other comments in the db4o
Product Developer Forum at http://developer.db4o.com/

1. Transparent Activation

db4o currently relies on the developer to explicitly take care of the
activation depth of his/her persistent object graphs, either by
programmatic activation, or by configuration. (If you are not familiar
with the term "activation" in the context of db4o, please refer to
the db4o reference documentation.) Transparent activation is meant to
relieve the developer from this burden by activating objects under
the hood as needed by the client application.

2. API, hooks and creating TA aware classes

For a description of the current approach and API, please refer to the
API documentation for com.db4o.ta.Activatable.

For a more detailed code example, please refer to the minimalist Project
class model in db4ota/test. The code demonstrates what is required to
manually create TA aware classes. Everything TA specific is annotated with
comments. Please note that the PagedList class is just an example for a TA
aware collection class - it is not likely to become part of the official
API, but there will be other, official TA aware collection implementations.

3. Injecting TA awareness via bytecode instrumentation

An alternative to requiring developers to manually implement TA aware
classes is to inject TA awareness in their original, "unaware" code.
In our scenario this basically means: Generate the Activatable interface
declaration, the bind(Activator) method implementation, a field
to keep a reference to the corresponding Activator instance, and the
activate() call at the beginning of every method. This is accomplished
via a classloader that injects this code into the persistent classes
when they are loaded. (Currently persistent classes have to be "tagged"
by providing an appropriate ClassFilter instance.)

Please refer to RunTASampleInstrumented in the db4otaj/test module for
an example of the (currently somewhat complicated) setup of the
instrumenting classloader. Please note that, in addition to this
classloading wrapper, db4o also explicitly needs to be configured to
use the (instrumenting) classloader of the  persistent classes, as
shown in TransparentActivationSampleMain in the same package.   

Even more than the basic API/implementation conventions, the
instrumentation API/configuration will be subject to changes. In
particular, we will provide a unified framework for any kind of
bytecode instrumentation, with plugins for features like Native
Queries and Transparent Activation, including a generic wrapper
for starting applications with instrumentation support.

More detailed documentation on the current status of TA and
instrumentation API and implementation can be found here:

http://developer.db4o.com/Resources/view.aspx/Transparent_Activation_Framework

4. Open Issues

One of the most serious issue with this approach is that it doesn't cover
direct field access from the outside - this scenario could not be handled
from within the persistent classes exclusively, it would rather be the
clients accessing those fields that would have to take responsibility
for correct activation upon field access.

5. Future development

As already mentioned at the beginning of this text, future development
will mainly be driven by you - please provide feedback! The following
is a (certainly non-exhaustive) ad hoc list of possible additions,
features and modifications.

- More convenient configuration for TA support
- More performant registry for activatable objects
- Performant TA aware collection implementation(s)
- Drop-in replacement of default platform collections for TA aware custom implementations
- Instrumentation of default platform classes
- Unified bytecode instrumentation framework
- Partial activation
- Fine-grained configuration for TA strategies
- Handle external access to fields
