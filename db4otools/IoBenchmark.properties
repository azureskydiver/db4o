# The number of objects the DB works with during the respective 
# run of the run.benchmark.* target  
#
# Be aware: running the benchmark with large numbers of object (>100k)
# 1) May take a very long time, depending on your machine speed
# 2) May require to increase the heap size of your JVM (e.g. with '-Xmx512m')
# 3) Will need a fair amount of disk space for the DB- and the logfile (1.5GB for 1Mio objects)
object.count.small=1000
object.count.medium=30000
object.count.large=1000000

# JVM arguments to pass to the VM running the benchmark
# Can be used to increase the heap as explained above
jvm.args=-Xmx512m

# The two benchmark results files for a delayed benchmark run
results.file.1=db4o-IoBenchmark-results-30000_faster.log
results.file.2=db4o-IoBenchmark-results-30000_slower.log

# The delays to work with when delaying.
# Options are
# - adjust.delays=false
#	This will use the actual differences as calculated for delaying.
#	Using this method usually results in too slow benchmark results. 
# - adjust.delays=true
#	This measures the time actually spent when trying to wait for a given delay
#	and then adjusts the calculated delays to get benchmark results closer to 
#	the expected numbers.
adjust.delays=true

# Name of the db4o jar file, to be placed in the lib folder
db4o.jar=db4o-7.0.25.8695-java5.jar

# The name of the DB file for the benchmark (will be deleted after each run)
db.file.name=ioBenchMark.db4o