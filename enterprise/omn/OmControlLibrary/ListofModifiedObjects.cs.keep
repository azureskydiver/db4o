using System;
using System.Collections.Generic;
using System.Text;
using System.Collections;
using System.Windows.Forms;  
using OMControlLibrary.Common;
using OManager.BusinessLayer.QueryManager;
using OME.Logging.Common;
using OME.Logging.Tracing;

namespace OMControlLibrary
{
    //public class ListofModifiedObjects
    //{

    //    private  static Hashtable hash;

    //    public static Hashtable Instance
    //    {
    //        get
    //        {
    //            if (hash == null)
    //            {
    //                hash = new Hashtable(); 

    //            }
    //            return hash;
    //        }

    //    }

    //    public static void AddDatagrid(string strClassName, dbDataGridView dbDataGridViewQueryResult, )
    //    {
    //        if (ListofModifiedObjects.Instance.ContainsKey(strClassName))
    //        {
    //            ListofModifiedObjects.Instance.Remove(strClassName);
    //            ListofModifiedObjects.Instance.Add(strClassName, dbDataGridViewQueryResult);
    //        }
    //        else
    //        {
    //            ListofModifiedObjects.Instance.Add(strClassName, dbDataGridViewQueryResult);
    //        }
    //    }

    //    public static void SaveBeforeWindowHiding(ref bool check, ref DialogResult dialogRes, ref bool checkforValueChanged,string Caption, dbDataGridView db, int hierarchyLevel)
    //    {
    //        try
    //        {               
    //            foreach (DataGridViewRow row in db.Rows)
    //            {


    //                if (Convert.ToBoolean(row.Cells[OMControlLibrary.Common.Constants.QUERY_GRID_ISEDITED_HIDDEN].Value) == true)
    //                {
    //                    checkforValueChanged = true;
    //                    break;
    //                }
    //            }
    //            if (checkforValueChanged == true)
    //            {
    //                dialogRes = MessageBox.Show("'"+Caption + "' contains some modified objects, Do you want to save changes?", Helper.GetResourceString(OMControlLibrary.Common.Constants.PRODUCT_CAPTION), MessageBoxButtons.YesNo, MessageBoxIcon.Question);
    //                if (dialogRes == DialogResult.Yes)
    //                {
    //                    foreach (DataGridViewRow row in db.Rows)
    //                    {


    //                        if (Convert.ToBoolean(row.Cells[OMControlLibrary.Common.Constants.QUERY_GRID_ISEDITED_HIDDEN].Value) == true)
    //                        {
    //                            if (hierarchyLevel != -1)
    //                            {
    //                                Helper.DbInteraction.SaveCollection(row.Tag, hierarchyLevel);
    //                            }
    //                            else
    //                            {
    //                                int calLevel = CalculateLevel(row.Tag);
    //                                Helper.DbInteraction.SaveCollection(row.Tag, calLevel);
    //                            }

    //                        }
    //                    }
    //                }
    //                else
    //                {
    //                    foreach (DataGridViewRow row in db.Rows)
    //                    {
    //                        if (Convert.ToBoolean(row.Cells[OMControlLibrary.Common.Constants.QUERY_GRID_ISEDITED_HIDDEN].Value) == true)
    //                        {                               
    //                            Helper.DbInteraction.RefreshObject(row.Tag, 1);                               
    //                        }
    //                    }

    //                }
    //            }

    //        }
    //        catch (Exception ex)
    //        {
    //            LoggingHelper.ShowMessage(ex);
    //        }

    //    }
    //    public static int CalculateLevel(object obj)
    //    { 
    //        dbInteraction dbI=new dbInteraction();
    //        return dbI.GetDepth(obj);            

    //    }
    //}

    public class ListofModifiedObjects
    {

        private static DataStructureforGrid datagrid;
        private static Hashtable hash;
        private static ArrayList lstHierarchy;

        public static DataStructureforGrid Instance
        {
            get
            {
                if (datagrid == null)
                {
                   
                    datagrid = new DataStructureforGrid();

                }
                return datagrid;
            }

        }

        public static void AddDatagrid(DataStructureforGrid datagrid, string strClassName )
        {
            if (ListofModifiedObjects.Instance.GridDetails.ContainsKey(strClassName))
            {
                ListofModifiedObjects.Instance.GridDetails.Remove(strClassName);
                ListofModifiedObjects.Instance.GridDetails.Add(strClassName, datagrid);
            }
            else
            {
                ListofModifiedObjects.Instance.GridDetails.Add(strClassName, datagrid);
            }
        }

        public static void SaveBeforeWindowHiding(ref bool check, ref DialogResult dialogRes, ref bool checkforValueChanged, string Caption, dbDataGridView db, int hierarchyLevel)
        {
            try
            {
                foreach (DataGridViewRow row in db.Rows)
                {


                    if (Convert.ToBoolean(row.Cells[OMControlLibrary.Common.Constants.QUERY_GRID_ISEDITED_HIDDEN].Value) == true)
                    {
                        checkforValueChanged = true;
                        break;
                    }
                }
                if (checkforValueChanged == true)
                {
                    dialogRes = MessageBox.Show("'" + Caption + "' contains some modified objects, Do you want to save changes?", Helper.GetResourceString(OMControlLibrary.Common.Constants.PRODUCT_CAPTION), MessageBoxButtons.YesNo, MessageBoxIcon.Question);
                    if (dialogRes == DialogResult.Yes)
                    {
                        foreach (DataGridViewRow row in db.Rows)
                        {


                            if (Convert.ToBoolean(row.Cells[OMControlLibrary.Common.Constants.QUERY_GRID_ISEDITED_HIDDEN].Value) == true)
                            {
                                if (hierarchyLevel != -1)
                                {
                                    Helper.DbInteraction.SaveCollection(row.Tag, hierarchyLevel);
                                }
                                else
                                {
                                    int calLevel = CalculateLevel(row.Tag);
                                    Helper.DbInteraction.SaveCollection(row.Tag, calLevel);
                                }

                            }
                        }
                    }
                    else
                    {
                        foreach (DataGridViewRow row in db.Rows)
                        {
                            if (Convert.ToBoolean(row.Cells[OMControlLibrary.Common.Constants.QUERY_GRID_ISEDITED_HIDDEN].Value) == true)
                            {
                                Helper.DbInteraction.RefreshObject(row.Tag, 1);
                            }
                        }

                    }
                }

            }
            catch (Exception ex)
            {
                LoggingHelper.ShowMessage(ex);
            }

        }
        public static int CalculateLevel(object obj)
        {
            dbInteraction dbI = new dbInteraction();
            return dbI.GetDepth(obj);

        }
    }

    public class DataStructureforGrid
    {
       
        Hashtable gridDetails;

        public Hashtable GridDetails
        {
            get { return gridDetails; }
            set { gridDetails = value; }
        }       
        ArrayList objHierarchy;

        public ArrayList ObjHierarchy
        {
            get { return objHierarchy; }
            set { objHierarchy = value; }
        }
    }
}
