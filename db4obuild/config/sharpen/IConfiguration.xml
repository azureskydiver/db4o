<?xml version="1.0"?>



  <type name="Db4objects.Db4o.Config.IConfiguration">
	<member name = "ActivationDepth(int)">
	    <doc>
		 <summary>sets the activation depth to the specified value.</summary>
		 <remarks>
		 sets the activation depth to the specified value.
		 <br /><br /><b>Why activation?</b><br />
		 When objects are instantiated from the database, the instantiation of member
		 objects needs to be limited to a certain depth. Otherwise a single object
		 could lead to loading the complete database into memory, if all objects where
		 reachable from a single root object.<br /><br />
		 db4o uses the concept "depth", the number of field-to-field hops an object
		 is away from another object. <b>The preconfigured "activation depth" db4o uses
		 in the default setting is 5.</b>
		 <br /><br />Whenever an application iterates through the
		 <see cref="Db4objects.Db4o.IObjectSet">IObjectSet</see>
		 of a query result, the result objects
		 will be activated to the configured activation depth.<br /><br />
		 A concrete example with the preconfigured activation depth of 5:<br />
		 <pre>
		 // Object foo is the result of a query, it is delivered by the ObjectSet
		 object foo = objectSet.Next();</pre>
		 foo.member1.member2.member3.member4.member5 will be a valid object<br />
		 foo, member1, member2, member3 and member4 will be activated<br />
		 member5 will be deactivated, all of it's members will be null<br />
		 member5 can be activated at any time by calling
		 <see cref="Db4objects.Db4o.IObjectContainer.Activate">IObjectContainer.Activate(member5, depth)
		 	</see>
		 .
		 <br /><br />
		 Note that raising the global activation depth will consume more memory and
		 have negative effects on the performance of first-time retrievals. Lowering
		 the global activation depth needs more individual activation work but can
		 increase performance of queries.<br /><br />
		 <see cref="Db4objects.Db4o.IObjectContainer.Deactivate">IObjectContainer.Deactivate(object, depth)
		 	</see>
		 can be used to manually free memory by deactivating objects.<br /><br />
		 In client/server environment the same setting should be used on both
		 client and server<br /><br />.
		 </remarks>
	 	 <param name="depth">the desired global activation depth.</param>

		 <seealso cref="Db4objects.Db4o.Config.IObjectClass.MaximumActivationDepth">configuring classes individually
		 	</seealso>

		 <summary>gets the configured activation depth.</summary>
	    </doc>
	</member>
	<member name="CallConstructors(bool)">
           <doc>
       		 <summary>
		 advises db4o to try instantiating objects with/without calling
		 constructors.
		 </summary>
		 <remarks>
		 advises db4o to try instantiating objects with/without calling
		 constructors.
		 <br /><br />
		 Not all .NET-environments support this feature. db4o will
		 attempt, to follow the setting as good as the enviroment supports.
		 This setting may also be overridden for individual classes in
		 <see cref="Db4objects.Db4o.Config.IObjectClass.CallConstructor">Db4objects.Db4o.Config.IObjectClass.CallConstructor
		 	</see>
		 .
		 <br /><br />The default setting depends on the features supported by your current environment.<br /><br />
		 In client/server environment this setting should be used on both
		 client and server.
		 <br /><br />
		 </remarks>
		<param name="flag">
		 - specify true, to request calling constructors, specify
		false to request <b>not</b> calling constructors.
		</param>
		 <seealso cref="Db4objects.Db4o.Config.IObjectClass.CallConstructor">Db4objects.Db4o.Config.IObjectClass.CallConstructor
		 	</seealso>

	   </doc>
 	</member>
	<member name="OptimizeNativeQueries(bool)">
	   <doc>
		<summary>
		If set to true, db4o will try to optimize native queries
		dynamically at query execution time, otherwise it will
		run native queries in unoptimized mode as SODA evaluations.
		</summary>
		<remarks>
		If set to true, db4o will try to optimize native queries
		dynamically at query execution time, otherwise it will
		run native queries in unoptimized mode as SODA evaluations.
		The following assemblies should be available for native query switch to take effect:
		Db4objects.Db4o.NativeQueries.dll, Db4objects.Db4o.Instrumentation.dll.
		<br /><br />The default setting is <code>true</code>.<br /><br />
		In client-server environment this setting should be used on both client and server.<br /><br />
		</remarks>
		<param name="optimizeNQ">
		true, if db4o should try to optimize
		native queries at query execution time, false otherwise
		</param>

		<seealso cref="Db4objects.Db4o.Config.ICommonConfiguration.OptimizeNativeQueries"
			>Db4objects.Db4o.Config.ICommonConfiguration.OptimizeNativeQueries</seealso>
		
	   </doc>
	</member>
	<member name="StringEncoding(IStringEncoding)">
	   <doc>
		 <summary>configures the string encoding to be used.</summary>
		 <remarks>
		 configures the string encoding to be used.
		 <br /><br />The string encoding can not be changed in the lifetime of a
		 database file. To set up the database with the correct string encoding,
		 this configuration needs to be set correctly <b>before</b> a database
		 file is created with the first call to
		 <see cref="Db4objects.Db4o.Db4oFactory.OpenFile">Db4objects.Db4o.Db4oFactory.OpenFile
		 	</see>
		 or
		 <see cref="Db4objects.Db4o.Db4oFactory.OpenServer">Db4objects.Db4o.Db4oFactory.OpenServer
		 	</see>
		 .
		 <br /><br />For subsequent open calls, db4o remembers built-in
		 string encodings. If a custom encoding is used (an encoding that is
		 not supplied from within the db4o library), the correct encoding
		 needs to be configured correctly again for all subsequent calls
		 that open database files.
		 <br /><br />Example:<br />
		 <code>config.StringEncoding(StringEncodings.Utf8());</code>
		 </remarks>
		 <seealso cref="Db4objects.Db4o.Config.Encoding.StringEncodings">Db4objects.Db4o.Config.Encoding.StringEncodings
		 	</seealso>

	   </doc>
	</member>
	<member name="AddAlias(IAlias)">
	<doc>
		<summary>adds a new Alias for a class, namespace or package.
					</summary>
					<remarks>
						adds a new Alias for a class, namespace or package.
						<br />
						<br />
						Aliases can be used to persist classes in the running application
						to different persistent classes in a database file or on a db4o
						server.
						<br />
						<br />
						Two simple Alias implementations are supplied along with db4o:
						<br />
						-
						<see cref="TypeAlias">TypeAlias</see>
						provides an #equals() resolver to match names directly.
						<br />
						-
						<see cref="WildcardAlias">WildcardAlias</see>
						allows simple pattern matching with one single '*' wildcard
						character.
						<br />
						<br />
						It is possible to create own complex
						<see cref="IAlias">IAlias</see>
						constructs by creating own resolvers that implement the
						<see cref="IAlias">IAlias</see>
						interface.
						<br />
						<br />
						Four examples of concrete usecases:
						<br />
						<br />
						<code>
							<b>// Creating an Alias for a single class</b>
							<br />
							Db4oFactory.Configure().AddAlias(
							<br />&#160;&#160;new TypeAlias("Tutorial.F1.Pilot", "Tutorial.F1.Driver"));<br />
              <br /><br />
              <b>// Accessing a Java package from a .NET assembly</b><br />
              Db4o.configure().addAlias(<br />
              &#160;&#160;new WildcardAlias(<br />
              &#160;&#160;&#160;&#160;"com.f1.*",<br />
              &#160;&#160;&#160;&#160;"Tutorial.F1.*, Tutorial"));<br />
              <br /><br />
              <b>// Using a different local .NET assembly</b><br />
              Db4o.configure().addAlias(<br />
              &#160;&#160;new WildcardAlias(<br />
              &#160;&#160;&#160;&#160;"Tutorial.F1.*, Tutorial",<br />
              &#160;&#160;&#160;&#160;"Tutorial.F1.*, RaceClient"));<br />
            </code>
            <br /><br />Aliases that translate the persistent name of a class to
            a name that already exists as a persistent name in the database
            (or on the server) are not permitted and will throw an exception
            when the database file is opened.
            <br /><br />Aliases should be configured before opening a database file
            or connecting to a server.
          </remarks>

        </doc>
      </member>

      <member name="AutomaticShutDown(bool)">
        <doc>
          <summary>turns automatic shutdown of the engine on and off.</summary>
          <remarks>
            turns automatic shutdown of the engine on and off.
          </remarks>
          <param name="flag">whether db4o should shut down automatically.</param>
        </doc>
      </member>

      <member name="LockDatabaseFile(bool)">
        <doc>
          <summary>can be used to turn the database file locking thread off.</summary>
          <param name="flag">
            <code>false</code> to turn database file locking off.
          </param>

        </doc>
      </member>

      <member name="ReflectWith(IReflector)">
        <doc>
          <summary>configures the use of a specially designed reflection implementation.</summary>
          <remarks>
            configures the use of a specially designed reflection implementation.
            <br /><br />
            db4o internally uses System.Reflection by default. On platforms that
            do not support this package, customized implementations may be written
            to supply all the functionality of the interfaces in System.Reflection
            namespace. This method can be used to install a custom reflection
            implementation.

          </remarks>

        </doc>
      </member>

      <member name="WeakReferenceCollectionInterval(int)">
        <doc>
          <summary>configures the timer for WeakReference collection.</summary>
          <remarks>
            configures the timer for WeakReference collection.
            <br /><br />The default setting is 1000 milliseconds.
            <br /><br />Configure this setting to zero to turn WeakReference
            collection off.

          </remarks>
          <param name="milliseconds">the time in milliseconds</param>
        </doc>
      </member>

      <member name="WeakReferences(bool)">
        <doc>
          <summary>turns weak reference management on or off.</summary>
          <remarks>
            turns weak reference management on or off.
            <br /><br />
            This method must be called before opening a database.
            <br /><br />
            Performance may be improved by running db4o without using weak
            references durring memory management at the cost of higher
            memory consumption or by alternatively implementing a manual
            memory management scheme using
            <see cref="IExtObjectContainer.Purge">IExtObjectContainer.Purge</see>
            <br /><br />Setting the value to <code>false</code> causes db4o to use hard
            references to objects, preventing the garbage collection process
            from disposing of unused objects.
            <br /><br />The default setting is <code>true</code>.
          </remarks>
        </doc>
      </member>
    

  </type>

