<?xml version="1.0"?>
<doc>
	<type name="Db4objects.Db4o.Db4oEmbedded">
		<doc>
			<summary>Factory class to open db4o instances in embedded
				mode.</summary>
			<remarks> Factory class to open db4o instances in embedded mode.
			</remarks>
			<seealso cref="Db4objects.Db4o.CS.Db4oClientServer"> Db4objects.Db4o.CS.Db4oClientServer in
				Db4objects.Db4o.CS.dll for methods to open db4o servers and db4o
				clients.</seealso>
			<since>7.5</since>
		</doc>
		<member name="OpenFile(IEmbeddedConfiguration, string)">
			<doc>
				<summary>
					opens an
					<see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
					on the specified database file for local use.
					<br />
					<br />
					A database file can only be opened once, subsequent attempts to
					open another
					<see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
					against the same file will result in a
					<see cref="Db4objects.Db4o.Ext.DatabaseFileLockedException"> DatabaseFileLockedException</see>
					.
					<br />
					<br />
					Database files can only be accessed for readwrite access from one
					process at one time. All versions except for db4o mobile edition
					use an internal mechanism to lock the database file for other
					processes.
					<br />
					<br />
				</summary>
				<param name="config">
					a custom
					<see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
					instance to be obtained via
					<see cref="newConfiguration">newConfiguration</see>
				</param>
				<param name="databaseFileName">an absolute or relative path to the database
					file</param>
				<returns>
					an open
					<see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
				</returns>
				<seealso cref="Db4objects.Db4o.Config.IConfiguration.ReadOnly">
					Db4objects.Db4o.Config.IConfiguration.ReadOnly</seealso>
				<seealso cref="Db4objects.Db4o.Config.IConfiguration.Encrypt"> Db4objects.Db4o.Config.IConfiguration.Encrypt
				</seealso>
				<seealso cref="Db4objects.Db4o.Config.IConfiguration.Password">
					Db4objects.Db4o.Config.IConfiguration.Password</seealso>
				<exception cref="Db4objects.Db4o.Ext.Db4oIOException"> I/O operation failed or was unexpectedly
					interrupted.</exception>
				<exception cref="Db4objects.Db4o.Ext.DatabaseFileLockedException"> the required database file is locked by
					another process.</exception>
				<exception cref="Db4objects.Db4o.Ext.IncompatibleFileFormatException">
					runtime
					<see cref="Db4objects.Db4o.Config.IConfiguration">configuration</see>
					is not compatible with the configuration of the database file.
				</exception>
				<exception cref="Db4objects.Db4o.Ext.OldFormatException">
					open operation failed because the database file is in old format
					and
					<see cref="Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates">
						Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates</see>
					is set to false.
				</exception>
				<exception cref="Db4objects.Db4o.Ext.DatabaseReadOnlyException"> database was configured as read-only.
				</exception>
			</doc>
		</member>
	</type>
	<type name="Db4objects.Db4o.Collections.ArrayDictionary4">
		<doc>
			<summary>Transparent activatable IDictionary implementation.
			</summary>
			<remarks>
				Transparent activatable IDictionary implementation. Implements IDictionary interface
				using two arrays to store keys and values.
				<br />
				<br />
				When instantiated as a result of a query, all the internal members
				are NOT activated at all. When internal members are required to
				perform an operation, the instance transparently activates all the
				members.
			</remarks>
			<seealso cref="System.Collections.Generic.IDictionary">System.Collections.IDictionary
			</seealso>
			<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
			</seealso>
		</doc>
		<member name="ctor()">
			<doc>
				<summary>
					Initializes a new collection with the initial capacity = 16.
				</summary>
			</doc>
		</member>
		<member name="ctor(int)">
			<doc>
				<summary>
					Initializes a collection of the specified initial capacity.
				</summary>
			</doc>
		</member>
		<member name="Clear()">
			<doc>
				<summary> System.Collections.Generic.IDictionary implementation but transparently activates
					the members as required.</summary>
				<remarks> System.Collections.Generic.IDictionary implementation but transparently activates
					the members as required.</remarks>
				<seealso cref="System.Collections.Generic.IDictionary"></seealso>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="Count">
			<doc>
				<summary> Returns the number of elements in the collection.</summary>
				<remarks> Returns the number of elements in the collection. The collection gets activated. </remarks>
				<seealso cref="System.Collections.Generic.IDictionary"></seealso>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="Values">
			<doc>
				<summary> Returns the values of the collection.</summary>
				<remarks> Returns the values of the collection. The collection gets activated.</remarks>
				<seealso cref="System.Collections.Generic.IDictionary"></seealso>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="GetHashCode()">
			<doc>
				<summary> Returns the hash code of the collection.</summary>
				<remarks> Returns the hash code of the collection. Collection members
				get activated as required.</remarks>
				<seealso cref="System.Collections.Generic.IDictionary"></seealso>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
	</type>
	<type name="Db4objects.Db4o.Collections.ArrayList4">
		<doc>
			<summary>Transparent activatable ArrayList implementation.
			</summary>
			<remarks>
				Transparent activatable ArrayList implementation. Implements IList
				interface using an array to store elements. Each ArrayList4 instance
				has a capacity, which indicates the size of the internal array.
				<br />
				<br />
				When instantiated as a result of a query, all the internal members
				are NOT activated at all. When internal members are required to
				perform an operation, the instance transparently activates all the
				members.
			</remarks>
			<seealso cref="System.Collections.ArrayList">System.Collections.ArrayList
			</seealso>
			<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
			</seealso>
		</doc>
		<member name="ctor()">
			<doc>
				<summary>
				Initializes a new collection with the initial capacity = 10.
				</summary>
			</doc>
		</member>
		<member name="ctor(ICollection)">
				<doc>
					<summary>
					Initializes a collection with the members of the parameter collection.
					</summary>
				</doc>
		</member>
		<member name="ctor(int)">
			<doc>
				<summary>
				Initializes a collection of the specified initial capacity.
				</summary>
			</doc>
		</member>
		<member name="Add(int, E)">
			<doc>
				<summary> Inserts an element into the collection 
				at the specified index. </summary>
				<remarks> Inserts an element into the collection 
				at the specified index.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="Clear()">
			<doc>
				<summary> Removes all elements from the collection.</summary>
				<remarks> Removes all elements from the collection.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="EnsureCapacity(int)">
			<doc>
				<summary> Resizes the collection capacity to the specified size if the 
				current capacity is less than the parameter value.</summary>
				<remarks> Resizes the collection capacity to the specified size if the 
				current capacity is less than the parameter value.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="Get(int)">
			<doc>
				<summary> Returns the collection element at the specified index.</summary>
				<remarks> Returns the collection element at the specified index.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="RemoveImpl(int)">
			<doc>
				<summary> Removes the collection element at the specified index.</summary>
				<remarks> Removes the collection element at the specified index.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="Set(int, E)">
			<doc>
				<summary> Replaces the collection element with the specified object at the specified index.</summary>
				<remarks> Replaces the collection element with the specified object at the specified index.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="Count">
			<doc>
				<summary> Returns the size of the collection.</summary>
				<remarks> Returns the size of the collection.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
		<member name="TrimExcess()">
			<doc>
				<summary> Resizes the collection to its actual size.</summary>
				<remarks> Resizes the collection to its actual size.</remarks>
				<seealso cref="Db4objects.Db4o.TA.IActivatable">Db4objects.Db4o.TA.IActivatable
				</seealso>
			</doc>
		</member>
	</type>
	<type name="Db4objects.Db4o.Diagnostic.IDiagnosticConfiguration">
		<doc>
			<summary>provides methods to configure the behaviour of db4o
				diagnostics.</summary>
			<remarks>
				provides methods to configure the behaviour of db4o diagnostics.
				<br />
				<br />
				Diagnostic system can be enabled on a running db4o database to
				notify a user about possible problems or misconfigurations.
				Diagnostic listeners can be be added and removed with calls to this
				interface. To install the most basic listener call:
				<br />
				<code>Db4oFactory.Configure().Diagnostic().AddListener(new
					DiagnosticToConsole());</code>
			</remarks>
			<seealso cref="IConfiguration.Diagnostic">IConfiguration.Diagnostic
			</seealso>
			<seealso cref="IDiagnosticListener">IDiagnosticListener
			</seealso>
		</doc>
	</type>
	<type name="Db4objects.Db4o.Defragment.Defragment">
		<doc>
			<summary>defragments database files.</summary>
			<remarks>
				defragments database files.
				<br />
				<br />
				db4o structures storage inside database files as free and occupied
				slots, very much like a file system - and just like a file system it
				can be fragmented.
				<br />
				<br />
				The simplest way to defragment a database file:
				<br />
				<br />
				<code>Defragment.Defrag("sample.yap");
				</code>
				<br />
				<br />
				This will move the file to "sample.yap.backup", then create a
				defragmented version of this file in the original position, using a
				temporary file "sample.yap.mapping". If the backup file already
				exists, this will throw an exception and no action will be taken.
				<br />
				<br />
				For more detailed configuration of the defragmentation process,
				provide a DefragmentConfig instance:
				<br />
				<br />
				<code>
					DefragmentConfig config=new
					DefragmentConfig("sample.yap","sample.bap",new
					BTreeIDMapping("sample.map"));
					<br />
					config.ForceBackupDelete(true);
					<br />
					config.StoredClassFilter(new AvailableClassFilter());
					<br />
					config.Db4oConfig(db4oConfig);
					<br />
					Defragment.Defrag(config);
				</code>
				<br />
				<br />
				This will move the file to "sample.bap", then create a defragmented
				version of this file in the original position, using a temporary
				file "sample.map" for BTree mapping. If the backup file already
				exists, it will be deleted. The defragmentation process will skip
				all classes that have instances stored within the yap file, but that
				are not available on the class path (through the current
				classloader). Custom db4o configuration options are read from the
				<see cref="IConfiguration">IConfiguration</see>
				passed as db4oConfig.
				<strong>Note:</strong>
				For some specific, non-default configuration settings like UUID
				generation, etc., you
				<strong>must</strong>
				pass an appropriate db4o configuration, just like you'd use it
				within your application for normal database operation.
			</remarks>
		</doc>
	</type>
	<type name="Db4objects.Db4o.Config.IConfiguration">
		<doc>
			<member name="ActivationDepth(int)">
				<doc>
					<summary>sets the activation depth to the specified value.
					</summary>
					<remarks>
						sets the activation depth to the specified value.
						<br />
						<br />
						<b>Why activation?</b>
						<br />
						When objects are instantiated from the database, the instantiation
						of member objects needs to be limited to a certain depth.
						Otherwise a single object could lead to loading the complete
						database into memory, if all objects where reachable from a single
						root object.
						<br />
						<br />
						db4o uses the concept "depth", the number of field-to-field hops
						an object is away from another object.
						<b> The preconfigured "activation depth" db4o uses in the default
							setting is 5.</b>
						<br />
						<br />
						Whenever an application iterates through the
						<see cref="IObjectSet">IObjectSet</see>
						of a query result, the result objects will be activated to the
						configured activation depth.
						<br />
						<br />
						A concrete example with the preconfigured activation depth of 5:
						<br />
						<pre> Object foo is the result of a query, it is delivered by the
							ObjectSet object foo = objectSet.Next();</pre>
						foo.member1.member2.member3.member4.member5 will be a valid object
						<br />
						foo, member1, member2, member3 and member4 will be activated
						<br />
						member5 will be deactivated, all of it's members will be null
						<br />
						member5 can be activated at any time by calling
						<see cref="IObjectContainer.Activate">ObjectContainer#activate(member5,
							depth)</see>
						.
						<br />
						<br />
						Note that raising the global activation depth will consume more
						memory and have negative effects on the performance of first-time
						retrievals. Lowering the global activation depth needs more
						individual activation work but can increase performance of
						queries.
						<br />
						<br />
						<see cref="IObjectContainer.Deactivate"> ObjectContainer#deactivate(Object, depth)</see>
						can be used to manually free memory by deactivating objects.
						<br />
						<br />
					</remarks>
					<param name="depth">the desired global activation depth.</param>
					<seealso cref="IObjectClass.MaximumActivationDepth"> configuring classes individually</seealso>
				</doc>
			</member>
			<member name="AddAlias(IAlias)">
				<doc>
					<summary>adds a new Alias for a class, namespace or package.
					</summary>
					<remarks>
						adds a new Alias for a class, namespace or package.
						<br />
						<br />
						Aliases can be used to persist classes in the running application
						to different persistent classes in a database file or on a db4o
						server.
						<br />
						<br />
						Two simple Alias implementations are supplied along with db4o:
						<br />
						-
						<see cref="TypeAlias">TypeAlias</see>
						provides an #equals() resolver to match names directly.
						<br />
						-
						<see cref="WildcardAlias">WildcardAlias</see>
						allows simple pattern matching with one single '*' wildcard
						character.
						<br />
						<br />
						It is possible to create own complex
						<see cref="IAlias">IAlias</see>
						constructs by creating own resolvers that implement the
						<see cref="IAlias">IAlias</see>
						interface.
						<br />
						<br />
						Four examples of concrete usecases:
						<br />
						<br />
						<code>
							<b>// Creating an Alias for a single class</b>
							<br />
							Db4oFactory.Configure().AddAlias(
							<br />&#160;&#160;new TypeAlias("Tutorial.F1.Pilot", "Tutorial.F1.Driver"));<br />
              <br /><br />
              <b>// Accessing a Java package from a .NET assembly</b><br />
              Db4o.configure().addAlias(<br />
              &#160;&#160;new WildcardAlias(<br />
              &#160;&#160;&#160;&#160;"com.f1.*",<br />
              &#160;&#160;&#160;&#160;"Tutorial.F1.*, Tutorial"));<br />
              <br /><br />
              <b>// Using a different local .NET assembly</b><br />
              Db4o.configure().addAlias(<br />
              &#160;&#160;new WildcardAlias(<br />
              &#160;&#160;&#160;&#160;"Tutorial.F1.*, Tutorial",<br />
              &#160;&#160;&#160;&#160;"Tutorial.F1.*, RaceClient"));<br />
            </code>
            <br /><br />Aliases that translate the persistent name of a class to
            a name that already exists as a persistent name in the database
            (or on the server) are not permitted and will throw an exception
            when the database file is opened.
            <br /><br />Aliases should be configured before opening a database file
            or connecting to a server.
          </remarks>

        </doc>
      </member>

      <member name="AutomaticShutDown(boo)">
        <doc>
          <summary>turns automatic shutdown of the engine on and off.</summary>
          <remarks>
            turns automatic shutdown of the engine on and off.
          </remarks>
          <param name="flag">whether db4o should shut down automatically.</param>
        </doc>
      </member>

      <member name="LockDatabaseFile(bool)">
        <doc>
          <summary>can be used to turn the database file locking thread off.</summary>
          <param name="flag">
            <code>false</code> to turn database file locking off.
          </param>

        </doc>
      </member>

      <member name="ReflectWith(IReflector)">
        <doc>
          <summary>configures the use of a specially designed reflection implementation.</summary>
          <remarks>
            configures the use of a specially designed reflection implementation.
            <br /><br />
            db4o internally uses System.Reflection by default. On platforms that
            do not support this package, customized implementations may be written
            to supply all the functionality of the interfaces in System.Reflection
            namespace. This method can be used to install a custom reflection
            implementation.

          </remarks>

        </doc>
      </member>

      <member name="WeakReferenceCollectionInterval(int)">
        <doc>
          <summary>configures the timer for WeakReference collection.</summary>
          <remarks>
            configures the timer for WeakReference collection.
            <br /><br />The default setting is 1000 milliseconds.
            <br /><br />Configure this setting to zero to turn WeakReference
            collection off.

          </remarks>
          <param name="milliseconds">the time in milliseconds</param>
        </doc>
      </member>

      <member name="WeakReferences(bool)">
        <doc>
          <summary>turns weak reference management on or off.</summary>
          <remarks>
            turns weak reference management on or off.
            <br /><br />
            This method must be called before opening a database.
            <br /><br />
            Performance may be improved by running db4o without using weak
            references durring memory management at the cost of higher
            memory consumption or by alternatively implementing a manual
            memory management scheme using
            <see cref="IExtObjectContainer.Purge">IExtObjectContainer.Purge</see>
            <br /><br />Setting the value to <code>false</code> causes db4o to use hard
            references to objects, preventing the garbage collection process
            from disposing of unused objects.
            <br /><br />The default setting is <code>true</code>.
          </remarks>
        </doc>
      </member>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Config.IObjectConstructor">
    <doc>
      <summary>
        interface to allow instantiating objects by calling specific constructors.

      </summary>
      <remarks>
        interface to allow instantiating objects by calling specific constructors.
        <br /><br />
        By writing classes that implement this interface, it is possible to
        define which constructor is to be used during the instantiation of a stored object.
        <br /><br />
        Before starting a db4o session, translator classes that implement the
        <code>ObjectConstructor</code> or
        <see cref="IObjectTranslator">IObjectTranslator</see>
        need to be registered.<br /><br />
        Example:<br />
        <code>
          IConfiguration config = Db4oFactory.Configure();<br />
          IObjectClass oc = config.ObjectClass("Namespace.ClassName");<br />
          oc.Translate(new FooTranslator());
        </code><br /><br />
      </remarks>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Config.IObjectTranslator">
    <doc>
      <summary>translator interface to translate objects on storage and activation.</summary>
      <remarks>
        translator interface to translate objects on storage and activation.
        <br /><br />
        By writing classes that implement this interface, it is possible to
        define how application classes are to be converted to be stored more efficiently.
        <br /><br />
        Before starting a db4o session, translator classes need to be registered. An example:<br />
        <code>
          IConfiguration config = Db4oFactory.Configure();<br />
          IObjectClass oc = config.ObjectClass("Namespace.ClassName");<br />
          oc.Translate(new FooTranslator());
        </code><br /><br />
      </remarks>

    </doc>
  </type>

  <type name="Db4objects.Db4o.Config.IObjectMarshaller">
    <doc>
      <summary>interface for custom marshallers.</summary>
      <remarks>
        interface for custom marshallers.
        Custom marshallers can be used for tuning the performance to store
        and read objects. Instead of letting db4o do all the marshalling
        by detecting the fields on a class and by using reflection, a
        custom
        <see cref="IObjectMarshaller">IObjectMarshaller</see>
        allows the
        application developer to write the logic how the fields of an
        object are converted to a byte[] and back.
        <br /><br />To implement a custom marshaller, write a class that
        implements the methods of the
        <see cref="IObjectMarshaller">IObjectMarshaller</see>
        interface and register it for your persistent class:<br />
        <code>Db4oFactory.Configure().ObjectClass(typeof(YourClass)).MarshallWith(yourMarshaller);</code>
      </remarks>
    </doc>
  </type>
  <type name="Db4objects.Db4o.Config.IObjectField">
    <doc>
      <summary>configuration interface for fields of classes.</summary>
      <remarks>
        configuration interface for fields of classes.
        <br /><br />
        Use the global Configuration object to configure db4o before opening an
        <see cref="IObjectContainer">IObjectContainer</see>
        .<br /><br />
        <b>Example:</b><br />
        <code>
          IConfiguration config = Db4oFactory.Configure();<br />
          IObjectClass oc = config.ObjectClass("Namespace.ClassName");<br />
          IObjectField of = oc.ObjectField("fieldName");
          of.Rename("newFieldName");
          of.QueryEvaluation(false);

        </code>
      </remarks>

    </doc>
  </type>

  <type name="Db4objects.Db4o.Config.IObjectClass">
    <doc>
      <summary>configuration interface for classes.</summary>
      <remarks>
        configuration interface for classes.
        <br /><br />
        Use the global Configuration object to configure db4o before opening an
        <see cref="IObjectContainer">IObjectContainer</see>
        .<br /><br />
        <b>Example:</b><br />
        <code>
          IConfiguration config = Db4oFactory.Configure();<br />
          IObjectClass oc = config.ObjectClass("Namespace.ClassName");<br />
          oc.UpdateDepth(3);<br />
          oc.MinimumActivationDepth(3);<br />
        </code>
      </remarks>

    </doc>
  </type>
  <type name="Db4objects.Db4o.Config.IAlias">
    <doc>
      <summary>
        Implement this interface when implementing special custom Aliases
        for classes, packages or namespaces.

      </summary>
      <remarks>
        Implement this interface when implementing special custom Aliases
        for classes, packages or namespaces.
        <br /><br />Aliases can be used to persist classes in the running
        application to different persistent classes in a database file
        or on a db4o server.
        <br /><br />Two simple Alias implementations are supplied along with
        db4o:<br />
        -
        <see cref="TypeAlias">TypeAlias</see>
        provides an #equals() resolver to match
        names directly.<br />
        -
        <see cref="WildcardAlias">WildcardAlias</see>
        allows simple pattern matching
        with one single '*' wildcard character.<br />
        <br />
        It is possible to create
        own complex
        <see cref="IAlias">IAlias</see>
        constructs by creating own resolvers
        that implement the
        <see cref="IAlias">IAlias</see>
        interface.
        <br /><br />
        Four examples of concrete usecases:
        <br /><br />
        <code>
          <b>// Creating an Alias for a single class</b><br />
          Db4oFactory.Configure().AddAlias(<br />
          &#160;&#160;new TypeAlias("Tutorial.Pilot", "Tutorial.Driver"));<br />
          <br /><br />
          <b>// Accessing a Java package from a .NET assembly </b><br />
          Db4oFactory.Configure().AddAlias(<br />
          &#160;&#160;new WildcardAlias(<br />
          &#160;&#160;&#160;&#160;"com.f1.*",<br />
          &#160;&#160;&#160;&#160;"Tutorial.F1.*, Tutorial"));<br />
          <br /><br />
          <b>// Using a different local .NET assembly</b><br />
          Db4o.configure().addAlias(<br />
          &#160;&#160;new WildcardAlias(<br />
          &#160;&#160;&#160;&#160;"Tutorial.F1.*, F1Race",<br />
          &#160;&#160;&#160;&#160;"Tutorial.F1.*, Tutorial"));<br />
          <br /><br />
        </code>
        <br /><br />Aliases that translate the persistent name of a class to
        a name that already exists as a persistent name in the database
        (or on the server) are not permitted and will throw an exception
        when the database file is opened.
        <br /><br />Aliases should be configured before opening a database file
        or connecting to a server.

      </remarks>

    </doc>
  </type>

  <type name="Db4objects.Db4o.Db4oFactory">
      <member name="Main(string[] args)">
        <doc>
          <summary>
            prints the version name of this db4o version to the system output stream.
          </summary>
          <remarks>
            prints the version name of this db4o version to the system output stream (usually System.Console).
          </remarks>
        </doc>
      </member>

      <member name="Configure()">
        <doc>
          <summary>
            returns the global db4o
            <see cref="IConfiguration">IConfiguration</see>
            context
            for the running CLR session.
            <br /><br />
            The
            <see cref="IConfiguration">IConfiguration</see>
            can be overriden in each
            <see cref="IExtObjectContainer.Configure">ObjectContainer</see>
            .<br /><br />
          </summary>
          <returns>
            the global
            <see cref="IConfiguration">configuration</see>
            context

          </returns>
        </doc>
      </member>

      <member name="OpenClient(IConfiguration, string, int, string, string)">
        <doc>
          <summary>
            opens an
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
            client and connects it to the specified named server and port.
            <br /><br />
            The server needs to
            <see cref="Db4objects.Db4o.IObjectServer.GrantAccess">allow access</see>
            for the specified user and password.
            <br /><br />
            A client
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
            can be cast to
            <see cref="Db4objects.Db4o.Ext.IExtClient">IExtClient</see>
            to use extended
            <see cref="Db4objects.Db4o.Ext.IExtObjectContainer">IExtObjectContainer</see>

            and
            <see cref="Db4objects.Db4o.Ext.IExtClient">IExtClient</see>
            methods.
            <br /><br />
            This method is obsolete, see the Db4objects.Db4o.CS.Db4oClientServer class in
            Db4objects.Db4o.CS.dll for methods to open db4o servers and db4o clients.
          </summary>
          <param name="config">
            a custom
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            instance to be obtained via
            <see cref="Db4objects.Db4o.Db4oEmbedded.NewConfiguration">
              Db4objects.Db4o.Db4oEmbedded.NewConfiguration
            </see>
          </param>
          <param name="hostName">the host name</param>
          <param name="port">the port the server is using</param>
          <param name="user">the user name</param>
          <param name="password">the user password</param>
          <returns>
            an open
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
          </returns>
          <seealso cref="Db4objects.Db4o.IObjectServer.GrantAccess">
            Db4objects.Db4o.IObjectServer.GrantAccess
          </seealso>
          <exception cref="Db4objects.Db4o.Ext.Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates">
              Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates
            </see>

            is set to false.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.InvalidPasswordException">
            password supplied for the connection is
            invalid.
          </exception>
        </doc>
      </member>

      <member name="OpenClient(string, int, string, string)">
        <doc>
          <summary>
            Operates just like
            <see cref="Db4objects.Db4o.Db4oFactory.OpenClient">
              Db4objects.Db4o.Db4oFactory.OpenClient
            </see>, but uses
            the global db4o
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            context.
            opens an
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
            client and connects it to the specified named server and port.
            <br /><br />
            The server needs to
            <see cref="Db4objects.Db4o.IObjectServer.GrantAccess">allow access</see>
            for the specified user and password.
            <br /><br />
            A client
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
            can be cast to
            <see cref="Db4objects.Db4o.Ext.IExtClient">IExtClient</see>
            to use extended
            <see cref="Db4objects.Db4o.Ext.IExtObjectContainer">IExtObjectContainer</see>

            and
            <see cref="Db4objects.Db4o.Ext.IExtClient">IExtClient</see>
            methods.
            <br /><br />
            This method is obsolete, see the Db4objects.Db4o.CS.Db4oClientServer class in
            Db4objects.Db4o.CS.dll for methods to open db4o servers and db4o clients.
          </summary>
          <param name="config">
            a custom
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            instance to be obtained via
            <see cref="Db4objects.Db4o.Db4oEmbedded.NewConfiguration">
              Db4objects.Db4o.Db4oEmbedded.NewConfiguration
            </see>
          </param>
          <param name="hostName">the host name</param>
          <param name="port">the port the server is using</param>
          <param name="user">the user name</param>
          <param name="password">the user password</param>
          <returns>
            an open
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
          </returns>
          <seealso cref="Db4objects.Db4o.IObjectServer.GrantAccess">
            Db4objects.Db4o.IObjectServer.GrantAccess
          </seealso>
          <exception cref="Db4objects.Db4o.Ext.Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates">
              Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates
            </see>

            is set to false.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.InvalidPasswordException">
            password supplied for the connection is
            invalid.
          </exception>
        </doc>
      </member>

      <member name="OpenClient(IConfiguration, string, int, string, string, INativeSocketFactory)">
        <doc>
          <summary>
            opens an
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
            client and connects it to the specified named server and port.
            <br /><br />
            The server needs to
            <see cref="Db4objects.Db4o.IObjectServer.GrantAccess">allow access</see>
            for the specified user and password.
            <br /><br />
            A client
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
            can be cast to
            <see cref="Db4objects.Db4o.Ext.IExtClient">IExtClient</see>
            to use extended
            <see cref="Db4objects.Db4o.Ext.IExtObjectContainer">IExtObjectContainer</see>

            and
            <see cref="Db4objects.Db4o.Ext.IExtClient">IExtClient</see>
            methods.
            <br /><br />
            This method is obsolete, see the Db4objects.Db4o.CS.Db4oClientServer class in
            Db4objects.Db4o.CS.dll for methods to open db4o servers and db4o clients.
          </summary>
          <param name="config">
            a custom
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            instance to be obtained via
            <see cref="Db4objects.Db4o.Db4oEmbedded.NewConfiguration">
              Db4objects.Db4o.Db4oEmbedded.NewConfiguration
            </see>
          </param>
          <param name="hostName">the host name</param>
          <param name="port">the port the server is using</param>
          <param name="user">the user name</param>
          <param name="password">the user password</param>
          <param name="socketFactory">socketFactory NativeSocketFactory instance to provide platform native sockets</param>
          <returns>
            an open
            <see cref="Db4objects.Db4o.IObjectContainer">IObjectContainer</see>
          </returns>
          <seealso cref="Db4objects.Db4o.IObjectServer.GrantAccess">
            Db4objects.Db4o.IObjectServer.GrantAccess
          </seealso>
          <exception cref="Db4objects.Db4o.Ext.Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates">
              Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates
            </see>

            is set to false.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.InvalidPasswordException">
            password supplied for the connection is
            invalid.
          </exception>
        </doc>
      </member>

      <member name="OpenServer(IConfiguration, string, int)">
        <doc>
          <summary>
            opens an
            <see cref="Db4objects.Db4o.IObjectServer">IObjectServer</see>
            on the specified database file and port.
            <br /><br />
            If the server does not need to listen on a port because it will only be used
            in embedded mode with
            <see cref="Db4objects.Db4o.IObjectServer.OpenClient">
              Db4objects.Db4o.IObjectServer.OpenClient
            </see>
            , specify '0' as the
            port number.
            <br /><br />This method is obsolete, see the Db4objects.Db4o.CS.Db4oClientServer class in
            Db4objects.Db4o.CS.dll for methods to open db4o servers and db4o clients.
          </summary>
          <param name="config">
            a custom
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            instance to be obtained via
            <see cref="Db4objects.Db4o.Db4oEmbedded.NewConfiguration">
              Db4objects.Db4o.Db4oEmbedded.NewConfiguration
            </see>
          </param>
          <param name="databaseFileName">an absolute or relative path to the database file</param>
          <param name="port">
            the port to be used, or 0, if the server should not open a port,
            because it will only be used with
            <see cref="Db4objects.Db4o.IObjectServer.OpenClient">
              Db4objects.Db4o.IObjectServer.OpenClient
            </see>
            .
            Specify a value &lt; 0 if an arbitrary free port should be chosen - see
            <see cref="Db4objects.Db4o.Ext.IExtObjectServer.Port">
              Db4objects.Db4o.Ext.IExtObjectServer.Port
            </see>
            .
          </param>
          <returns>
            an
            <see cref="Db4objects.Db4o.IObjectServer">IObjectServer</see>
            listening
            on the specified port.
          </returns>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.ReadOnly">
            Db4objects.Db4o.Config.IConfiguration.ReadOnly
          </seealso>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.Encrypt">
            Db4objects.Db4o.Config.IConfiguration.Encrypt
          </seealso>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.Password">
            Db4objects.Db4o.Config.IConfiguration.Password
          </seealso>
          <exception cref="Db4objects.Db4o.Ext.Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.DatabaseFileLockedException">
            the required database file is locked by
            another process.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.IncompatibleFileFormatException">
            runtime
            <see cref="Db4objects.Db4o.Config.IConfiguration">configuration</see>
            is not compatible
            with the configuration of the database file.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates">
              Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates
            </see>

            is set to false.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.DatabaseReadOnlyException">
            database was configured as read-only.
          </exception>
        </doc>
      </member>

      <member name="OpenServer(string, int)">
        <doc>
          <summary>
            Operates just like
            <see cref="Db4objects.Db4o.Db4oFactory.OpenServer">
              Db4objects.Db4o.Db4oFactory.OpenServer
            </see>
            , but uses
            the global db4o
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            context.
            Opens an
            <see cref="Db4objects.Db4o.IObjectServer">IObjectServer</see>
            on the specified database file and port.
            <br /><br />
            If the server does not need to listen on a port because it will only be used
            in embedded mode with
            <see cref="Db4objects.Db4o.IObjectServer.OpenClient">
              Db4objects.Db4o.IObjectServer.OpenClient
            </see>
            , specify '0' as the
            port number.
            <br /><br />This method is obsolete, see the Db4objects.Db4o.CS.Db4oClientServer class in
            Db4objects.Db4o.CS.dll for methods to open db4o servers and db4o clients.
          </summary>
          <param name="config">
            a custom
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            instance to be obtained via
            <see cref="Db4objects.Db4o.Db4oEmbedded.NewConfiguration">
              Db4objects.Db4o.Db4oEmbedded.NewConfiguration
            </see>
          </param>
          <param name="databaseFileName">an absolute or relative path to the database file</param>
          <param name="port">
            the port to be used, or 0, if the server should not open a port,
            because it will only be used with
            <see cref="Db4objects.Db4o.IObjectServer.OpenClient">
              Db4objects.Db4o.IObjectServer.OpenClient
            </see>
            .
            Specify a value &lt; 0 if an arbitrary free port should be chosen - see
            <see cref="Db4objects.Db4o.Ext.IExtObjectServer.Port">
              Db4objects.Db4o.Ext.IExtObjectServer.Port
            </see>
            .
          </param>
          <returns>
            an
            <see cref="Db4objects.Db4o.IObjectServer">IObjectServer</see>
            listening
            on the specified port.
          </returns>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.ReadOnly">
            Db4objects.Db4o.Config.IConfiguration.ReadOnly
          </seealso>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.Encrypt">
            Db4objects.Db4o.Config.IConfiguration.Encrypt
          </seealso>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.Password">
            Db4objects.Db4o.Config.IConfiguration.Password
          </seealso>
          <exception cref="Db4objects.Db4o.Ext.Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.DatabaseFileLockedException">
            the required database file is locked by
            another process.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.IncompatibleFileFormatException">
            runtime
            <see cref="Db4objects.Db4o.Config.IConfiguration">configuration</see>
            is not compatible
            with the configuration of the database file.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates">
              Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates
            </see>

            is set to false.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.DatabaseReadOnlyException">
            database was configured as read-only.
          </exception>
        </doc>
      </member>

      <member name="OpenServer(IConfiguration, string, int,INativeSocketFactory)">
        <doc>
          <summary>
            opens an
            <see cref="Db4objects.Db4o.IObjectServer">IObjectServer</see>
            on the specified database file and port.
            <br /><br />
            If the server does not need to listen on a port because it will only be used
            in embedded mode with
            <see cref="Db4objects.Db4o.IObjectServer.OpenClient">
              Db4objects.Db4o.IObjectServer.OpenClient
            </see>
            , specify '0' as the
            port number.
            <br /><br />This method is obsolete, see the Db4objects.Db4o.CS.Db4oClientServer class in
            Db4objects.Db4o.CS.dll for methods to open db4o servers and db4o clients.
          </summary>
          <param name="config">
            a custom
            <see cref="Db4objects.Db4o.Config.IConfiguration">IConfiguration</see>
            instance to be obtained via
            <see cref="Db4objects.Db4o.Db4oEmbedded.NewConfiguration">
              Db4objects.Db4o.Db4oEmbedded.NewConfiguration
            </see>
          </param>
          <param name="databaseFileName">an absolute or relative path to the database file</param>
          <param name="port">
            the port to be used, or 0, if the server should not open a port,
            because it will only be used with
            <see cref="Db4objects.Db4o.IObjectServer.OpenClient">
              Db4objects.Db4o.IObjectServer.OpenClient
            </see>
            .
            Specify a value &lt; 0 if an arbitrary free port should be chosen - see
            <see cref="Db4objects.Db4o.Ext.IExtObjectServer.Port">
              Db4objects.Db4o.Ext.IExtObjectServer.Port
            </see>
            .
          </param>
          <param name="socketFactory">
            the
            <see cref="Db4objects.Db4o.Config.INativeSocketFactory">
              Db4objects.Db4o.Config.INativeSocketFactory
            </see>
            to be used for socket creation
          </param>


          <returns>
            an
            <see cref="Db4objects.Db4o.IObjectServer">IObjectServer</see>
            listening
            on the specified port.
          </returns>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.ReadOnly">
            Db4objects.Db4o.Config.IConfiguration.ReadOnly
          </seealso>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.Encrypt">
            Db4objects.Db4o.Config.IConfiguration.Encrypt
          </seealso>
          <seealso cref="Db4objects.Db4o.Config.IConfiguration.Password">
            Db4objects.Db4o.Config.IConfiguration.Password
          </seealso>
          <exception cref="Db4objects.Db4o.Ext.Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.DatabaseFileLockedException">
            the required database file is locked by
            another process.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.IncompatibleFileFormatException">
            runtime
            <see cref="Db4objects.Db4o.Config.IConfiguration">configuration</see>
            is not compatible
            with the configuration of the database file.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates">
              Db4objects.Db4o.Config.IConfiguration.AllowVersionUpdates
            </see>

            is set to false.
          </exception>
          <exception cref="Db4objects.Db4o.Ext.DatabaseReadOnlyException">
            database was configured as read-only.
          </exception>
        </doc>
      </member>


      <member name="OpenFile(string)">
        <doc>
          <summary>
            Operates just like
            <see cref="Db4oFactory.OpenFile">Db4oFactory.OpenFile</see>
            , but uses
            the global db4o
            <see cref="IConfiguration">IConfiguration</see>
            context.
            opens an
            <see cref="IObjectContainer">IObjectContainer</see>
            on the specified database file for local use.
            <br /><br />A database file can only be opened once, subsequent attempts to open
            another
            <see cref="IObjectContainer">IObjectContainer</see>
            against the same file will result in
            a
            <see cref="DatabaseFileLockedException">DatabaseFileLockedException</see>
            .<br /><br />
            Database files can only be accessed for readwrite access from one process
            at one time. All versions except for db4o mobile edition use an
            internal mechanism to lock the database file for other processes.
            <br /><br />

          </summary>
          <param name="databaseFileName">an absolute or relative path to the database file</param>
          <returns>
            an open
            <see cref="IObjectContainer">IObjectContainer</see>

          </returns>
          <seealso cref="IConfiguration.ReadOnly">IConfiguration.ReadOnly</seealso>
          <seealso cref="IConfiguration.Encrypt">IConfiguration.Encrypt</seealso>
          <seealso cref="IConfiguration.Password">IConfiguration.Password</seealso>
          <exception cref="Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.

          </exception>
          <exception cref="DatabaseFileLockedException">
            the required database file is locked by
            another process.

          </exception>
          <exception cref="IncompatibleFileFormatException">
            runtime
            <see cref="IConfiguration">configuration</see>
            is not compatible
            with the configuration of the database file.

          </exception>
          <exception cref="OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="IConfiguration.AllowVersionUpdates">
              IConfiguration.AllowVersionUpdates
            </see>
            is set to false.
          </exception>
          <exception cref="DatabaseReadOnlyException">
            database was configured as read-only.
          </exception>
        </doc>
      </member>

      <member name="OpenFile(IConfiguration, string)">
        <doc>
          <summary>
            opens an
            <see cref="IObjectContainer">IObjectContainer</see>
            on the specified database file for local use.
            <br /><br />A database file can only be opened once, subsequent attempts to open
            another
            <see cref="IObjectContainer">IObjectContainer</see>
            against the same file will result in
            a
            <see cref="DatabaseFileLockedException">DatabaseFileLockedException</see>
            .<br /><br />
            Database files can only be accessed for readwrite access from one process
            at one time. All versions except for db4o mobile edition use an
            internal mechanism to lock the database file for other processes.
            <br /><br />

          </summary>
          <param name="config">
            a custom
            <see cref="IConfiguration">IConfiguration</see>
            instance to be obtained via
            <see cref="Db4oFactory.NewConfiguration">Db4oFactory.NewConfiguration</see>

          </param>
          <param name="databaseFileName">an absolute or relative path to the database file</param>
          <returns>
            an open
            <see cref="IObjectContainer">IObjectContainer</see>

          </returns>
          <seealso cref="IConfiguration.ReadOnly">IConfiguration.ReadOnly</seealso>
          <seealso cref="IConfiguration.Encrypt">IConfiguration.Encrypt</seealso>
          <seealso cref="IConfiguration.Password">IConfiguration.Password</seealso>
          <exception cref="Db4oIOException">
            I/O operation failed or was unexpectedly interrupted.

          </exception>
          <exception cref="DatabaseFileLockedException">
            the required database file is locked by
            another process.

          </exception>
          <exception cref="IncompatibleFileFormatException">
            runtime
            <see cref="IConfiguration">configuration</see>
            is not compatible
            with the configuration of the database file.

          </exception>
          <exception cref="OldFormatException">
            open operation failed because the database file
            is in old format and
            <see cref="IConfiguration.AllowVersionUpdates">
              IConfiguration.AllowVersionUpdates

            </see>

            is set to false.

          </exception>
          <exception cref="DatabaseReadOnlyException">
            database was configured as read-only.

          </exception>

        </doc>
      </member>
  </type>



  <type name="Db4objects.Db4o.Events.IEventRegistry">

    <doc>
      <summary>
        Provides a way to register event handlers for specific <see cref="IObjectContainer">IObjectContainer</see> events.<br />
        EventRegistry methods represent events available for registering callbacks.
        EventRegistry instance can be obtained from <see cref="EventRegistryFactory">EventRegistryFactory</see>.
        <code>EventRegistry registry =  EventRegistryFactory.ForObjectContainer(container);</code>
        A new callback can be registered for an event with the following code:
        <code>
          private static void OnCreated(object sender, ObjectEventArgs args)
          {
          Object obj = args.Object;
          if (obj is Pilot)
          {
          Console.WriteLine(obj.ToString());
          }
          }
          registry.Created+=new ObjectEventHandler(OnCreated);
        </code>
        <seealso cref="EventRegistryFactory">EventRegistryFactory</seealso>
      </summary>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Ext.ExtDb4oFactory">
    <member name="OpenMemoryFile(MemoryFile)">
      <doc>
        <summary>
          Operates just like
          <see cref="ExtDb4oFactory.OpenMemoryFile">ExtDb4oFactory.OpenMemoryFile</see>
          , but uses
          the global db4o
          <see cref="IConfiguration">IConfiguration</see>
          context.
          opens an
          <see cref="IObjectContainer">IObjectContainer</see>
          for in-memory use .
          <br /><br />In-memory ObjectContainers are useful for maximum performance
          on small databases, for swapping objects or for storing db4o format data
          to other media or other databases.<br /><br />Be aware of the danger of running
          into OutOfMemory problems or complete loss of all data, in case of hardware
          or software failures.<br /><br />

        </summary>
        <param name="memoryFile">
          a
          <see cref="MemoryFile">MemoryFile</see>

          to store the raw byte data.

        </param>
        <returns>
          an open
          <see cref="IObjectContainer">IObjectContainer</see>

        </returns>
        <seealso cref="MemoryFile">MemoryFile</seealso>
      </doc>
    </member>
    <member name="OpenMemoryFile(IConfiguration, MemoryFile)">
      \
      <doc>
        <summary>
          opens an
          <see cref="IObjectContainer">IObjectContainer</see>
          for in-memory use .
          <br /><br />In-memory ObjectContainers are useful for maximum performance
          on small databases, for swapping objects or for storing db4o format data
          to other media or other databases.<br /><br />Be aware of the danger of running
          into OutOfMemory problems or complete loss of all data, in case of hardware
          or software failures.<br /><br />

        </summary>
        <param name="config">
          a custom
          <see cref="IConfiguration">IConfiguration</see>
          instance to be obtained via
          <see cref="Db4oFactory.NewConfiguration">Db4oFactory.NewConfiguration</see>

        </param>
        <param name="memoryFile">
          a
          <see cref="MemoryFile">MemoryFile</see>

          to store the raw byte data.

        </param>
        <returns>
          an open
          <see cref="IObjectContainer">IObjectContainer</see>

        </returns>
        <seealso cref="MemoryFile">MemoryFile</seealso>
      </doc>
    </member>
  </type>

  <type name="Db4objects.Db4o.Ext.MemoryFile">
    <doc>
      <summary>carries in-memory data for db4o in-memory operation.</summary>
      <remarks>
        carries in-memory data for db4o in-memory operation.
        <br /><br />In-memory ObjectContainers are useful for maximum performance
        on small databases, for swapping objects or for storing db4o format data
        to other media or other databases.<br /><br />Be aware of the danger of running
        into OutOfMemory problems or complete loss of all data, in case of hardware
        or runtime failures.
        <br /><br />

      </remarks>
      <seealso cref="ExtDb4oFactory.OpenMemoryFile">ExtDb4oFactory.OpenMemoryFile</seealso>
    </doc>
  </type>

  <type name="Db4objects.Db4o.IO.MemoryIoAdapter">
    <doc>
      <summary>IoAdapter for in-memory operation.</summary>
      <remarks>
        IoAdapter for in-memory operation. <br />
        <br />
        Configure db4o to operate with this in-memory IoAdapter with
        <code>
          MemoryIoAdapter memoryIoAdapter = new MemoryIoAdapter();<br />
          Db4oFactory.Configure().Io(memoryIoAdapter);
        </code><br />
        <br />
        <br />
        Use the normal #openFile() and #openServer() commands to open
        ObjectContainers and ObjectServers. The names specified as file names will be
        used to identify the <code>byte[]</code> content of the in-memory files in
        the _memoryFiles Hashtable in the adapter. After working with an in-memory
        ObjectContainer/ObjectServer the <code>byte[]</code> content is available
        in the MemoryIoAdapter by using
        <see cref="Db4objects.Db4o.IO.MemoryIoAdapter.Get">
          Db4objects.Db4o.IO.MemoryIoAdapter.Get
        </see>
        . To add old existing
        database <code>byte[]</code> content to a MemoryIoAdapter use
        <see cref="Db4objects.Db4o.IO.MemoryIoAdapter.Put">
          Db4objects.Db4o.IO.MemoryIoAdapter.Put

        </see>
        . To reduce memory consumption of memory file
        names that will no longer be used call
        <see cref="Db4objects.Db4o.IO.MemoryIoAdapter.Put">
          Db4objects.Db4o.IO.MemoryIoAdapter.Put

        </see>
        and pass
        an empty byte array.

      </remarks>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Query.IQueryComparator">
    <doc>
      <summary>
        This interface is not used in .NET.
      </summary>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Reflect.IReflectArray">
    <doc>
      <summary>Reflection Array representation.</summary>
      <remarks>
        Reflection Array representation
        <br /><br />See documentation for System.Reflection API.
      </remarks>
      <seealso cref="IReflector">IReflector</seealso>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Reflect.IReflectClass">
    <doc>
      <summary>Reflection Class representation.</summary>
      <remarks>
        Reflection Class representation
        <br /><br />See documentation for System.Reflection API.
      </remarks>
      <seealso cref="IReflector">IReflector</seealso>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Reflect.IReflectConstructor">
    <doc>
      <summary>Reflection Constructor representation.</summary>
      <remarks>
        Reflection Constructor representation
        <br /><br />See documentation for System.Reflection API.
      </remarks>
      <seealso cref="IReflector">IReflector</seealso>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Reflect.IReflectField">
    <doc>
      <summary>Reflection Field representation.</summary>
      <remarks>
        Reflection Field representation
        <br /><br />See documentation for System.Reflection API.
      </remarks>
      <seealso cref="IReflector">IReflector</seealso>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Reflect.IReflectMethod">
    <doc>
      <summary>Reflection Method representation.</summary>
      <remarks>
        Reflection Method representation
        <br /><br />See documentation for System.Reflection API.
      </remarks>
      <seealso cref="IReflector">IReflector</seealso>
    </doc>
  </type>

  <type name="Db4objects.Db4o.Reflect.IReflector">
    <doc>
      <summary>root of the reflection implementation API.</summary>
      <remarks>
        root of the reflection implementation API.
        <br /><br />The open reflection interface is supplied to allow to implement
        custom reflection functionality.<br /><br />
        Use
        <see cref="IConfiguration.ReflectWith">
          Db4o.Configure().ReflectWith(IReflect reflector)
        </see>
        to register the use of your implementation before opening database
        files.
      </remarks>
    </doc>
    <member name="Array()">
      <doc>
        <summary>
          returns an ReflectArray object.
        </summary>
        <remarks>
          returns an ReflectArray object.
        </remarks>
      </doc>
    </member>
  </type>

  <type name="Db4objects.Db4o.Types.IDb4oCollections">
    <member name="NewHashMap(int)">
      <doc>
        <summary>creates a new database-aware HashMap.</summary>
        <remarks>
          creates a new database-aware HashMap.
          <br /><br />
          This map will call the hashCode() method on the key objects to calculate the
          hash value. Since the hash value is stored to the ObjectContainer, key objects
          will have to return the same hashCode() value in every CLR session.
          <br /><br />
          Usage:<br />
          - declare an IDictionary variable in your persistent class.<br />
          - fill the variable with this method.<br /><br />
          <b>Example:</b><br /><br />
          <code>
            <pre>
              class MyClass{
              IDictionary dict;
              }
              MyClass myObject = new MyClass();
              myObject.dict = objectContainer.Ext().Collections().NewHashMap(0);
            </pre>
          </code><br /><br />
        </remarks>
        <param name="initialSize">the initial size of the HashMap</param>
        <returns>
          <see cref="IDb4oMap">IDb4oMap</see>
        </returns>
        <seealso cref="IDb4oMap">IDb4oMap</seealso>
      </doc>
    </member>

    <member name="NewIdentityHashMap(int)">
      <doc>
        <summary>creates a new database-aware IdentityHashMap.</summary>
        <remarks>
          creates a new database-aware IdentityHashMap.
          <br /><br />
          Only first class objects already stored to the ObjectContainer (Objects with a db4o ID)
          can be used as keys for this type of Map. The internal db4o ID will be used as
          the hash value.
          <br /><br />
          Usage:<br />
          - declare an IDictionary variable in your persistent class.<br />
          - fill the variable with this method.<br /><br />
          <b>Example:</b><br /><br />
          <code>
            <pre>
              public class MyClass{
              public IDictionary  dict;
              }
              MyClass myObject = new MyClass();
              myObject.dict = objectContainer.Ext().Collections().NewIdentityHashMap(0);
            </pre>
          </code><br /><br />

        </remarks>
        <param name="initialSize">the initial size of the IdentityHashMap</param>
        <returns>

          <see cref="IDb4oMap">IDb4oMap</see>
        </returns>
        <seealso cref="IDb4oMap">IDb4oMap</seealso>
      </doc>
    </member>

    <member name="NewLinkedList()">
      <doc>
        <summary>creates a new database-aware linked list.</summary>
        <remarks>
          creates a new database-aware linked list.
          <br /><br />Usage:<br />
          - declare an IList variable in your persistent class.<br />
          - fill this variable with this method.<br /><br />
          <b>Example:</b><br /><br />
          <code>
            <pre>
              class MyClass{
              IList myList;
              }
              MyClass myObject = new MyClass();
              myObject.myList = objectContainer.Ext().Collections().NewLinkedList();
            </pre>
          </code><br /><br />

        </remarks>
        <returns>

          <see cref="IDb4oList">IDb4oList</see>

        </returns>
        <seealso cref="IDb4oList">IDb4oList</seealso>
      </doc>
    </member>
  </type>
</doc>
