<?xml version="1.0"?>
<type name="Db4objects.Db4o.TA.IActivatable">
	<doc>
		<summary>
			IActivatable must be implemented by classes in order to support
			Transparent Activation.
			<br />
			<br />
			The IActivatable interface may be added to persistent classes by hand
			or by using the db4o instrumentation (Db4oTools).
		</summary>
		<remarks>
			IActivatable must be implemented by classes in order to support
			Transparent Activation.
			<br />
			<br />
			The IActivatable interface may be added to persistent classes by hand
			or by using the db4o instrumentation (Db4oTools). For further
			information on the enhancer see:
			<br />
			<br />
			http://developer.db4o.com/Resources/view.aspx/Reference/Implementation_Strategies/Enhancement_Tools/Enhancement_For_.NET.
			<br />
			<br />
			The basic idea for Transparent Activation is as follows:
			<br />
			Objects have an activation depth of 0, i.e. by default they are not
			activated at all. Whenever a method is called on such an object, the
			first thing to do before actually executing the method body is to
			activate the object to level 1, i.e. populating its direct members.
			<br />
			<br />
			To illustrate this approach, we will use the following simple class.
			<br />
			<br />
			<code>
				public class Item {
				<br />&#160;&#160;&#160;private Item _next;<br /><br />
	 &#160;&#160;&#160;public Item(Item next) {<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;_next = next;<br />
	 &#160;&#160;&#160;}<br /><br />
	 &#160;&#160;&#160;public Item Next {<br />
	 &#160;&#160;&#160;&#160;&#160;get {<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;return _next;<br />
	 &#160;&#160;&#160;&#160;&#160;}<br />
	 &#160;&#160;&#160;}<br />
	 }<br /><br /></code>
	 The basic sequence of actions to get the above scheme to work is the
	 following:<br />
	 <br />
	 - Whenever an object is instantiated from db4o, the database registers an
	 activator for this object. To enable this, the object has to implement the
	 IActivatable interface and provide the according Bind(IActivator) method. The
	 default implementation of the bind method will simply store the given
	 activator reference for later use.<br />
	 <br />
	 <code>
	 public class Item implements IActivatable {<br />
	 &#160;&#160;&#160;transient IActivator _activator;<br /><br />
	 &#160;&#160;&#160;public void Bind(IActivator activator) {<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;if (null != _activator) {<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw new IllegalStateException();<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;}<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;_activator = activator;<br />
	 &#160;&#160;&#160;}<br /><br />
	 &#160;&#160;&#160;// ...<br />
	 }<br /><br /></code>
	 - The first action in every method body of an activatable object should be a
	 call to the corresponding IActivator's Activate() method. (Note that this is
	 not enforced by any interface, it is rather a convention, and other
	 implementations are possible.)<br />
	 <br />
	 <code>
	 public class Item implements IActivatable {<br />
	 &#160;&#160;&#160;public void Activate() {<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;if (_activator == null) return;<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;_activator.Activate();<br />
	 &#160;&#160;&#160;}<br /><br />
	 &#160;&#160;&#160;public Item Next() {<br />
	 &#160;&#160;&#160;&#160;&#160;get {<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;Activate();<br />
	 &#160;&#160;&#160;&#160;&#160;&#160;return _next;<br />
	 &#160;&#160;&#160;&#160;&#160;}<br />
	 &#160;&#160;&#160;}<br />
	 }<br /><br /></code>
	 - The Activate() method will check whether the object is already activated.
	 If this is not the case, it will request the container to activate the object
	 to level 1 and set the activated flag accordingly.<br />
	 <br />
	 To instruct db4o to actually use these hooks (i.e. to register the database
	 when instantiating an object), TransparentActivationSupport has to be
	 registered with the db4o configuration.<br />
	 <br />
	 <code>
	 ICommonConfiguration config = ...<br />
	 config.Add(new TransparentActivationSupport());<br /><br />
	 </code>
	</remarks>

    </doc>
  </type>

