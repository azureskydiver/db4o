.n
.a Indexes ..
.0 Indexes ..

db4o allows to index fields to provide maximum querying ._
performance. To request an index to be created, you would ._
issue the following API method call in your global  ._
.l Configuration db4o configuration method ..  before you ._
open an IObjectContainer/IObjectServer:

.c // assuming
class Foo
{
  String bar;
}

Db4oFactory.Configure().ObjectClass(typeof(Foo)).ObjectField("bar").Indexed(true); ..

If the configuration is set in this way, an index on the Foo#bar field ._
will be created (if not present already) the next time you open an
IObjectContainer/IObjectServer and you use the Foo class the first time
in your application.

Contrary to all other  .l Configuration configuration calls ..  indexes ._
- once created - will remain in a database even if the index configuration ._
call is not issued before opening an IObjectContainer/IObjectServer. 

To drop an index you would also issue a configuration call in your db4o ._
configuration method:
.c Db4oFactory.Configure().ObjectClass(typeof(Foo)).ObjectField("bar").Indexed(false); ..
Actually dropping the index will take place the next time the respective ._
class is used.

db4o will tell you when it creates and drops indexes, if you choose a ._
message level of 1 or higher:
.c Db4oFactory.Configure().MessageLevel(1); ..

For creating and dropping indexes on large amounts of objects there are ._
two possible strategies:
(1) Import all objects with indexing off, configure the index and reopen ._
the ObjectContainer/ObjectServer.
(2) Import all objects with indexing turned on and commit regularly ._
for a fixed amount of objects (~10,000).

(1) will be faster.
(2) will keep memory consumption lower.