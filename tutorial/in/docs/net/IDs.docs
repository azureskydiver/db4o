.n
.a IDs ..
.0 IDs ..

The db4o team recommends, not to use object IDs where this is ._
not necessary. db4o keeps track of object identities in a ._
transparent way, by identifying "known" objects on updates. ._
The reference system also makes sure that every persistent ._
object is instantiated only once, when a graph of objects is ._
retrieved from the database, no matter which access path is ._
chosen. If an object is accessed by multiple queries or by ._
multiple navigation access paths, db4o will always return ._
the one single object, helping you to put your object graph together ._
exactly the same way as it was when it was stored, without ._
having to use IDs.

The use of IDs does make sense when object and database are ._
disconnected, for instance in stateless applications.

db4o provides two types of ID systems.

.1 Internal IDs ..
The internal db4o ID is a physical pointer into the database ._
with only one indirection in the file to the actual object ._
so it is the fastest external access to an object db4o provides. ._
The internal ID of an object is available with
.c objectContainer.Ext().GetID(object); ..
To get an object for an internal ID use
.c objectContainer.Ext().GetByID(id); ..
Note that #GetByID() does not activate objects. If you want ._
to work with objects that you get with #GetByID(), your code ._
would have to make sure the object is  .l Activation activated ..  by calling
.c objectContainer.Activate(object, depth); ..
db4o assigns internal IDs to any stored first class object. These ._
internal IDs are guaranteed to be unique within one IObjectContainer/IObjectServer ._
and they will stay the same for every ._
object when an IObjectContainer/IObjectServer is closed and reopened. ._
Internal IDs  .b will change ..  when an object is moved from one ._
IObjectContainer to another, as it happens during Defragment.

.1 Unique Universal IDs (UUIDs) ..
For long term external references and to identify an object even ._
after it has been copied or moved to another IObjectContainer, db4o ._
supplies UUIDs. These UUIDs are not generated by default, since ._
they occupy some space and consume some performance for maintaining ._
their index. UUIDs can be turned on globally or for individual classes:
.c IFileConfiguration#GenerateUUIDs(Int32.MaxValue);
Db4oFactory.Configure().ObjectClass(typeof(Foo)).GenerateUUIDs(true); ..
The respective methods for working with UUIDs are:
.c IExtObjectContainer#GetObjectInfo(object) 
IObjectInfo#GetUUID();
IExtObjectContainer#GetByUUID(Db4oUUID); ..