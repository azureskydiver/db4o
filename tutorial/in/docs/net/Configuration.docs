.n
.a Configuration ..
.0 Configuration ..

db4o provides a wide range of configuration methods to request ._
special behaviour. For a complete list of all available methods ._
see the API documentation for the Db4objects.Db4o.Config namespace. ._
A more complete description of Configuration usage and scope can also ._
be obtained from the  .l http://developer.db4o.com/resources/view.aspx/Reference/Tuning/Configuration Reference ..   documentation.


Some hints around using configuration calls:

.1 Scope ..
Configuration calls can be issued to a global configuration ._
context with
.c Db4oFactory.Configure() ..
and to an open IObjectContainer/IObjectServer with 
.c objectContainer.Ext().Configure()
objectServer.Ext().Configure() ..
A separate configuration instance can be obtained with
.c IConfiguration config = Db4oFactory.NewConfiguration() ..
or cloned from the global configuration with
.c IConfiguration config = Db4oFactory.CloneConfiguration() ..
Configuration can be submitted when an IObjectContainer/IObjectServer is opened:
.c Db4oFactory.OpenFile(config, filename) ..
Otherwise  the global ._
configuration context will be cloned and copied into the newly opened ._
IObjectContainer/IObjectServer. Subsequent calls against the global ._
context with Db4oFactory.Configure() have no effect on open ._
IObjectContainers/IObjectServers.

.1 Calling Methods ..
Many configuration methods have to be called before an ._
IObjectContainer/IObjectServer is opened and will be ignored ._
if they are called against open IObjectContainers/IObjectServers. ._
Some examples:
.c Configuration conf = Db4oFactory.Configure();
conf.ObjectClass(typeof(Foo)).ObjectField("bar").Indexed(true);
conf.ObjectClass(typeof(Foo)).CascadeOnUpdate();
conf.ObjectClass(typeof(Foo)).CascadeOnDelete();
conf.ObjectClass(typeof(System.Drawing.Image))
  .translate(new TSerializable());
conf.GenerateUUIDs(int.MAX_VALUE);
conf.GenerateVersionNumbers(int.MAX_VALUE);
conf.AutomaticShutDown(false);
conf.LockDatabaseFile(false);
conf.SingleThreadedClient(true);
conf.WeakReferences(false); ..

Configurations that influence the database file format will ._
have to take place, before a database is created, before the ._
first #OpenXXX() call. Some examples:
.c Configuration conf = Db4oFactory.Configure();
conf.BlockSize(8);
conf.Unicode(false); ..

Configuration settings are  .b not ..  stored in db4o database files. ._
Accordingly the same configuration has to be submitted  ._
 .b every time ..  an ObjectContainer/ObjectServer is opened. ._
For using db4o in client/server mode it is recommended to use the ._
same configuration on the server and on the client. To ._
set this up nicely it makes sense to create one application class ._
with one method that creates an appropriate configuration and to deploy ._
this class both to the server and to all clients.
