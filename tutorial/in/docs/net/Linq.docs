.1 LINQ ..

db4o querying syntax has got even easier with the introduction of .NET LINQ queries. ._
LINQ allows you to write compile checked db4o queries, which can be refactored ._
automatically when a field name changes and which are supported by code ._
auto-completion tools.
In order to use LINQ you will need to add references to System.Data.Linq.dll and ._
Db4objects.Db4o.Linq.dll and usage to your program class:
.c using System.Linq;
using Db4objects.Db4o.Linq; ..  
If you are already familiar with LINQ syntax, you can just start writing ._
LINQ to query db4o.  Otherwise you may want to familiarise yourself with ._
LINQ resources on  .l http://msdn2.microsoft.com/en-us/library/bb397926.aspx MSDN ..l

.2 Linq Examples ..
Let's prepare some objects in our database to query against:
.s com.db4o.f1.chapter9.LinqExample#storeObjects -run ..

The simplest LINQ query will look like this:
.s com.db4o.f1.chapter9.LinqExample#retrievePilot -run ..
You can see that we are using db4o object container as a datasource, ._
the rest of the syntax is generic to all LINQ queries.

Now let's try a bit more complex selection:
.s com.db4o.f1.chapter9.LinqExample#retrievePilotByCar -run ..
So we can constrain on one object and retrieve a list of others. You can ._
even create completely new objects based on the retrieved information ._
using  .i select new MyObject(field1, field2...) .. . Try to experiment with ._
different LINQ queries against db4o database.

.2 Performance ..
db4o query processor is based on SODA queries, therefore LINQ query is analysed ._
and converted to SODA syntax in the runtime. However, in some cases this ._
conversion is not possible. This can happen when query is constrained ._
against aggregates or projections of a field value and in other cases ._
when SODA equivalent does not exists. For example:
.s com.db4o.f1.chapter9.LinqExample#retrievePilotUnoptimized -run ..
The query still works, but it requires instantiation of all candidate ._
objects, which is much less performant than SODA query. 

