.n
.a Configuration ..
.0 Configuration ..

db4o provides a wide range of configuration methods to request ._
special behaviour. For a complete list of all available methods ._
see the API documentation for the com.db4o.config package. ._
A more complete description of Configuration usage and scope can also ._
be obtained from the  .l http://developer.db4o.com/resources/view.aspx/Reference/Tuning/Configuration Reference ..   documentation.

Some hints around using configuration calls:

.1 Scope ..
Configuration calls can be issued to a global VM-wide configuration ._
context with
.c Db4o.configure() ..
and to an open ObjectContainer/ObjectServer with 
.c objectContainer.ext().configure()
objectServer.ext().configure() ..
A separate configuration instance can be obtained with
.c Configuration config = Db4o.newConfiguration() ..
or cloned from the global configuration with
.c Configuration config = Db4o.cloneConfiguration() ..
Configuration can be submitted when an ObjectContainer/ObjectServer is opened:
.c Db4o.openFile(config, filename) ..
Otherwise  the global ._
configuration context will be cloned and copied into the newly opened ._
ObjectContainer/ObjectServer. Subsequent calls against the global ._
context with Db4o.configure() have no effect on open ._
ObjectContainers/ObjectServers.

.1 Calling Methods ..
Many configuration methods have to be called before an ._
ObjectContainer/ObjectServer is opened and will be ignored ._
if they are called against open ObjectContainers/ObjectServers. ._
Some examples:
.c Configuration conf = Db4o.configure();
conf.objectClass(Foo.class).objectField("bar").indexed(true);
conf.objectClass(Foo.class).cascadeOnUpdate();
conf.objectClass(Foo.class).cascadeOnDelete();
conf.objectClass(typeof(System.Drawing.Image))
  .translate(new TSerializable());
conf.generateUUIDs(Integer.MAX_VALUE);
conf.generateVersionNumbers(Integer.MAX_VALUE);
conf.automaticShutDown(false);
conf.lockDatabaseFile(false);
conf.singleThreadedClient(true);
conf.weakReferences(false); ..

Configurations that influence the database file format will ._
have to take place, before a database is created, before the ._
first #openXXX() call. Some examples:
.c Configuration conf = Db4o.configure();
conf.blockSize(8);
conf.unicode(false); ..

Configuration settings are  .b not ..  stored in db4o database files. ._
Accordingly the same configuration has to be submitted  ._
 .b every time ..  an ObjectContainer/ObjectServer is opened. ._
For using db4o in client/server mode it is recommended to use the ._
same configuration on the server and on the client. To ._
set this up nicely it makes sense to create one application class ._
with one method that creates an appropriate configuration and to deploy ._
this class both to the server and to all clients.