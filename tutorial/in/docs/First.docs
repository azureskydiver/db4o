.n
.a First ..
.0 First Steps ..

Let's get started as simple as possible. We are going to demonstrate how to store, ._
retrieve, update and delete instances ._
of a single class that only contains primitive and String members. In our example ._
this will be a Formula One (F1) pilot whose attributes are his name and the F1 points ._
he has already gained this season.

First we create a class to hold our data. It looks like this:

.s com.db4o.f1.chapter1.Pilot ..

Notice that this class does not contain any db4o-related code.

.1 Opening the database ..

To access a db4o database file or create a new one, call Db4o.openFile(), ._
providing the path to your file as the parameter, to obtain an ObjectContainer ._
instance. ObjectContainer represents "The Database", and will be your primary ._
interface to db4o. Closing the container with the #.close() method will close the ._
database file and release all resources associated with it.

.s com.db4o.f1.chapter1.FirstStepsExample#accessDb4o -run ..

For the following examples we will assume that our environment takes care ._
of opening and closing the ObjectContainer automagically, and stores the ._
reference in a variable named 'db'.

.1 Storing objects ..

To store an object, we simply call set() on our database, passing ._
any object as a parameter.

.s com.db4o.f1.chapter1.FirstStepsExample#storeFirstPilot ..

We'll need a second pilot, too.

.s com.db4o.f1.chapter1.FirstStepsExample#storeSecondPilot ..

.1 Retrieving objects ..

db4o supplies three different quering systems, .i Query by Example ..  (QBE), ._
.i Native Queries ..  (NQ) and the  .i SODA Query API ..  (SODA). In this ._
first example we will introduce QBE. Once you are familiar with storing ._
objects, we encourage you to use  .l NativeQueries Native Queries .. , the main
db4o querying interface.

When using Query-By-Example, you create a prototypical object for db4o to use as an example of what ._
you wish to retrieve. db4o will retrieve all objects of the given type that contain the ._
same (non-default) field values as the example. The results will be returned as an ._
ObjectSet instance. We will use a convenience method 'listResult' to display the contents ._
of our results:

.s com.db4o.f1.Util#listResult +{} -run ..

To retrieve all pilots from our database, we provide an 'empty' prototype:

.s com.db4o.f1.chapter1.FirstStepsExample#retrieveAllPilotsQBE ..

Note that we specify 0 points, but our results were not constrained to only those Pilots ._
with 0 points; 0 is the default value for int fields.

db4o also supplies a shortcut to retrieve all instances of a class:

.s com.db4o.f1.chapter1.FirstStepsExample#retrieveAllPilots ..

For  .? java JDK 5 ..? .? net .NET 2.0 ..?  there also is a generics shortcut, using the ._
query method:

.? java .c List <Pilot> pilots = db.query(Pilot.class); ..c ..?
.? net .c IList <Pilot> pilots = db.query<Pilot>(typeof(Pilot)); ..c ..?

To query for a pilot by name:

.s com.db4o.f1.chapter1.FirstStepsExample#retrievePilotByName ..

And to query for Pilots with a specific number of points:

.s com.db4o.f1.chapter1.FirstStepsExample#retrievePilotByExactPoints ..


Of course there's much more to db4o queries. They will be covered in more depth in later chapters.

.1 Updating objects ..

Updating objects is just as easy as storing them. In fact, you use the same set() method to update ._
your objects: just call set() again after modifying any object.

.s com.db4o.f1.chapter1.FirstStepsExample#updatePilot ..

Notice that we query for the object first. This is an importaint point. When you call set() to modify a ._
stored object, if the object is not 'known' (having been previously stored or retrieved durring the current session), ._
db4o will insert a new object. db4o does this because it does not automatically match up objects to be ._
stored, with objects previously stored. It assumes you are inserting a second object which happens to have ._
the same field values.

To make sure you've updated the pilot, please return to any of the retrieval ._
examples above and run them again.

.1 Deleting objects ..

Objects are removed from the database using the delete() method.

.s com.db4o.f1.chapter1.FirstStepsExample#deleteFirstPilotByName ..

Let's delete the other one, too.

.s com.db4o.f1.chapter1.FirstStepsExample#deleteSecondPilotByName ..

Please check the deletion with the retrieval examples above.

As with updating objects, the object to be deleted has to be 'known' to db4o. It is not sufficient ._
to provide a prototype object with the same field values.

.1 Conclusion ..

That was easy, wasn't it? We have stored, retrieved, updated and ._
deleted objects with a few lines of code. But what about complex ._
queries? Let's have a look at the restrictions of QBE and alternative ._
approaches in the  .l Query next chapter ..l .

.1 Full source ..

.s com.db4o.f1.chapter1.FirstStepsExample ..
