.n
.a First ..
.0 First Steps ..

Let us get started as simple as possible. We are going to learn how to store, ._
retrieve, update and delete instances of a single class that only contains ._
primitive and String members. In our example this will be a Formula One (F1) pilot ._
whose attributes are his name and the F1 points he has already gained this ._
season.

First we create a native class such as:

.s com.db4o.f1.chapter1.Pilot ..

Note that this class does not contain any db4o related code.

.1 Storing objects ..

To access a db4o database file or create a new one, call Db4o.openFile(), ._
providing the path to your file as the parameter, to obtain an ObjectContainer ._
instance. ObjectContainer will be your primary interface to db4o. Closing the ._
container will release all resources associated with it.

.s com.db4o.f1.chapter1.FirstStepsExample#accessDb4o -run ..

For the following examples we will assume that our environment takes care ._
of opening and closing the ObjectContainer automagically. 

To store an object, we simply call set() on our database, passing ._
the object as a parameter.

.s com.db4o.f1.chapter1.FirstStepsExample#storeFirstPilot ..

We'll need a second pilot, too.

.s com.db4o.f1.chapter1.FirstStepsExample#storeSecondPilot ..

.1 Retrieving objects ..

To query the database for our pilot, we shall use .i  Native Queries .. ._
(NQ) for now. Native Queries are based on expressions in your native programing language. ._
This expression can be any valid code in the language that your compiler understands. The result will be handed ._
back as a standard List. We will use a convenience method 'listResult', ._
inherited by all our main example classes, to display a result's content and reset it for further use:

.s com.db4o.f1.Util#listResult +{} -run ..

To retrieve all pilots from our database, the expression must simply return true:

.s com.db4o.f1.chapter1.FirstStepsExample#retrieveAllPilots ..

Note that our results are not constrained to have 0 points, as 0 is the default ._
value for int fields.

To query for a pilot by name:

.s com.db4o.f1.chapter1.FirstStepsExample#retrievePilotByName ..

Let's retrieve a pilot by exact points:

.s com.db4o.f1.chapter1.FirstStepsExample#retrievePilotByExactPoints ..

Of course there's much more to db4o queries. We'll come to that in a moment.

.1 Updating objects ..

To update an object already stored in db4o, just call set() again after modifying ._
it.

.s com.db4o.f1.chapter1.FirstStepsExample#updatePilot ..

Note that it is necessary that db4o already 'knows' this pilot, else it will ._
store it as a new object. 'Knowing' an object basically means having it set or ._
retrieved during the current db4o session. We'll explain this later in more detail.

To make sure you've updated the pilot, please return to any of the retrieval ._
examples above and run them again.

.1 Deleting objects ..

Objects are removed from the database using the delete() method.

.s com.db4o.f1.chapter1.FirstStepsExample#deleteFirstPilotByName ..

Let's delete the other one, too.

.s com.db4o.f1.chapter1.FirstStepsExample#deleteSecondPilotByName ..

Please check the deletion with the retrieval examples above.

Again, the object to be deleted has to be known to db4o.

.1 Conclusion ..

That was easy, wasn't it? We have stored, retrieved, updated and ._
deleted objects with a few lines of code.

.1 Full source ..

.s com.db4o.f1.chapter1.FirstStepsExample ..
