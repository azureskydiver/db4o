namespace com.db4o.db4ounit.common.assorted
{
	public class PreventMultipleOpenTestCase : Db4oUnit.Extensions.AbstractDb4oTestCase
	{
		private static readonly string FILE = "PreventMultipleOpenTestCase.db4o";

		public static void Main(string[] args)
		{
			new com.db4o.db4ounit.common.assorted.PreventMultipleOpenTestCase().RunSolo();
		}

		protected override void Db4oCustomTearDown()
		{
			com.db4o.foundation.io.File4.Delete(FILE);
			base.Db4oCustomTearDown();
		}

		public virtual void TestOpenTwice()
		{
			com.db4o.ObjectContainer oc = com.db4o.Db4o.OpenFile(FILE);
			Db4oUnit.Assert.Expect(typeof(com.db4o.ext.DatabaseFileLockedException), new _AnonymousInnerClass31
				(this));
			KeepAlive(oc);
			oc.Close();
		}

		private sealed class _AnonymousInnerClass31 : Db4oUnit.CodeBlock
		{
			public _AnonymousInnerClass31(PreventMultipleOpenTestCase _enclosing)
			{
				this._enclosing = _enclosing;
			}

			public void Run()
			{
				com.db4o.Db4o.OpenFile(com.db4o.db4ounit.common.assorted.PreventMultipleOpenTestCase
					.FILE);
			}

			private readonly PreventMultipleOpenTestCase _enclosing;
		}

		public virtual void TestReopen()
		{
			com.db4o.ObjectContainer oc = com.db4o.Db4o.OpenFile(FILE);
			oc.Close();
			oc = com.db4o.Db4o.OpenFile(FILE);
			Db4oUnit.Assert.IsNotNull(oc);
			oc.Close();
		}

		private void KeepAlive(com.db4o.ObjectContainer oc)
		{
		}
	}
}
