namespace com.db4o.reflect.self
{
	/// <summary>
	/// Contains the application-specific reflection information (that would
	/// be generated by a bytecode enhancer), as opposed to the 'generic'
	/// functionality contained in SelfReflector.
	/// </summary>
	/// <remarks>
	/// Contains the application-specific reflection information (that would
	/// be generated by a bytecode enhancer), as opposed to the 'generic'
	/// functionality contained in SelfReflector.
	/// </remarks>
	public abstract class SelfReflectionRegistry
	{
		private static readonly j4o.lang.Class[] ARRAYTYPES = { j4o.lang.Class.getClassForType
			(typeof(int[])), j4o.lang.Class.getClassForType(typeof(long[])), j4o.lang.Class.getClassForType
			(typeof(short[])), j4o.lang.Class.getClassForType(typeof(char[])), j4o.lang.Class.getClassForType
			(typeof(byte[])), j4o.lang.Class.getClassForType(typeof(bool[])), j4o.lang.Class.getClassForType
			(typeof(float[])), j4o.lang.Class.getClassForType(typeof(double[])), j4o.lang.Class.getClassForType
			(typeof(string[])) };

		private static readonly j4o.lang.Class[] PRIMITIVES = { j4o.lang.Class.getClassForType
			(typeof(int)), j4o.lang.Class.getClassForType(typeof(long)), j4o.lang.Class.getClassForType
			(typeof(short)), j4o.lang.Class.getClassForType(typeof(char)), j4o.lang.Class.getClassForType
			(typeof(byte)), j4o.lang.Class.getClassForType(typeof(bool)), j4o.lang.Class.getClassForType
			(typeof(float)), j4o.lang.Class.getClassForType(typeof(double)), j4o.lang.Class.getClassForType
			(typeof(string)) };

		public virtual bool isPrimitive(j4o.lang.Class clazz)
		{
			for (int idx = 0; idx < PRIMITIVES.Length; idx++)
			{
				if (PRIMITIVES[idx].Equals(clazz))
				{
					return true;
				}
			}
			return false;
		}

		public abstract com.db4o.reflect.self.ClassInfo infoFor(j4o.lang.Class clazz);

		public virtual object arrayFor(j4o.lang.Class clazz, int length)
		{
			if (j4o.lang.Class.getClassForType(typeof(int)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(int)).isAssignableFrom(clazz))
			{
				return new int[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(long)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(long)).isAssignableFrom(clazz))
			{
				return new long[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(short)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(short)).isAssignableFrom(clazz))
			{
				return new short[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(bool)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(bool)).isAssignableFrom(clazz))
			{
				return new bool[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(byte)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(byte)).isAssignableFrom(clazz))
			{
				return new byte[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(char)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(char)).isAssignableFrom(clazz))
			{
				return new char[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(float)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(float)).isAssignableFrom(clazz))
			{
				return new float[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(double)).isAssignableFrom(clazz) || j4o.lang.Class.getClassForType
				(typeof(double)).isAssignableFrom(clazz))
			{
				return new double[length];
			}
			if (j4o.lang.Class.getClassForType(typeof(string)).isAssignableFrom(clazz))
			{
				return new string[length];
			}
			return null;
		}

		public virtual j4o.lang.Class componentType(j4o.lang.Class clazz)
		{
			for (int i = 0; i < ARRAYTYPES.Length; i++)
			{
				if (ARRAYTYPES[i].Equals(clazz))
				{
					return PRIMITIVES[i];
				}
			}
			return null;
		}

		public virtual int arrayLength(object array)
		{
			if (array is bool[])
			{
				return ((bool[])array).Length;
			}
			if (array is byte[])
			{
				return ((byte[])array).Length;
			}
			if (array is short[])
			{
				return ((short[])array).Length;
			}
			if (array is char[])
			{
				return ((char[])array).Length;
			}
			if (array is int[])
			{
				return ((int[])array).Length;
			}
			if (array is long[])
			{
				return ((long[])array).Length;
			}
			if (array is float[])
			{
				return ((float[])array).Length;
			}
			if (array is double[])
			{
				return ((double[])array).Length;
			}
			return 0;
		}

		public virtual void setArray(object array, int index, object element)
		{
			if (array is bool[])
			{
				((bool[])array)[index] = ((bool)element);
			}
			if (array is byte[])
			{
				((byte[])array)[index] = ((byte)element);
			}
			if (array is short[])
			{
				((short[])array)[index] = ((short)element);
			}
			if (array is char[])
			{
				((char[])array)[index] = ((char)element);
			}
			if (array is int[])
			{
				((int[])array)[index] = ((int)element);
			}
			if (array is long[])
			{
				((long[])array)[index] = ((long)element);
			}
			if (array is float[])
			{
				((float[])array)[index] = ((float)element);
			}
			if (array is double[])
			{
				((double[])array)[index] = ((double)element);
			}
		}

		public virtual object getArray(object array, int index)
		{
			if (array is bool[])
			{
				return ((bool[])array)[index];
			}
			if (array is byte[])
			{
				return ((byte[])array)[index];
			}
			if (array is short[])
			{
				return ((short[])array)[index];
			}
			if (array is char[])
			{
				return ((char[])array)[index];
			}
			if (array is int[])
			{
				return ((int[])array)[index];
			}
			if (array is long[])
			{
				return ((long[])array)[index];
			}
			if (array is float[])
			{
				return ((float[])array)[index];
			}
			if (array is double[])
			{
				return ((double[])array)[index];
			}
			return null;
		}

		public virtual int flattenArray(object array, object[] a_flat)
		{
			if (array is bool[])
			{
				bool[] shaped = (bool[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			if (array is byte[])
			{
				byte[] shaped = (byte[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			if (array is short[])
			{
				short[] shaped = (short[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			if (array is char[])
			{
				char[] shaped = (char[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			if (array is int[])
			{
				int[] shaped = (int[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			if (array is long[])
			{
				long[] shaped = (long[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			if (array is float[])
			{
				float[] shaped = (float[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			if (array is double[])
			{
				double[] shaped = (double[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					a_flat[i] = shaped[i];
				}
				return shaped.Length;
			}
			return 0;
		}

		public virtual int shapeArray(object[] a_flat, object array)
		{
			if (array is bool[])
			{
				bool[] shaped = (bool[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((bool)a_flat[i]);
				}
				return a_flat.Length;
			}
			if (array is byte[])
			{
				byte[] shaped = (byte[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((byte)a_flat[i]);
				}
				return a_flat.Length;
			}
			if (array is short[])
			{
				short[] shaped = (short[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((short)a_flat[i]);
				}
				return a_flat.Length;
			}
			if (array is char[])
			{
				char[] shaped = (char[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((char)a_flat[i]);
				}
				return a_flat.Length;
			}
			if (array is int[])
			{
				int[] shaped = (int[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((int)a_flat[i]);
				}
				return a_flat.Length;
			}
			if (array is long[])
			{
				long[] shaped = (long[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((long)a_flat[i]);
				}
				return a_flat.Length;
			}
			if (array is float[])
			{
				float[] shaped = (float[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((float)a_flat[i]);
				}
				return a_flat.Length;
			}
			if (array is double[])
			{
				double[] shaped = (double[])array;
				for (int i = 0; i < shaped.Length; i++)
				{
					shaped[i] = ((double)a_flat[i]);
				}
				return a_flat.Length;
			}
			return 0;
		}
	}
}
