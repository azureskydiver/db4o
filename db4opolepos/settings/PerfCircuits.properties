
# Settings for all circuits in the database benchmark.

# melbourne
#
# [objects]: number of objects to be written #, read and deleted
# [commitintervall]: when to perform an intermediate commit during write and delete

melbourne.objects=85000 #, 6000
melbourne.commitinterval=1000 #, 1000



# sepang
#
# [depth]: depth of the tree

sepang.depth=17 #, 14


# sepangmulti
#
# [depth]: depth of the tree

sepangmulti.depth=13 #, 14
sepangmulti.objects=15 #, 30


#  bahrain
#
# [objects]: number of objects to select from
# [selects]: number of queries to be run against all objects
# [updates]: number of updates to be run
# [commitinterval]: when to perform an intermediate commit during write and delete

bahrain.objects=50000 #, 100000
bahrain.selects=50000 #, 100000
bahrain.updates=20000 #, 2000
bahrain.commitinterval=1000 #, 1000


# imola
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects
# [commitinterval]: when to perform an intermediate commit during write and delete

imola.objects=150000 #, 500000
imola.selects=150000 #, 500000
imola.commitinterval=1000 #, 1000


# barcelona
#
# [objects]: number of objects to select from
# [selects]: number of queries run against all objects

barcelona.objects=80000 #, 100000
barcelona.selects=80000 #, 100000


# monaco
#
# [objects]: number of objects in the database
# [commits]: number of added objects and commits

monaco.objects=150000 #, 1000000
monaco.commits=2000 #, 70


# nurburgring
#
# [objects]: number of objects to be written, read and deleted
# [commitintervall]: when to perform an intermediate commit during write and delete

nurburgring.objects=90000 #, 400000
nurburgring.commitinterval=1000 #, 1000


# montreal
#
# [size]: number of elements per list

montreal.size=5000 #, 5000


# indianapolisfast
#
# [objects]: number of elements per list
# [selects]: number of queries to be run

indianapolisfast.objects=700000 #, 1000000
indianapolisfast.selects=70000 #, 1000

# indianapolismedium
#
# [objects]: number of elements per list
# [selects]: number of queries to be run

indianapolismedium.objects=100000 #, 1000000
indianapolismedium.selects=800 #, 1000


# indianapolisunoptimized
#
# [objects]: number of elements per list
# [selects]: number of queries to be run

indianapolisslow.objects=50000 #, 30000
indianapolisslow.selects=5 #, 30


# magnycours
#
# [objects]: number of elements per list

magnycours.objects=200000 #400000 #, 100000


# silverstone
#
# [objects]: number of elements per list
# [selects]: number of queries to be run

silverstone.objects=10000 #, 100000
silverstone.updates=5 #, 5


#hockenheim
#
# [objects]: number of stored objects

hockenheim.objects=40000 #, 100000


#hungaroring
#
#
# [objects]: number of elements per list
# [selects]: number of queries to be run

hungaroring.objects=40000 #, 100000
hungaroring.selects=12 #, 30


# istanbul
#
# [objects]: number of objects to store
# [selects]: number of query runs, executing the same query

istanbul.objects=100000 #, 100000
istanbul.selects=100000 #, 1000000


