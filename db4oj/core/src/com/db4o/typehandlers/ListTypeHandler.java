/* Copyright (C) 2004 db4objects Inc. http://www.db4o.com */package com.db4o.typehandlers;import java.util.*;import com.db4o.ext.*;import com.db4o.foundation.*;import com.db4o.internal.*;import com.db4o.internal.activation.*;import com.db4o.internal.delete.*;import com.db4o.internal.handlers.*;import com.db4o.internal.marshall.*;import com.db4o.marshall.*;/** * TypeHandler for classes that implement java.util.List.<br><br> *  * @decaf.ignore.jdk11 *  */public class ListTypeHandler implements TypeHandler4, FirstClassHandler,		CanHoldAnythingHandler, VariableLengthTypeHandler {	public PreparedComparison prepareComparison(Context context, Object obj) {		// TODO Auto-generated method stub		return null;	}	public void write(WriteContext context, Object obj) {		List list = (List) obj;		TypeHandler4 elementHandler = detectElementTypeHandler(container(context), list);		writeElementTypeHandlerId(context, elementHandler);		writeElementCount(context, list);		writeElements(context, list, elementHandler);	}	public Object read(ReadContext context) {		List list = (List) ((UnmarshallingContext) context).persistentObject();		list.clear();		TypeHandler4 elementHandler = readElementTypeHandler(context, context);		int elementCount = context.readInt();		for (int i = 0; i < elementCount; i++) {			list.add(context.readObject(elementHandler));		}		return list;	}	private void writeElementTypeHandlerId(WriteContext context, TypeHandler4 elementHandler) {		context.writeInt(0);	}	private void writeElementCount(WriteContext context, List list) {		context.writeInt(list.size());	}	private void writeElements(WriteContext context, List list, TypeHandler4 elementHandler) {		final Iterator elements = list.iterator();		while (elements.hasNext()) {			context.writeObject(elementHandler, elements.next());		}	}	private ObjectContainerBase container(Context context) {		return ((InternalObjectContainer) context.objectContainer())				.container();	}	private TypeHandler4 readElementTypeHandler(ReadBuffer buffer, Context context) {		buffer.readInt();		return container(context).handlers().untypedObjectHandler();	}	private TypeHandler4 detectElementTypeHandler(InternalObjectContainer container, List list) {		return container.handlers().untypedObjectHandler();	}	public void delete(final DeleteContext context) throws Db4oIOException {		if (!context.cascadeDelete()) {			return;		}		TypeHandler4 handler = readElementTypeHandler(context, context);		int elementCount = context.readInt();		for (int i = elementCount; i > 0; i--) {			handler.delete(context);		}	}	public void defragment(DefragmentContext context) {		TypeHandler4 handler = readElementTypeHandler(context, context);		int elementCount = context.readInt();		for (int i = 0; i < elementCount; i++) {			handler.defragment(context);		}	}	public final void cascadeActivation(ActivationContext4 context) {		Iterator all = ((List) context.targetObject()).iterator();		while (all.hasNext()) {			context.cascadeActivationToChild(all.next());		}	}	public TypeHandler4 readCandidateHandler(QueryingReadContext context) {		return this;	}    public void collectIDs(final QueryingReadContext context) {		TypeHandler4 elementHandler = readElementTypeHandler(context, context);        int elementCount = context.readInt();        for (int i = 0; i < elementCount; i++) {            context.readId(elementHandler);        }    }}