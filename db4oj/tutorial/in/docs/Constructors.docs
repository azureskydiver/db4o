.n
.a Constructors ..
.0 Constructors ..

(Work in progress, Patrick)

Sometimes you may find that db4o refuses to store instances of certain ._
classes, or appears to store them, but delivers incomplete instances ._
on queries. To understand the problem and the alternative solutions ._
at hand, we'll have to take a look at the way db4o "instantiates" ._
objects when retrieving them from the database.

.1 Instantiating objects ..

Db4o currently knows three ways of creating and populating an object ._
from the database. The approach to be used can be configured globally ._
and on a per-class basis.

.2 Using a constructor ..

The most obvious way is to call an appropriate constructor. Db4o does ._
.i not ..  require a public or no-args constructor. It can use any ._
constructor that accepts default (null/0) values for all of its ._
arguments without throwing an exception. Db4o will test all available ._
constructors on the class (including private ones) until it finds ._
a suitable one.

What if no such constructor exists?

.2 Bypassing the constructor ..

Db4o can also bypass the constructors declared for this class using
platform-specific mechanisms. However, ._
this will break classes that rely on the constructor to be executed, for ._
example in order to populate transient members.

.i This currently is the default setting. ..i

.2 Using a translator ..

If none of the two approaches above is suitable, db4o provides a way ._
to specify in detail how instances of a class should be stored and ._
reinstantiated by implementing the Translator interface and registering ._
this implementation for the offending class.

We'll cover translators in detail in the next chapter.

.1 Configuration ..



.1 Troubleshooting ..

At least for development code, it is always a good idea to instruct ._
db4o to check for available constructors at storage time. (If you've ._
configured db4o to use constructors at all.)

.c
Db4o.configure().exceptionsOnNotStorable(true);
..c

If this setting triggers exceptions in your code, or if instances of a class ._
seem to lose members during storage, check the involved classes ._
(especially their constructors) for problems similar to the ones ._
shown in the following section.

.1 Examples ..

.c class C1 {
  private String s;

  private C1(String s) {
    this.s=s;
  }

  public String toString() {
    return s;
  }
}
..c

This class is fine for use with and without callConstructors set.

.c class C2 {
  private transient String x;
  private String s;

  private C2(String s) {
    this.s=s;
    this.x="x";
  }

  public String toString() {
    return s+x.length();
  }
}
..c

This class needs to have callConstructors set to true. Otherwise, since
transient members are not stored and the constructor code is not
executed, toString() will run into a NullPointerException on x.length().

.c class C3 {
  private String s;
  private int i;

  private C3(String s) {
    this.s=s;
    this.i=s.length();
  }

  public String toString() {
    return s+i;
  }
}
..c

This class needs to have callConstructors set to false (the default),
since the (only) constructor will throw a NullPointerException when
called with a null value.

.c class C4 {
  private String s;
  private transient int i;

  private C4(String s) {
    this.s=s;
    this.i=s.length();
  }

  public String toString() {
    return s+i;
  }
}
..c

This class cannot be cleanly reinstantiated by db4o: Both approaches
will fail, so one has to resort to configuring a translator.