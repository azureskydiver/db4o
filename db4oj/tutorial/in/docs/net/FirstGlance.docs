.0 First Glance ..
Before diving straight into the first source code samples ._
let's get you familiar with some basics.

.1 The db4o engine... ..
The db4o object database engine consists of one single DLL. ._
This is all that you need to program against. The versions ._
supplied with the distribution can be found in /db4o-4.0/dll/.	

.b /db4o-4.0/dll/net/db4o.dll ..
is the standard db4o engine for the .NET framework.

.b /db4o-4.0/dll/compact/db4o.dll ..
is built for the .NET CompactFramework.

.1 Installation ..
To use db4o in a development project, you only need to add one ._
of the above db4o.dll files to your project references.

Here is how to do this with Visual Studio .NET:
- copy db4o.dll to your VS.NET project folder
- Right-click on "References" in the Solution Explorer
- choose "Add Reference"
- select "Browse"
- find the db4o.*dll in your project folder
- click "Open"
- click "OK"
We recommend "Copy Local" to be set to [True] in the properties ._
of the reference.

.n
.1 Object Manager ..
.2 Installation ..
The db4o  .l ObjectManager Object Manager .. , a GUI tool to browse and query ._
database files, is packaged separately for each supported platform. Choose ._
from the following links in the  .l http://www.db4o.com/community/ontheroad/downloadcenter/ db4o Download Center ..  for your platform:
- db4o ObjectManager for Windows IKVM (Java VM included)
- db4o ObjectManager for Windows no Java VM
- db4o ObjectManager for Linux

Once you have downloaded the appropriate Object Manager build, create a folder ._
called Object Manager in an appropriate location and unpack the downloaded ._
zip file there.

.2 Running ..
.3 Windows IKVM ..
Object Manager for Windows IKVM includes the open-source IKVM Java virtual ._
machine in the download.  Simply double-click the objectmanager.bat file ._
to start Object Manager.

.3 Windows no Java VM ..
This build assumes that your computer already has a Sun Java Virtual Machine ._
version 1.3 or later installed and that your operating system path already ._
lists the directory containing your java.exe file.  If this is true, you ._
can simply double-click the objectmanager.bat file to start Object Manager. ._
Otherwise, you will need to edit objectmanager.bat and specify the full ._
path and file name for your java.exe file on the first line.

.3 Linux ..
This build assumes that your computer already has a Sun Java Virtual Machine ._
version 1.3 or later installed and that your PATH variable already lists the ._
directory containing the java binary.  If this is not the case, you will
need to edit the objectmanager.sh file and specify the full path and file name ._
of the Java binary on the "export VMEXE" line".  Since the zip archive does ._
not preserve the executable permissions for objectmanager.sh, you will need
to `chmod +x objectmanager.sh`.  Once this is complete, running objectmanager.sh ._
will start Object Manager.

.n
.1 API ..
The API documentation for db4o is supplied as JavaDocs in 
../db4o-4.0/doc/api/index.html. While you read through this ._
tutorial, it may be helpful to look into the API documentation occasionaly. ._
For the start, the namespaces com.db4o and com.db4o.query are ._
all that you need to worry about.

Let's take a first brief look at one of the most important interfaces:
.c com.db4o.ObjectContainer ..
This will be your view of a db4o database:
- An ObjectContainer can either be a database in single-user mode or ._
a client to a db4o server.
- Every ObjectContainer owns one transaction. All work is transactional. ._
When you open an ObjectContainer, you are in a transaction, when you ._
commit() or rollback(), the next transaction is started immediately.
- Every ObjectContainer maintains it's own references to stored and ._
instantiated objects. In doing so, it manages object identities.

In case you wonder why you only see very few methods in an ObjectContainer, ._
here is why: The db4o interface is supplied in two steps in two namespaces, ._
com.db4o and com.db4o.ext for the following reasons:
- It's easier to get started, because the important methods are emphasized.
- It will be easier for other products to copy the basic db4o interface.
- We hint how a very-light-version of db4o should look like.

Every com.db4o.ObjectContainer object also always is a ._
com.db4o.ext.ExtObjectContainer. You can cast to ExtObjectContainer or you ._
can call the #ext() method if you want to use advanced features.
