.n
.a Encryption ..
.0 Encryption ..

db4o provides built-in encryption functionality.

In order to use it, the following two methods have ._
to be called, before a database file is created: 
.c Db4o.configure().encrypt(true);
Db4o.configure().password("yourEncryptionPasswordHere"); ..

The security standard of the built-in encryption functionality ._
is not very high, not much more advanced than ._
"substract 5 from every byte".

There are 2 reasons for not providing more advanced encryption ._
functionality:
(1) The db4o library is designed to stay small and portable.
(2) The db4o team is determined to avoid problems with U.S. ._
security regulations and export restrictions. 

db4o still provides a solution for high-security encryption by ._
allowing any user to choose his own encryption mechanism that ._
he thinks he needs:
The db4o file IO mechanism is pluggable and any fixed-length ._
encryption mechanism can be added. All that needs ._
to be done is to write an IoAdapter plugin for db4o file IO.

This is a lot easier than it sounds. Simply:
- take the sources of com.db4o.io.RandomAccessFileAdapter
- modify the #read() and #write() methods to encrypt and decrypt ._
when bytes are being exchanged with the file
- plug your adapter into db4o with the following method:
.c Db4o.configure().io(new MyEncryptionAdapter()); ..
