package decaf.generics;

class Foo<T> {
	public T field;
	public T[] array;
	
	public Foo(T value) {
		field = value;
	}
	
	public void run(T value) {
	}
}

class Foo2<T extends CharSequence> extends Foo<T> {

	public Foo2(T value) {
		super(value);
	}

	public void set(int index, T value) {
		array[index] = value;
	}
	
	public void set(T value) {
		field = value;
	}
}

class Bar extends Foo<String> {

	public Bar() {
		super(null);
	}
	
	public String toString() {
		String value = field;
		if (value.isEmpty())
			return null;
		return field;
	}
}

class Baz extends Foo<Foo<String>> {
	public Baz() {
		super(null);
	}
	
	public int size() {
		return field.field.length();
	}
	
	public void run(Foo<String> value) {
		int size = value.field.length();
	}
}

class Main {
	static void main() {
		Foo<String> foo = new Foo<String>("42");
		String s1 = foo.field;
		String s2 = foo.field.toUpperCase();
		String s3 = (foo).field;
		String s4 = foo.array[0];
		foo.field = s1;
		(foo).field = s2;
		foo.array[0] = s3;
	}
}