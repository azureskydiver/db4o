package decaf;

class Animal implements Comparable {
	public static final Animal Cow = new Animal(0, "Cow");
	public static final Animal Bear = new Animal(1, "Bear");
	public static final Animal Cat = new Animal(2, "Cat");
	public static final Animal Dog = new Animal(3, "Dog");
	
	private final String _name;
	private final int _value;
	
	private Animal(int value, String name) {
		_value = value;
		_name = name;
	}
	
	public String toString() {
		return _name;
	}
	
	public Animal[] values() {
		return new Animal[] { Cow, Bear, Cat, Dog };
	}
	
	public Animal valueOf(String value) {
		Animal[] values = values();
		for(int i = 0; i < values.length; i++) {
			if (values[i].name().equals(value)) return values[i];			
		}
		
		throw new IllegalArgumentException("No enum const class " + value); 
	}
	
	public int compareTo(Object rhs) {
		Animal other = (Animal) rhs;
		return _value - rhs._value;
	}
}

class Hero implements Comparable {
	public static final Hero SuperMan = new Hero("SuperMan", 1938),
	public static final Hero Batman = new Hero("Batman",1939),
	public static final Hero BatGirl = new Hero("BatGirl", 1961),
	public static final Hero BobParr = new Hero("BobParr", 2004)
	
	private final String _name;
	private final int _year;
	
	Hero(String name, int year) {
		_name = name;	
		_year = year; 
	}

	public int year() {
		return _year; 
	}
	
	public String toString() {
		return _name + "/" + _year;
	}
	
	public Hero[] values() {
		return new Hero[] {SuperMan, Batman, BatGirl, BobParr };	
	}
}

class TestEnum {
	public void testSwitch(Hero h) {
		if (h == Hero.SuperMan || h == Hero.BobParr) {
			System.out.println("SuperMan or Mr. Incredible"); 
		} else if (h == Hero.BatGirl) {
			System.out.println("BatGirl"); 
		} else {
			System.out.println(h);
		}
	}
}